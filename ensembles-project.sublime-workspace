{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"annot",
				"annotationsData"
			],
			[
				"check",
				"_checkAllModels"
			],
			[
				"buildMo",
				"buildModelDeviancesVis"
			],
			[
				"plot",
				"plotDataOptions"
			],
			[
				"zLa",
				"zLabelRotation"
			],
			[
				"ignor",
				"ignoredColumns"
			],
			[
				"aggre",
				"aggregateFrame"
			],
			[
				"aggregate",
				"aggregateFrameOptions"
			],
			[
				"exem",
				"exemplarsFrame"
			],
			[
				"proto",
				"prototype"
			],
			[
				"tool",
				"tooltipVariables"
			],
			[
				"drawmem",
				"drawMembersData"
			],
			[
				"draw",
				"drawMembersData"
			],
			[
				"getMe",
				"getMemberFrameRowCount"
			],
			[
				"getMemberFrameActual",
				"getMemberFrameActualRowCountUrl"
			],
			[
				"getMemberFrameActu",
				"getMemberFrameActualRowCountUrl"
			],
			[
				"getMemberFrameActa",
				"getMemberFrameActualRowCountUrl"
			],
			[
				"getMember",
				"getMemberFrameActualRowCount"
			],
			[
				"getMem",
				"getMemberFrameActualRowCountUrl"
			],
			[
				"fet",
				"fetchOptions"
			],
			[
				"getRows",
				"getRowsFrameOptions"
			],
			[
				"getr",
				"getRowsRequestURL"
			],
			[
				"member",
				"membersFrameID"
			],
			[
				"gene",
				"generateMemberFrameCallback"
			],
			[
				"generateMem",
				"generateMemberFrameUrl"
			],
			[
				"getMembef",
				"getMemberFrameUrl"
			],
			[
				"defaul",
				"defaultYVariable"
			],
			[
				"x",
				"xDroplineTextFormat"
			],
			[
				"popo",
				"popoverTooltip"
			],
			[
				"toolt",
				"tooltipVariables"
			],
			[
				"element",
				"elementSelector"
			],
			[
				"pop",
				"popoverTooltip"
			],
			[
				"show",
				"showTooltipOptions"
			],
			[
				"scatter",
				"scatterplotXVariables"
			],
			[
				"scatt",
				"scatterplotUpdate"
			],
			[
				"d3",
				"d3VoronoiScatterplot"
			],
			[
				"rossman",
				"rossmanAggregatedConfig"
			],
			[
				"update",
				"updateMarksStyles"
			],
			[
				"chart",
				"chartOptions"
			],
			[
				"transi",
				"transitionExplodingBoxplot"
			],
			[
				"categori",
				"categoricalVariables"
			],
			[
				"categorical",
				"categoricalColumns"
			],
			[
				"drop",
				"dropdownSelection"
			],
			[
				"cate",
				"categoricalVariables"
			],
			[
				"mar",
				"marksFillOpacity"
			],
			[
				"marks",
				"marksRadius"
			],
			[
				"fill",
				"fillOpacity"
			],
			[
				"opac",
				"opacityCircles"
			],
			[
				"explod",
				"explodingBoxplot"
			],
			[
				"numeric",
				"numericColumns"
			],
			[
				"explodin",
				"explodingBoxplot"
			],
			[
				"global",
				"globalExtents"
			],
			[
				"current",
				"currentExtent"
			],
			[
				"wrapper",
				"wrapperId"
			],
			[
				"curre",
				"currentAlgoLabel"
			],
			[
				"voro",
				"voronoiOptions"
			],
			[
				"response",
				"responseVariable"
			],
			[
				"selec",
				"selector"
			],
			[
				"projec",
				"projectLink"
			],
			[
				"proje",
				"projectTitle"
			],
			[
				"tooltip",
				"tooltipFormats"
			],
			[
				"toolTip",
				"tooltipVariables"
			],
			[
				"legend",
				"legendRectClick"
			],
			[
				"flex",
				"flexDirection"
			],
			[
				"sele",
				"selector"
			],
			[
				"categ",
				"categoricalVariables"
			],
			[
				"predi",
				"predictColumn"
			],
			[
				"indep",
				"independentVariables"
			],
			[
				"limite",
				"limitedVoronoiGroup"
			],
			[
				"limi",
				"limitedVoronoiCells"
			],
			[
				"group",
				"groupByVariable"
			],
			[
				"predict",
				"predicted"
			],
			[
				"pred",
				"predictColumn"
			],
			[
				"numeri",
				"numericResponseCounts"
			],
			[
				"churn",
				"churnedYesCount"
			],
			[
				"vari",
				"variableImportanceData"
			],
			[
				"percen",
				"percentageData"
			],
			[
				"value",
				"value"
			],
			[
				"uniq",
				"uniqueValues"
			],
			[
				"uni",
				"uniqueValues"
			],
			[
				"colu",
				"column"
			],
			[
				"column",
				"columnsToPlot"
			],
			[
				"stroke",
				"stroke-dasharray"
			],
			[
				"custom",
				"customersToUpdate"
			],
			[
				"prop",
				"proportion"
			],
			[
				"histo",
				"histogramScaleFactor"
			],
			[
				"histog",
				"histogramMax"
			],
			[
				"hist",
				"histogramMax"
			],
			[
				"def",
				"defaultYVariable"
			],
			[
				"defau",
				"defaultXVariable"
			],
			[
				"members",
				"membersFrame"
			],
			[
				"exemplar",
				"exemplarId"
			],
			[
				"parse",
				"parsedData"
			],
			[
				"exempl",
				"exemplarPointsVisible"
			],
			[
				"exeml",
				"exemplarData"
			],
			[
				"strok-",
				"stroke-opacity"
			],
			[
				"graph",
				"graphContainer"
			],
			[
				"y",
				"yOffset"
			],
			[
				"min",
				"minSide"
			],
			[
				"desc",
				"description"
			],
			[
				"crea",
				"createdAt"
			],
			[
				"upda",
				"updatedAt"
			],
			[
				"block",
				"blockAttributesById"
			],
			[
				"bloc",
				"blockAttributesById"
			],
			[
				"bl",
				"blockAttributesById"
			],
			[
				"grap",
				"graphContainer"
			],
			[
				"with",
				"withBlocksLinks"
			],
			[
				"read",
				"readmePath"
			],
			[
				"mouse",
				"mouseout"
			],
			[
				"sroke",
				"stroke-width"
			],
			[
				"fun",
				"function"
			],
			[
				"dep",
				"depth"
			],
			[
				"depth",
				"depthScale"
			],
			[
				"pack",
				"packChart"
			],
			[
				"select",
				"selectedNode"
			],
			[
				"app",
				"appendChild"
			],
			[
				"url",
				"url"
			],
			[
				"dataURL",
				"dataURL"
			],
			[
				"incom",
				"incomingData"
			],
			[
				"movei",
				"movieArea"
			],
			[
				"retwee",
				"retweetLine"
			],
			[
				"cons",
				"consToReview"
			],
			[
				"popData",
				"popDataS"
			],
			[
				"csv",
				"csvfile3"
			],
			[
				"cal",
				"calculatedSum"
			],
			[
				"sour",
				"sourceSum"
			],
			[
				"popul",
				"population"
			],
			[
				"const",
				"constituency"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 1659 files for \"collectParameters\" (regex, case sensitive)\n\n/Users/m/workspace/h2o-flow/src/ext/components/model-input.coffee:\n  345            return\n  346  \n  347:   collectParameters = (includeUnchangedParameters=no) ->\n  348      isGrided = no\n  349  \n  ...\n  413    performValidations = (checkForErrors, go) ->\n  414      _exception null\n  415:     parameters = collectParameters yes\n  416  \n  417      if parameters.hyper_parameters\n  ...\n  466      _exception null\n  467      performValidations yes, ->\n  468:       parameters = collectParameters no\n  469        _.insertAndExecuteCell 'cs', \"buildModel '#{_algorithm}', #{stringify parameters}\"\n  470  \n\n3 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 692,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "createControl = (kind, parameter) ->\n  _hasError = signal no\n  _hasWarning = signal no\n  _hasInfo = signal no\n  _message = signal ''\n  _hasMessage = lift _message, (message) -> if message then yes else no\n  _isVisible = signal yes\n  _isGrided = signal no\n  _isNotGrided = lift _isGrided, (value) -> not value\n\n  kind: kind\n  name: parameter.name\n  label: parameter.label\n  description: parameter.help\n  isRequired: parameter.required\n  hasError: _hasError\n  hasWarning: _hasWarning\n  hasInfo: _hasInfo\n  message: _message\n  hasMessage: _hasMessage\n  isVisible: _isVisible\n  isGridable: parameter.gridable\n  isGrided: _isGrided\n  isNotGrided: _isNotGrided\n  base_models: []\n\ncreateTextboxControl = (parameter, type) ->\n  isArrayValued = isInt = isReal = no\n\n  switch type\n    when 'byte[]', 'short[]', 'int[]', 'long[]'\n      isArrayValued = yes\n      isInt = yes\n    when 'float[]', 'double[]'\n      isArrayValued = yes\n      isReal = yes\n    when 'byte', 'short', 'int', 'long'\n      isInt = yes\n    when 'float', 'double'\n      isReal = yes\n    when 'Key<Model>[]'\n      isArrayValued = yes\n      isModelKey = yes\n\n  \n  _text = signal if isArrayValued then join (parameter.actual_value ? []), ', ' else (parameter.actual_value ? '')\n\n  _textGrided = signal _text() + ';'\n\n  textToValues = (text) ->\n    if isArrayValued\n      vals = []\n      for value in split text, /\\s*,\\s*/g\n        if isInt\n          unless isNaN parsed = parseInt value, 10\n            vals.push parsed\n        else if isReal\n          unless isNaN parsed = parseFloat value\n            vals.push parsed\n        else\n          vals.push value\n      vals\n    else\n      text\n\n  _value = lift _text, textToValues\n\n  _valueGrided = lift _textGrided, (text) ->\n    values = []\n    for part in \"#{text}\".split /\\s*;\\s*/g\n      if token = part.trim()\n        push values, textToValues token\n    values\n\n  control = createControl 'textbox', parameter\n  control.text = _text\n  control.textGrided = _textGrided\n  control.value = _value\n  control.valueGrided = _valueGrided\n  control.isArrayValued = isArrayValued\n\n  control\n\ncreateGridableValues = (values, defaultValue) ->\n  map values, (value) ->\n    label: value\n    value: signal true\n\ncreateDropdownControl = (parameter) ->\n  _value = signal parameter.actual_value\n\n  control = createControl 'dropdown', parameter\n  control.values = signals parameter.values\n  control.value = _value\n  control.gridedValues = lift control.values, (values) ->\n    createGridableValues values\n  control\n\ncreateListControl = (parameter) ->\n  MaxItemsPerPage = 100\n  _searchTerm = signal ''\n  _ignoreNATerm = signal ''\n\n  _values = signal [] \n\n  _selectionCount = signal 0\n\n  _isUpdatingSelectionCount = no\n  blockSelectionUpdates = (f) ->\n    _isUpdatingSelectionCount = yes\n    f()\n    _isUpdatingSelectionCount = no\n\n  incrementSelectionCount = (amount) ->\n    _selectionCount _selectionCount() + amount\n\n  createEntry = (value) ->\n    isSelected = signal no\n    react isSelected, (isSelected) -> \n      unless _isUpdatingSelectionCount\n        if isSelected\n          incrementSelectionCount 1\n        else\n          incrementSelectionCount -1\n      return\n\n    isSelected: isSelected\n    value: value.value\n    type: value.type\n    missingLabel: value.missingLabel\n    missingPercent: value.missingPercent\n\n  _entries = lift _values, (values) -> map values, createEntry\n  _filteredItems = signal []\n  _visibleItems = signal []\n  _hasFilteredItems = lift _filteredItems, (entries) -> entries.length > 0\n  _currentPage = signal 0\n  _maxPages = lift _filteredItems, (entries) -> Math.ceil entries.length / MaxItemsPerPage\n  _canGoToPreviousPage = lift _currentPage, (index) -> index > 0\n  _canGoToNextPage = lift _maxPages, _currentPage, (maxPages, index) -> index < maxPages - 1\n\n  _searchCaption = lift _entries, _filteredItems, _selectionCount, _currentPage, _maxPages, (entries, filteredItems, selectionCount, currentPage, maxPages) ->\n    caption = if maxPages is 0 then '' else \"Showing page #{currentPage + 1} of #{maxPages}.\"\n    if filteredItems.length isnt entries.length\n      caption += \" Filtered #{filteredItems.length} of #{entries.length}.\"\n    if selectionCount isnt 0\n      caption += \" #{selectionCount} ignored.\"\n    caption\n\n  react _entries, -> filterItems yes\n\n  _lastUsedSearchTerm = null\n  _lastUsedIgnoreNaTerm = null\n  filterItems = (force=no) ->\n    searchTerm = _searchTerm().trim()\n    ignoreNATerm = _ignoreNATerm().trim()\n\n    if force or searchTerm isnt _lastUsedSearchTerm or ignoreNATerm isnt _lastUsedIgnoreNaTerm\n      filteredItems = []\n      for entry, i in _entries()\n        missingPercent = parseFloat ignoreNATerm\n        hide = no\n        if (searchTerm isnt '') and -1 is entry.value.toLowerCase().indexOf searchTerm.toLowerCase()\n          hide = yes\n        else if (not isNaN missingPercent) and (missingPercent isnt 0) and entry.missingPercent <= missingPercent\n          hide = yes\n\n        unless hide\n          filteredItems.push entry\n\n      _lastUsedSearchTerm = searchTerm\n      _lastUsedIgnoreNaTerm = ignoreNATerm\n      _currentPage 0\n      _filteredItems filteredItems\n    \n    start = _currentPage() * MaxItemsPerPage\n    _visibleItems _filteredItems().slice start, start + MaxItemsPerPage\n\n    return\n\n  changeSelection = (source, value) ->\n    for entry in source\n      entry.isSelected value\n    return\n\n  selectFiltered = ->\n    entries = _filteredItems()\n    blockSelectionUpdates -> changeSelection entries, yes\n    _selectionCount entries.length\n\n  deselectFiltered = ->\n    blockSelectionUpdates -> changeSelection _filteredItems(), no\n    _selectionCount 0\n\n  goToPreviousPage = ->\n    if _canGoToPreviousPage()\n      _currentPage _currentPage() - 1\n      filterItems()\n    return\n  \n  goToNextPage = ->\n    if _canGoToNextPage()\n      _currentPage _currentPage() + 1\n      filterItems()\n    return\n\n  react _searchTerm, throttle filterItems, 500\n  react _ignoreNATerm, throttle filterItems, 500\n\n  control = createControl 'list', parameter\n  control.values = _values\n  control.entries = _visibleItems\n  control.hasFilteredItems = _hasFilteredItems\n  control.searchCaption = _searchCaption\n  control.searchTerm = _searchTerm\n  control.ignoreNATerm = _ignoreNATerm\n  control.value = _entries\n  control.selectFiltered = selectFiltered\n  control.deselectFiltered = deselectFiltered\n  control.goToPreviousPage = goToPreviousPage\n  control.goToNextPage = goToNextPage\n  control.canGoToPreviousPage = _canGoToPreviousPage\n  control.canGoToNextPage = _canGoToNextPage\n  control\n\ncreateCheckboxControl = (parameter) ->\n  _value = signal parameter.actual_value\n\n  control = createControl 'checkbox', parameter\n  control.clientId = do uniqueId\n  control.value = _value\n  control\n\ncreateControlFromParameter = (parameter) ->\n  switch parameter.type\n    when 'enum', 'Key<Frame>', 'VecSpecifier'\n      createDropdownControl parameter\n    when 'string[]', 'Key<Model>[]'\n      createListControl parameter\n    when 'boolean'\n      createCheckboxControl parameter\n    when 'Key<Model>', 'Key<Model>[]', 'string', 'byte', 'short', 'int', 'long', 'float', 'double', 'byte[]', 'short[]', 'int[]', 'long[]', 'float[]', 'double[]'\n      createTextboxControl parameter, parameter.type\n    else\n      console.error 'Invalid field', JSON.stringify parameter, null, 2\n      null\n\nH2O.ModelBuilderForm = (_, _algorithm, _parameters) ->\n  _exception = signal null\n  _validationFailureMessage = signal ''\n  _hasValidationFailures = lift _validationFailureMessage, isTruthy\n\n  _gridStrategies = [ 'Cartesian', 'RandomDiscrete' ]\n  _isGrided = signal false\n  _gridId = signal \"grid-#{Flow.Util.uuid()}\"\n  _gridStrategy = signal 'Cartesian'\n  _isGridRandomDiscrete = lift _gridStrategy, (strategy) -> strategy isnt _gridStrategies[0]\n  _gridMaxModels = signal 1000\n  _gridMaxRuntime = signal 28800\n  _gridStoppingRounds = signal 0\n  _gridStoppingMetrics = [ 'AUTO', 'deviance', 'logloss', 'MSE', 'AUC', 'lift_top_group', 'r2', 'misclassification' ] \n  _gridStoppingMetric = signal _gridStoppingMetrics[0]\n  _gridStoppingTolerance = signal 0.001\n\n  _parametersByLevel = groupBy _parameters, (parameter) -> parameter.level\n  _controlGroups = map [ 'critical', 'secondary', 'expert' ], (type) ->\n    controls = filter (map _parametersByLevel[type], createControlFromParameter), (a) -> if a then yes else no\n    # Show/hide grid settings if any controls are grid-ified.\n    forEach controls, (control) ->\n      react control.isGrided, ->\n        isGrided = no\n        for control in controls\n          if control.isGrided()\n            _isGrided isGrided = yes\n            break\n        unless isGrided\n          _isGrided no\n\n    controls\n\n  [ criticalControls, secondaryControls, expertControls ] = _controlGroups\n\n  _form = []\n  if criticalControls.length\n    _form.push kind: 'group', title: 'Parameters'\n    _form.push control for control in criticalControls\n\n  if secondaryControls.length\n    _form.push kind: 'group', title: 'Advanced'\n    _form.push control for control in secondaryControls\n\n  if expertControls.length\n    _form.push kind: 'group', title: 'Expert'\n    _form.push control for control in expertControls\n\n  findControl = (name) ->\n    for controls in _controlGroups\n      for control in controls when control.name is name\n        return control\n    return\n\n  parameterTemplateOf = (control) -> \"flow-#{control.kind}-model-parameter\"\n\n  findFormField = (name) -> find _form, (field) -> field.name is name\n\n  do ->\n    [ trainingFrameParameter, validationFrameParameter, responseColumnParameter, ignoredColumnsParameter, offsetColumnsParameter, weightsColumnParameter, foldColumnParameter ] = map [ 'training_frame', 'validation_frame', 'response_column', 'ignored_columns', 'offset_column', 'weights_column', 'fold_column' ], findFormField\n\n    if trainingFrameParameter\n      if responseColumnParameter or ignoredColumnsParameter\n        act trainingFrameParameter.value, (frameKey) ->\n          if frameKey\n            _.requestFrameSummaryWithoutData frameKey, (error, frame) ->\n              unless error\n                columnValues = map frame.columns, (column) -> column.label\n                columnLabels = map frame.columns, (column) -> \n                  missingPercent = 100 * column.missing_count / frame.rows\n\n                  type: if column.type is 'enum' then \"enum(#{column.domain_cardinality})\" else column.type\n                  value: column.label\n                  missingPercent: missingPercent\n                  missingLabel: if missingPercent is 0 then '' else \"#{round missingPercent}% NA\"\n\n                if responseColumnParameter\n                  responseColumnParameter.values columnValues\n\n                if ignoredColumnsParameter\n                  ignoredColumnsParameter.values columnLabels\n\n                if weightsColumnParameter\n                  weightsColumnParameter.values columnValues\n\n                if foldColumnParameter\n                  foldColumnParameter.values columnValues\n\n                if offsetColumnsParameter\n                  offsetColumnsParameter.values columnValues\n\n                if responseColumnParameter and ignoredColumnsParameter\n                  # Mark response column as 'unavailable' in ignored column list.\n                  lift responseColumnParameter.value, (responseVariableName) ->\n                    # FIXME\n                    # ignoredColumnsParameter.unavailableValues [ responseVariableName ]\n\n          return\n\n  collectParameters = (includeUnchangedParameters=no) ->\n    isGrided = no\n\n    parameters = {}\n    hyperParameters = {}\n    for controls in _controlGroups\n      for control in controls\n        if control.isGrided()\n          isGrided = yes\n          switch control.kind\n            when 'textbox'\n              hyperParameters[control.name] = control.valueGrided()\n            when 'dropdown'\n              hyperParameters[control.name] = selectedValues = []\n              for item in control.gridedValues()\n                if item.value()\n                  selectedValues.push item.label\n            else # checkbox\n              hyperParameters[control.name] = [ true, false ]\n        else\n          value = control.value()\n          if control.isVisible() and (includeUnchangedParameters or control.isRequired or (control.defaultValue isnt value))\n            switch control.kind\n              when 'dropdown'\n                if value\n                  parameters[control.name] = value\n              when 'list'\n                if value.length\n                  selectedValues = for entry in value when entry.isSelected()\n                    entry.value\n                  parameters[control.name] = selectedValues\n              else\n                parameters[control.name] = value\n    if isGrided\n      parameters.grid_id = _gridId()\n      parameters.hyper_parameters = hyperParameters\n\n      # { 'strategy': \"RandomDiscrete/Cartesian\", 'max_models': 3, 'max_runtime_secs': 20 }\n\n      searchCriteria =\n        strategy: _gridStrategy()\n      switch searchCriteria.strategy\n        when 'RandomDiscrete'\n          unless isNaN maxModels = parseInt _gridMaxModels(), 10\n            searchCriteria.max_models = maxModels\n          unless isNaN maxRuntime = parseInt _gridMaxRuntime(), 10\n            searchCriteria.max_runtime_secs = maxRuntime\n          unless isNaN gridStoppingRounds = parseInt _gridStoppingRounds(), 10\n            searchCriteria.stopping_rounds = gridStoppingRounds\n          unless isNaN stoppingTolerance = parseFloat _gridStoppingTolerance()\n            searchCriteria.stopping_tolerance = stoppingTolerance\n          searchCriteria.stopping_metric = _gridStoppingMetric()\n      parameters.search_criteria = searchCriteria\n\n    parameters\n\n  #\n  # The 'checkForErrors' parameter exists so that we can conditionally choose \n  # to ignore validation errors. This is because we need the show/hide states \n  # for each field the first time around, but not the errors/warnings/info \n  # messages. \n  #\n  # Thus, when this function is called during form init, checkForErrors is \n  #  passed in as 'false', and during form submission, checkForErrors is \n  #  passsed in as 'true'.\n  #\n  performValidations = (checkForErrors, go) ->\n    _exception null\n    parameters = collectParameters yes\n\n    if parameters.hyper_parameters\n      return go() # parameter validation fails with hyper_parameters, so skip.\n\n    _validationFailureMessage ''\n\n    _.requestModelInputValidation _algorithm, parameters, (error, modelBuilder) ->\n      if error\n        _exception Flow.Failure _, new Flow.Error 'Error fetching initial model builder state', error\n      else\n        hasErrors = no\n\n        if modelBuilder.messages.length\n          validationsByControlName = groupBy modelBuilder.messages, (validation) -> validation.field_name\n\n          for controls in _controlGroups\n            for control in controls\n              if validations = validationsByControlName[control.name]\n                for validation in validations\n                  if validation.message_type is 'TRACE'\n                    control.isVisible no\n                  else\n                    control.isVisible yes\n                    if checkForErrors\n                      switch validation.message_type\n                        when 'INFO'\n                          control.hasInfo yes\n                          control.message validation.message\n                        when 'WARN'\n                          control.hasWarning yes\n                          control.message validation.message\n                        when 'ERRR'\n                          control.hasError yes\n                          control.message validation.message\n                          hasErrors = yes\n              else\n                control.isVisible yes\n                control.hasInfo no\n                control.hasWarning no\n                control.hasError no\n                control.message ''\n\n        if hasErrors\n          _validationFailureMessage 'Your model parameters have one or more errors. Please fix them and try again.'\n          # Do not pass go(). Do not collect $200.\n        else\n          _validationFailureMessage ''\n          go() # Proceed with form submission\n\n  createModel = ->\n    _exception null\n    performValidations yes, ->\n      parameters = collectParameters no\n      _.insertAndExecuteCell 'cs', \"buildModel '#{_algorithm}', #{stringify parameters}\"\n\n  _revalidate = (value) ->\n    if value isnt undefined # HACK: KO seems to be raising change notifications when dropdown boxes are initialized. \n      performValidations no, ->\n\n  revalidate = throttle _revalidate, 100, leading: no\n\n  # Kick off validations (minus error checking) to get hidden parameters\n  performValidations no, ->\n    for controls in _controlGroups\n      for control in controls\n        react control.value, revalidate\n    return\n\n  form: _form\n  isGrided: _isGrided\n  gridId: _gridId\n  gridStrategy: _gridStrategy\n  gridStrategies: _gridStrategies\n  isGridRandomDiscrete: _isGridRandomDiscrete\n  gridMaxModels: _gridMaxModels\n  gridMaxRuntime: _gridMaxRuntime\n  gridStoppingRounds: _gridStoppingRounds\n  gridStoppingMetrics: _gridStoppingMetrics\n  gridStoppingMetric: _gridStoppingMetric\n  gridStoppingTolerance: _gridStoppingTolerance\n  exception: _exception\n  parameterTemplateOf: parameterTemplateOf\n  createModel: createModel\n  hasValidationFailures: _hasValidationFailures\n  validationFailureMessage: _validationFailureMessage\n\nH2O.ModelInput = (_, _go, _algo, _opts) ->\n  _exception = signal null\n  _algorithms = signal []\n  _algorithm = signal null\n  _canCreateModel = lift _algorithm, (algorithm) -> if algorithm then yes else no\n\n  _modelForm = signal null\n\n  populateFramesAndColumns = (frameKey, algorithm, parameters, go) ->\n\n    destinationKeyParameter = find parameters, (parameter) -> parameter.name is 'model_id'\n\n    if destinationKeyParameter and not destinationKeyParameter.actual_value\n      destinationKeyParameter.actual_value = \"#{algorithm}-#{Flow.Util.uuid()}\"\n\n    #\n    # Force classification.\n    #\n    classificationParameter = find parameters, (parameter) -> parameter.name is 'do_classification'\n\n    if classificationParameter\n      classificationParameter.actual_value = yes\n\n    _.requestFrames (error, frames) ->\n      if error\n        #TODO handle properly\n      else\n        frameKeys = (frame.frame_id.name for frame in frames)\n        frameParameters = filter parameters, (parameter) -> parameter.type is 'Key<Frame>'\n        for parameter in frameParameters\n          parameter.values = frameKeys\n\n          #TODO HACK\n          if parameter.name is 'training_frame'\n            if frameKey\n              parameter.actual_value = frameKey\n            else\n              frameKey = parameter.actual_value\n\n        return go()\n\n  do ->\n    _.requestModelBuilders (error, modelBuilders) ->\n      _algorithms modelBuilders\n      _algorithm if _algo then (find modelBuilders, (builder) -> builder.algo is _algo) else undefined\n      frameKey = _opts?.training_frame\n      act _algorithm, (builder) ->\n        if builder\n          algorithm = builder.algo\n          parameters = deepClone builder.parameters\n          populateFramesAndColumns frameKey, algorithm, parameters, ->\n            _modelForm H2O.ModelBuilderForm _, algorithm, parameters\n        else\n          _modelForm null\n\n  createModel = -> _modelForm().createModel()\n\n  defer _go\n\n  parentException: _exception #XXX hacky\n  algorithms: _algorithms\n  algorithm: _algorithm\n  modelForm: _modelForm\n  canCreateModel: _canCreateModel\n  createModel: createModel\n  template: 'flow-model-input'\n\n",
			"file": "src/ext/components/model-input.coffee",
			"file_size": 19624,
			"file_write_time": 131250150640000000,
			"settings":
			{
				"buffer_size": 19624,
				"line_ending": "Unix"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 72,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bower.json",
			"settings":
			{
				"buffer_size": 1194,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ext/components/model-output.coffee",
			"settings":
			{
				"buffer_size": 32684,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ext/modules/proxy.coffee",
			"settings":
			{
				"buffer_size": 23225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ext/modules/routines.coffee",
			"settings":
			{
				"buffer_size": 62460,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"updr",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 249.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/m/workspace/h2o-flow"
	],
	"file_history":
	[
		"/Users/m/workspace/h2o-flow/package.json",
		"/Users/m/workspace/h2o-3/h2o-py/tests/testdir_algos/gbm/pyunit_gbm_random_grid.py",
		"/Users/m/workspace/0xdata.com/careers/index.md",
		"/Users/m/workspace/0xdata.com/careers/ui-engineers.md",
		"/Users/m/workspace/vr-renaissance/02/.block",
		"/Users/m/workspace/vr-renaissance/01/.block",
		"/Users/m/workspace/vr-renaissance/01/.gitignore",
		"/Users/m/workspace/vr-renaissance/01/README.md",
		"/Users/m/workspace/vr-renaissance/02/README.md",
		"/Users/m/workspace/vr-renaissance/02/index.html",
		"/Users/m/workspace/vr-renaissance/02/annotations.json",
		"/Users/m/workspace/vr-renaissance/01/d3-jetpack.js",
		"/Users/m/workspace/vr-renaissance/02/d3-jetpack.js",
		"/Users/m/workspace/vr-renaissance/01/swoopy-drag.js",
		"/Users/m/workspace/vr-renaissance/02/swoopy-drag.js",
		"/Users/m/workspace/vr-renaissance/01/index.html",
		"/Users/m/workspace/vr-renaissance/.gitignore",
		"/Users/m/workspace/vr-renaissance/01/data.csv",
		"/Users/m/workspace/sankey-experiments/patients/06/d3.sankey.js",
		"/Users/m/workspace/sankey-experiments/patients/05/d3.sankey.js",
		"/Users/m/workspace/sankey-experiments/.gitignore",
		"/Users/m/workspace/visualizations/sankey-experiments/patients/05/d3.sankey.js",
		"/Users/m/workspace/h2o-flow/src/ext/modules/routines.coffee",
		"/Users/m/workspace/h2o-flow/src/ext/modules/proxy.coffee",
		"/Users/m/workspace/h2o-flow/src/ext/components/job-output.coffee",
		"/Users/m/workspace/h2o-flow/src/ext/components/model-deviances-vis-output.jade",
		"/Users/m/workspace/h2o-flow/src/ext/components/partial-dependence-input.jade",
		"/Users/m/workspace/h2o-flow/src/ext/components/partial-dependence-input.coffee",
		"/Users/m/workspace/roomscale-scatter/README.md",
		"/Users/m/workspace/roomscale-scatter/physics/01/README.md",
		"/Users/m/workspace/roomscale-scatter/physics/01/readme.md",
		"/Users/m/.zshrc",
		"/Users/m/workspace/roomscale-scatter/04/README.md",
		"/Users/m/workspace/roomscale-scatter/04/readme.md",
		"/Users/m/workspace/roomscale-scatter/04/aframe-scatter-component.js",
		"/Users/m/workspace/roomscale-scatter/04/index.html",
		"/Users/m/workspace/roomscale-scatter/04/.block",
		"/Users/m/workspace/roomscale-scatter/03/index.html",
		"/Users/m/workspace/roomscale-scatter/03/readme.md",
		"/Users/m/workspace/roomscale-scatter/02/index.html",
		"/Users/m/workspace/roomscale-scatter/02/readme.md",
		"/Users/m/workspace/roomscale-scatter/01/index.html",
		"/Users/m/workspace/blocks/1408d5353c97e4e1275f15dc85e1de98/README.md",
		"/Users/m/workspace/blocks/1408d5353c97e4e1275f15dc85e1de98/d3-voronoi-scatterplot.js",
		"/Users/m/workspace/blocks/1408d5353c97e4e1275f15dc85e1de98/worldbank.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/drawVoronoiScatterplot.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/showTooltip.js",
		"/Users/m/workspace/blocks/308bb284b1e803554fb4696b1392e6e0/showTooltip.js",
		"/Users/m/workspace/blocks/308bb284b1e803554fb4696b1392e6e0/README.md",
		"/Users/m/workspace/blocks/308bb284b1e803554fb4696b1392e6e0/removeTooltip.js",
		"/Users/m/workspace/tensorflow/tensorflow/python/framework/graph_util.py",
		"/Users/m/workspace/VIP-feed-information-project/.gitignore",
		"/Users/m/workspace/VIP-feed-information-project/datafeed.json",
		"/Users/m/workspace/VIP-feed-information-project/latest.json",
		"/Users/m/workspace/VIP-feed-information-project/latest.txt",
		"/Users/m/workspace/VIP-feed-information-project/datafeed.txt",
		"/Users/m/workspace/VIP-feed-information-project/regexes.md",
		"/Users/m/workspace/VIP-feed-information-project/links.md",
		"/Users/m/workspace/aggregator-zoom/src/drawMemberCircles.js",
		"/Users/m/workspace/aggregator-zoom/src/getMembersData.js",
		"/Users/m/workspace/aggregator-zoom/src/parseResponseObject.js",
		"/Users/m/workspace/aggregator-zoom/src/getFrameData.js",
		"/Users/m/workspace/aggregator-zoom/src/scatter.js",
		"/Users/m/workspace/aggregator-zoom/src/plotExemplars.js",
		"/Users/m/workspace/aggregator-zoom/src/parseResponse.js",
		"/Users/m/workspace/aggregator-zoom/.eslintrc",
		"/Users/m/workspace/aggregator-zoom/src/getFrame.js",
		"/Users/m/workspace/aggregator-zoom/README.md",
		"/Users/m/workspace/aggregator-zoom/package.json",
		"/Users/m/workspace/visualizations/.gitignore",
		"/Users/m/workspace/houston-meetup-graph/modeling-worked-example/lib/download_groups.py",
		"/Users/m/workspace/houston-meetup-graph/modeling-worked-example/lib/download_members_for_group.py",
		"/Users/m/workspace/houston-meetup-graph/modeling-worked-example/lib/download_members.py",
		"/Users/m/workspace/houston-meetup-graph/modeling-worked-example/download.sh",
		"/Users/m/workspace/houston-meetup-graph/modeling-worked-example/lib/download_events.py",
		"/Users/m/workspace/houston-meetup-graph/modeling-worked-example/.zshrc",
		"/Users/m/workspace/d3-voronoi-scatterplot/package.json",
		"/Users/m/workspace/d3-voronoi-scatterplot/README.md",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/removeTooltip.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/rollup.config.js",
		"/Users/m/workspace/experiments/tooltips/02/index.html",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/tooltip.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/drawVoronoiOverlay.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/node_modules/d3-voronoi/.eslintrc",
		"/Users/m/workspace/d3-voronoi-scatterplot/node_modules/d3-voronoi/package.json",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/zzShowTooltip.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/node_modules/d3-voronoi/build/d3-voronoi.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/node_modules/d3-voronoi/build/d3-voronoi.min.js",
		"/Users/m/workspace/d3-voronoi-scatterplot/src/d3-tip-custom.js",
		"/Users/m/workspace/residuals-vis/src/d3-voronoi-scatterplot.js",
		"/Users/m/workspace/residuals-vis/src/index.js",
		"/Users/m/workspace/residuals-vis/src/components/IndependentVariableScatterplot.js",
		"/Users/m/workspace/residuals-vis/src/drawVisFromData.js",
		"/Users/m/workspace/visualizations/residuals/data/santander-customer-satisfaction/output/dl-variable-importances.tsv",
		"/Users/m/Downloads/235cc97a1dca.csv",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/dropdown.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/config/rossmanAggregated.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/drawExplodingBoxplot.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/parseData.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/data/rossman-store-sales/dl-residuals-aggregated-0-075.csv",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/getGlobalExtents.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/tooltip.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/scatterplot.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/setModelTransition.js",
		"/Users/m/workspace/visualizations/residuals/vis/tasks.md",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/drawVoronoiOverlay.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/distance-limited-voronoi.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/d3-tip-custom.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/d3-exploding-boxplot.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/d3-tip.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/drawResidualsVis.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/config/rossman.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/transitionExplodingBoxplot.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/updateMarksStyles.js",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/App.js",
		"/Users/m/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/m/workspace/visualizations/residuals/vis/06/src/explodingBoxplot.js",
		"/Users/m/workspace/exploding-boxplot-example-project/d3-tip.js",
		"/Users/m/workspace/exploding-boxplot-example-project/02/iris.csv",
		"/Users/m/workspace/exploding-boxplot-example-project/01/explodingBoxplot.js",
		"/Users/m/workspace/exploding-boxplot-example-project/atpWta.json",
		"/Users/m/workspace/exploding-boxplot-example-project/explodingBoxplot.js",
		"/Users/m/workspace/exploding-boxplot-example-project/pDxbp.js",
		"/Users/m/workspace/exploding-boxplot-example-project/README.md",
		"/Users/m/workspace/exploding-boxplot-example-project/01/index.html",
		"/Users/m/workspace/exploding-boxplot-example-project/index.html",
		"/Users/m/workspace/d3_exploding_boxplot/d3-tip.js",
		"/Users/m/workspace/d3_exploding_boxplot/package.json"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 181.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"collectParameters",
			"collectPara",
			"requestModelInputValidation",
			"requestModelInputVa",
			"createTextboxControl",
			"createTextBox",
			"string\\[\\]",
			"string[]",
			"requestModelInputValidation",
			"modelBuilders",
			"parameters",
			"modelBuilders",
			"model",
			"createControlFromParameter",
			"\"",
			"M",
			"requestPartial",
			"buildPartialDependence",
			"buildPartial",
			"build",
			"H2O.ModelDeviancesVisInput",
			"isChecked",
			"buildP",
			"ModelDevi",
			"checkAllModels",
			"model",
			"buildPart",
			"PartialDependence",
			"partialDependence",
			"scale",
			"(),",
			"entity",
			"red",
			"title",
			"gridMaker",
			"dynamic",
			"physic",
			"popoverTooltip",
			"circle",
			"chordWrapper",
			"showTooltip",
			"countries",
			"data",
			"site",
			"wrapper",
			"PIMA",
			"nid",
			"nid:",
			"nid",
			"datafeed\\.txt",
			"\"user:\"",
			"((.*?)\"division_id\":(.*?))$",
			"((.*?)\"vip_version\":(.*?))$",
			"((.*?)\"is_ocd_id_early_vote\":(.*?))$",
			"((.*?)\"vip_version\":(.*?))$",
			"((.*?)\"is_test_election\":(.*?))$",
			"((.*?)\"feed_url\":(.*?))$",
			"((.*?)\"title\":(.*?))$",
			"((.*?)\"election_id\":(.*?))$",
			"((.*?)\"nid\":(.*?))$",
			"\"feed_url:\"",
			"\"title:\"",
			"\"election_id:\"",
			"\"nid:\"",
			"((.*?)\"nid\":(.*?))$",
			"is_ocd_id_early_vote",
			"vip_version",
			"division_id",
			"user:",
			"is_test_election:",
			"feed_url:",
			"title:",
			"election_id:",
			"nid:",
			"}",
			"data\\s",
			"^\\n",
			"^#.*",
			"^\\n",
			"getFrameData",
			"training_frame",
			"frameID",
			"currentModel",
			"modelIDs",
			"orange",
			"opacity",
			"tip",
			"parseResponse",
			"getRowsRequestURL",
			"getRowsFrameOptions",
			"baseUrl",
			"getMemberFrameActualRowCount",
			"fetchOptions",
			"getMemberFrameRowCount",
			"getMemberFrameDefaultRowCount",
			"getMemberFrameActualRowCountUrl",
			"getFrameMetricsUrl",
			"getMemberFrameDefaultRowCountUrl",
			"const aggregatorModelID",
			"membersFrameID",
			"csv-url",
			"drawVoro",
			"tooltipVariables",
			"popover1",
			"showTooltip",
			"popover",
			"find",
			"voronoi",
			"find",
			"voronoi",
			"find",
			"height",
			"removeTooltip",
			"hide",
			"height",
			"tip",
			"find",
			"scale",
			"getSVGNode",
			"id",
			"Card",
			"card",
			"Card",
			"plotWidth",
			"\\s(?=\\D)",
			"\\s+(?=\\d)",
			"\\s+",
			"legend"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'",
			"box",
			"teal",
			"\"user\":",
			"\\1,",
			"\"feed_url\":",
			"\"title\":",
			"\"election_id\":",
			"\"nid\":",
			"\\1,",
			"\"is_ocd_id_early_vote\"",
			"\"vip_version\"",
			"\"division_id\"",
			"\"user:\"",
			"\"is_test_election:\"",
			"\"feed_url:\"",
			"\"title:\"",
			"\"election_id:\"",
			"\"nid:\"",
			"},",
			"",
			"parseResponseObject",
			"getFrameMetricsURL",
			"getFrameMetricsOptions",
			"baseURL",
			"getFrameData",
			"getFrameRowCount",
			"getFrame",
			"getFrameURL",
			"getFrameMetricsURL",
			"getFrameMetricsUrl",
			"frameID",
			"popoverTooltip",
			"",
			"\\t",
			"d3",
			"colorIndex",
			"dependent",
			"tooltipColumns",
			"categoricalColumns",
			"numericColumns",
			"dropdown",
			"'",
			"data",
			"zScale",
			"yScale",
			"xScale",
			"rotatePT",
			"translatePT",
			"pointR",
			"pointT",
			"squareLength",
			"deltaY",
			"deltaX",
			"mousePanX",
			"mousePanY",
			"mouseRotX",
			"mouseRotY",
			"prevMouseX",
			"prevMouseY",
			"prevScale",
			"panMode",
			"const ",
			"'",
			"color",
			"'",
			"const",
			"'",
			"dist",
			"parsedData",
			"points",
			"vis.exemplarData",
			"let ",
			"'",
			"edgeData",
			"nodeData",
			"let ",
			"'",
			"viz",
			"\":",
			"\"",
			"target",
			"source",
			"nodeHash",
			"metro",
			".metro",
			"",
			"voteData",
			"Ynys Mon",
			"",
			"metroPopulation",
			"\\t",
			"value",
			"label",
			"count",
			"frequency",
			"letter",
			"width",
			"\\\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 692,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										178,
										195
									],
									[
										377,
										394
									],
									[
										546,
										563
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/ext/components/model-input.coffee",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19624,
						"regions":
						{
						},
						"selection":
						[
							[
								11729,
								11729
							]
						],
						"settings":
						{
							"syntax": "Packages/Better CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7728.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72,
						"regions":
						{
						},
						"selection":
						[
							[
								72,
								72
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "bower.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1194,
						"regions":
						{
						},
						"selection":
						[
							[
								44,
								38
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/ext/components/model-output.coffee",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32684,
						"regions":
						{
						},
						"selection":
						[
							[
								934,
								934
							]
						],
						"settings":
						{
							"syntax": "Packages/Better CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/ext/modules/proxy.coffee",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23225,
						"regions":
						{
						},
						"selection":
						[
							[
								21318,
								21337
							]
						],
						"settings":
						{
							"syntax": "Packages/Better CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 26.0,
						"translation.y": 13202.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/ext/modules/routines.coffee",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 62460,
						"regions":
						{
						},
						"selection":
						[
							[
								21902,
								21905
							]
						],
						"settings":
						{
							"syntax": "Packages/Better CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16146.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "ensembles-project.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"proxy",
				"src/ext/modules/proxy.coffee"
			],
			[
				"routine",
				"src/ext/modules/routines.coffee"
			],
			[
				"prox",
				"src/ext/modules/proxy.coffee"
			],
			[
				"syn",
				"syntax.md"
			],
			[
				"jobs",
				"src/ext/components/jobs-output.coffee"
			],
			[
				"routi",
				"src/ext/modules/routines.coffee"
			],
			[
				"job",
				"src/ext/components/job-output.coffee"
			],
			[
				"parti",
				"src/ext/components/partial-dependence-input.jade"
			],
			[
				"partia",
				"src/ext/components/partial-dependence-input.coffee"
			],
			[
				"job-",
				"src/ext/components/job-output.coffee"
			],
			[
				"routin",
				"src/ext/modules/routines.coffee"
			],
			[
				"h2o.jad",
				"src/ext/components/h2o.jade"
			],
			[
				"note",
				"src/core/components/notebook.coffee"
			],
			[
				"grad",
				"gradle.properties"
			],
			[
				"aggre",
				"src/aggregateFrame.js"
			],
			[
				"draw",
				"src/drawMemberCircles.js"
			],
			[
				"plotexa",
				"src/plotExemplars.js"
			],
			[
				"parse",
				"src/parseResponseObject.js"
			],
			[
				"plot",
				"src/plotExemplars.js"
			],
			[
				"scatter",
				"src/scatter.js"
			],
			[
				"parsere",
				"src/parseResponseObject.js"
			],
			[
				"getmem",
				"src/getMembersData.js"
			],
			[
				"dra",
				"src/drawMemberCircles.js"
			],
			[
				"getme",
				"src/getMembersData.js"
			],
			[
				"remo",
				"src/removeTooltip.js"
			],
			[
				"draws",
				"src/drawVoronoiScatterplot.js"
			],
			[
				"show",
				"src/showTooltip.js"
			],
			[
				"remov",
				"src/removeTooltip.js"
			],
			[
				"rol",
				"rollup.config.js"
			],
			[
				"acka",
				"package.json"
			],
			[
				"pack",
				"package.json"
			],
			[
				"remove",
				"src/removeTooltip.js"
			],
			[
				"showto",
				"src/showTooltip.js"
			],
			[
				"indep",
				"src/components/IndependentVariableScatterplot.js"
			],
			[
				"drop",
				"src/dropdown.js"
			],
			[
				"upda",
				"src/updateMarksStyles.js"
			],
			[
				"setmod",
				"src/setModelTransition.js"
			],
			[
				"ross",
				"src/config/rossman.js"
			],
			[
				"get",
				"src/getGlobalExtents.js"
			],
			[
				"drawex",
				"src/drawExplodingBoxplot.js"
			],
			[
				"distan",
				"src/distance-limited-voronoi.js"
			],
			[
				"d3-t",
				"src/d3-tip-custom.js"
			],
			[
				"tool",
				"src/tooltip.js"
			],
			[
				"scatt",
				"src/scatterplot.js"
			],
			[
				"d3",
				"src/d3-exploding-boxplot.js"
			],
			[
				"tran",
				"src/setModelTransition.js"
			],
			[
				"d3-tip-cu",
				"src/d3-tip-custom.js"
			],
			[
				"sca",
				"src/scatterplot.js"
			],
			[
				"d3t",
				"src/d3-tip.js"
			],
			[
				"dl-residuals-",
				"src/data/rossman-store-sales/dl-residuals-aggregated-0-075.csv"
			],
			[
				"rossman",
				"src/config/rossmanAggregated.js"
			],
			[
				"d3-tip",
				"src/d3-tip.js"
			],
			[
				"too",
				"src/tooltip.js"
			],
			[
				"trans",
				"src/setModelTransition.js"
			],
			[
				"drawres",
				"src/drawResidualsVis.js"
			],
			[
				"scat",
				"src/scatterplot.js"
			],
			[
				"set",
				"src/setModelTransition.js"
			],
			[
				"app",
				"src/App.js"
			],
			[
				"tip",
				"d3-tip.js"
			],
			[
				"voro",
				"06/src/drawVoronoiOverlay.js"
			],
			[
				"title",
				"06/src/drawTitle.js"
			],
			[
				"setm",
				"06/src/setModelTransition.js"
			],
			[
				"ind",
				"01/index.html"
			],
			[
				"tasks",
				"tasks.md"
			],
			[
				"drawtit",
				"06/src/drawTitle.js"
			],
			[
				"task",
				"tasks.md"
			],
			[
				"es",
				".eslintrc"
			],
			[
				"parseresp",
				"src/parseResponse.js"
			],
			[
				"zoom",
				"src/zoom.js"
			],
			[
				"8b6c3d9694a96177bf8d",
				"data/gists/8b6c3d9694a96177bf8d/index.html"
			],
			[
				"fig_09_10",
				"09/Fig_09_10.html"
			],
			[
				"03-das",
				"my-iterations/09-interactive-apps/03-dashboard.html"
			],
			[
				"fig_09_07",
				"09/Fig_09_07.html"
			],
			[
				"02-das",
				"my-iterations/09-interactive-apps/02-dashboard.html"
			],
			[
				"05-ta",
				"my-iterations/08-dom-manipulation/05-table.html"
			],
			[
				"fig_09",
				"09/Fig_09_04.html"
			],
			[
				"tweets.json",
				"tweets.json"
			],
			[
				"fig_09_0",
				"09/Fig_09_02.html"
			],
			[
				"fig_08_11",
				"08/Fig_08_11.html"
			],
			[
				"fig_08_10",
				"08/Fig_08_10.html"
			],
			[
				"08-gallery",
				"my-iterations/08-dom-manipulation/08-gallery.html"
			],
			[
				"fig_08_09",
				"08/Fig_08_09.html"
			],
			[
				"07-ga",
				"my-iterations/08-dom-manipulation/07-gallery.html"
			],
			[
				"fig_08_08",
				"08/Fig_08_08.html"
			],
			[
				"fig_08_06",
				"08/Fig_08_06.html"
			],
			[
				"tweets",
				"tweets.json"
			],
			[
				"fig_08",
				"08/Fig_08_05.html"
			],
			[
				"fig_08_04",
				"08/Fig_08_04.html"
			],
			[
				"02-ta",
				"my-iterations/08-dom-manipulation/02-table.html"
			],
			[
				"fig_08_03",
				"08/Fig_08_03.html"
			],
			[
				"",
				"forum.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 318.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
