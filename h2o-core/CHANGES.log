
Major style & code changes from "h2o":

- Drop the "java" directory layer.
  src/main/jsr166y    - D.L. F/J.  Appears in 1.7?
      main/water      - Core K/V & F/J & M/R code
           water/init - Cluster & network init; weaver
           water/nbhm - Nonblocking HashMap; Unsafe util
           water/persist - Persist layer; NFS, HFDS, S3 access
           water/util - Utilities
      test/water      - Mirror directory to main with tests

- Use Maven to fetch external jar files.
- "One Jar" is done by unpacking/repacking all jars, making a single large jar
  that does not need any unpack step.  Downside: class-file collisions are
  silently ignored (Jar Hell), with the last to unpack winning.  H2O classes
  always win, but e.g. conflicting emebedded versions of log4j will end with
  the last log4j class unpacked.
- Move much init code into "water/init", including all network init from H2O.java
- Trim the API.  Make All Things Private by default
- Switch to 1.7 javac by default
- Do not hook stdout & stderr
- Remove all the Embedded support; emeddable-by-default now
- Weaver uses Delegation instead of a Class Loader.  Serialization bases need
  boilerplate, and there's several more v-calls to the start of any
  serialization.  Theory says: only static calls to recursively serialize any
  object.
  


DETAIL CHANGES

- public ==> private 
- throw Log.err("msg",ex)  ==>  Log.throwErr(ex)
- MRTask2 ==> MRTask
- H2O.D() moved to Key.D()
- H2O.Cleaner moved to Cleaner.java
