doctype
html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    title H2O Flow
    meta(name='description', content='H2O REPL')
    link(rel='stylesheet', href='css/font-awesome.css', type='text/css')
    link(rel='stylesheet', href='css/bootstrap.css', type='text/css')
    link(rel='stylesheet', href='css/flow.css', type='text/css')
    link(rel='stylesheet', href='//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.2/styles/tomorrow.min.css', type='text/css')
    link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Lato:300,400,700,300italic,400italic,700italic|Source+Code+Pro:400,600', type='text/css')

    //- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries
    //- WARNING: Respond.js doesn't work if you view the page via file://
    <!--[if lt IE 9]>
    script(src='https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js')
    script(src='https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js')
    <![endif]-->
  body
    <!--[if lt IE 9]>
    p.browsehappy
      | You are using an <strong>outdated</strong> browser.
      | Please <a href="http://browsehappy.com/">upgrade your browser</a>
      | to improve your experience.
    <![endif]-->
    
    //- Recursively include other .jade files
    //- include repl

    // ko with:view
    .container
      .f-header
        img.f-logo(src="img/flow.png")
      .f-repl(data-bind='template:{ name:templateOf, foreach:cells }')
    // /ko
    
    script(type="text/html" id="flow-h1")
      .f-html-output
        h1(data-bind="text:text")

    script(type="text/html" id="flow-h2")
      .f-html-output
        h2(data-bind="text:text")

    script(type="text/html" id="flow-h3")
      .f-html-output
        h3(data-bind="text:text")

    script(type="text/html" id="flow-h4")
      .f-html-output
        h4(data-bind="text:text")

    script(type="text/html" id="flow-h5")
      .f-html-output
        h5(data-bind="text:text")

    script(type="text/html" id="flow-h6")
      .f-html-output
        h6(data-bind="text:text")

    script(type="text/html" id="flow-html")
      .f-html-output(data-bind="html:html")

    script(type="text/html" id="flow-raw")
      .f-raw-output
        pre(data-bind="text:text")

    script(type="text/html" id="flow-json")
      .f-json-output(data-bind="html:html")

    script(type="text/html" id="flow-dom")
      .f-dom-output(data-bind="dom:output")

    script(type="text/html" id="flow-help")

    script(type="text/html" id="flow-parse-raw-input")
      .f-widget
        h3 
          i.fa.fa-cog.f-icon
          | Setup Parse

        h4 Source Keys
        .f-well
          // ko foreach:sourceKeys
          div
            i.fa.fa-key.f-icon
            span(data-bind='text:$data')
          // /ko

        h4 Parse Configuration
        table.f-table-horizontal.f-table-padded
          tbody
            tr
              td.f-narrow Destination Key
              td.f-wide
                input.f-textbox(type='text' data-bind="value:destinationKey")
            tr
              td.f-narrow Parser
              td.f-wide
                select(data-bind="options:parserTypes, optionsText:'caption', value:parserType")
            tr
              td.f-narrow Separator
              td.f-wide
                select(data-bind="options:delimiters, optionsText:'caption', value:delimiter")
            tr
              td.f-narrow Column Headers
              td.f-wide
                div
                  label
                    input(type='radio' name='hasHeader' value='auto' data-bind='checked:headerOption')
                    span Auto
                div
                  label
                    input(type='radio' name='hasHeader' value='header' data-bind='checked:headerOption')
                    span First row contains column names
                div
                  label
                    input(type='radio' name='hasHeader' value='data' data-bind='checked:headerOption')
                    span First row contains data
            tr
              td.f-narrow Options
              td.f-wide
                div
                  label
                    input(type='checkbox' data-bind='checked:useSingleQuotes')
                    span Enable single quotes as a field quotation character
                div
                  label
                    input(type='checkbox' data-bind='checked:deleteOnDone')
                    span Delete on done

        // ko if:hasColumns
        h4 Data Preview
        div(style='max-height:400px;overflow:auto')
          table.f-monospace
            thead
              tr
                // ko foreach:columns
                th
                  input(type='textbox' data-bind="value:name, attr:{'title':name}")
                // /ko

            tbody
              // ko foreach:rows
              tr
                // ko foreach:$data
                td(data-bind="text:$data")
                // /ko
              // /ko
        // /ko
        .f-commands
          button.f-button(type='button' data-bind='click:parseFiles')
            i.fa.fa-indent.f-icon
            | Parse

    script(type="text/html" id="flow-import-file-output")
      div.f-well
        // ko foreach:keys
        div
          i.fa.fa-key.f-icon
          span(data-bind='text:$data')
        // /ko

    script(type="text/html" id="flow-parse-output")
      .f-widget
        h3
          i.fa.fa-indent.f-icon
          | Parse Job Created

        table.f-table-horizontal
          tbody
            tr
              td.f-narrow Job Key
              td.f-wide
                a(href='#' data-bind='text:result.job.name, click:inspectJob')

        .f-commands
          button.f-button(type='button' data-bind='click:inspectJob')
            i.fa.fa-indent.f-icon
            | View Job

    script(type="text/html" id="flow-import-files-output")
      .f-widget
        h3
          i.fa.fa-cloud-upload.f-icon
          span(data-bind='text:title')
        div(data-bind="template: { name:templateOf, foreach:importViews }")
        // ko if:canParse
        .f-commands
          button.f-button(type='button' data-bind="click:parse")
            i.fa.fa-cog.f-icon
            | Parse these files&hellip;
        // /ko

    script(type="text/html" id="flow-import-files")
      .f-widget
        h3
          i.fa.fa-life-ring.f-icon
          | Import Files
        table
          tbody
            tr
              td.f-narrow Search:
              td
                input.f-textbox(type='text' style='width:600px' data-bind="value:specifiedPath, valueUpdate:'keydown', enterKey:tryImportFiles, typeahead:listPathHints" placeholder='File or directory path')
              td.f-narrow
                button.f-button(type='button' data-bind="click:tryImportFiles")
                  i.fa.fa-search
        
        // ko if:hasImportedFiles
        div.f-well
          span(data-bind='text:importedFileCount')
          // ko if:hasUnselectedFiles
          button.f-button(data-bind='click:selectAllFiles')
            i.fa.fa-files-o.f-icon
            | Add these files
          // /ko
          // ko foreach:importedFiles
          // ko ifnot:isSelected
          div.f-pointer(data-bind='click:select')
            i.fa.fa-plus.f-icon(title='Select file')
            span(data-bind="text:path")
          // /ko
          // /ko
        // /ko

        div.f-well
          div
            span(data-bind='text:selectedFileCount')
            // ko if:hasSelectedFiles
            button.f-button(data-bind='click:deselectAllFiles')
              i.fa.fa-remove.f-icon 
              | Clear
            // /ko
          // ko if:hasSelectedFiles
          div
            // ko foreach:selectedFiles
            div.f-pointer(data-bind='click:deselect')
              i.fa.fa-remove.f-icon(title='Deselect file')
              span(data-bind='text:path')
            // /ko
          // /ko

        .f-commands
          button.f-button(type='button' data-bind='click:importSelectedFiles, enable:hasSelectedFiles')
            i.fa.fa-cloud-upload.f-icon
            | Import

      // /ko

    script(type="text/html" id="flow-jobs-output")
      .f-widget
        h3
          i.fa.fa-bolt.f-icon
          | Jobs
        // ko if:exception
        div(data-bind="template: { name:'flow-error', data:exception }")
        // /ko
        // ko if:hasJobViews
        table.table.table-condensed
          thead
            tr
              th Key
              th Description
              th Status
          tbody
            // ko foreach:jobViews
            tr
              td
                a(href='#' data-bind='text:job.key.name, click:inspect')
              td(data-bind='text:job.description')
              td(data-bind='text:job.status')
            // /ko
        // /ko
        // ko ifnot:hasJobViews
        bq Your H<sub>2</sub>O cloud has no jobs.
        // /ko
        .f-commands
          button.f-button(type='button' data-bind="click:toggleRefresh, css:{ 'f-button-toggle':isLive }")
            // ko if:isLive
            i.fa.fa-refresh.fa-spin.f-icon
            | Stop
            // /ko
            // ko ifnot:isLive
            i.fa.fa-refresh.f-icon
            | Refresh
            // /ko

    script(type="text/html" id="flow-frame-output")
      .f-widget
        h3
          i.fa.fa-database.f-icon
          span(data-bind="text:key")
        // ko with:table
        table.table.table-condensed.f-monospace
          thead
            tr
              th Label
              // ko foreach:header
              th(data-bind='text:$data')
              // /ko
          tbody
            tr.f-bg-gray
              th Type
              // ko foreach:typeRow
              td(data-bind='text:$data')
              // /ko

            tr.f-bg-gray
              th Min
              // ko foreach:minRow
              td(data-bind='text:$data')
              // /ko

            tr.f-bg-gray
              th Max
              // ko foreach:maxRow
              td(data-bind='text:$data')
              // /ko

            tr.f-bg-gray
              th Mean
              // ko foreach:meanRow
              td(data-bind='text:$data')
              // /ko

            tr.f-bg-gray
              th Sigma
              // ko foreach:sigmaRow
              td(data-bind='text:$data')
              // /ko

            // ko if:hasEnums
            tr.f-bg-gray
              th Cardinality
              // ko foreach:cardinalityRow
              td(data-bind='text:$data')
              // /ko
            // /ko

            // ko if:hasMissings
            tr.f-bg-gray
              th Missings
              // ko foreach:missingsRow
              td(data-bind='text:$data')
              // /ko
            // /ko

            // ko if:hasZeros
            tr.f-bg-gray
              th Zeros
              // ko foreach:zerosRow
              td(data-bind='text:$data')
              // /ko
            // /ko

            // ko if:hasPinfs
            tr.f-bg-gray
              th +Inf
              // ko foreach:pinfsRow
              td(data-bind='text:$data')
              // /ko
            // /ko

            // ko if:hasNinfs
            tr.f-bg-gray
              th -Inf
              // ko foreach:ninfsRow
              td(data-bind='text:$data')
              // /ko
            // /ko

            tr.f-bg-gray
              th Summary
              // ko foreach:summaryRow
              td(data-bind='click:displaySummary') 
                i.fa.fa-share-square-o
              // /ko

            // ko foreach:dataRows
            tr
              th(data-bind='text:header')
              // ko foreach:cells
              td(data-bind='text:$data')
              // /ko
            // /ko
        // /ko

    script(type="text/html" id="flow-job-output")
      .f-widget
        h3
          i.fa.fa-bolt.f-icon
          | Job
        // ko if:exception
        div(data-bind="template: { name:'flow-error', data:exception }")
        // /ko
        table.f-table-horizontal
          tbody
            tr
              td.f-narrow Status
              td.f-wide(data-bind='text:status')
            tr
              td.f-narrow Key
              td.f-wide(data-bind='text:key')
            tr
              td.f-narrow Description
              td.f-wide(data-bind='text:description')
            tr
              td.f-narrow Destination Key
              td.f-wide
                // ko ifnot:kind
                span(data-bind='text:destinationKey')
                // /ko
                // ko if:kind
                a(href='#' data-bind='text:destinationKey, click:inspect')
                // /ko
            tr
              td.f-narrow Run Time
              td.f-wide(data-bind='text:runTime')
            tr
              td.f-narrow Progress
              td.f-wide
                table
                  tbody
                    tr
                      td.f-narrow(data-bind='text:progress')
                      td.f-wide
                        .progress(style='max-width:400px;height:8px;margin:5px 0')
                          .progress-bar(data-bind="style:{background:statusColor,width:progress}")

            tr
              td.f-narrow Exception
              td.f-wide(data-bind='text:exception')
        .f-commands
          button.f-button(type='button' data-bind="click:toggleRefresh, css:{ 'f-button-toggle':isLive }")
            // ko if:isLive
            i.fa.fa-refresh.fa-spin.f-icon
            | Stop
            // /ko
            // ko ifnot:isLive
            i.fa.fa-refresh.f-icon
            | Refresh
            // /ko

    script(type="text/html" id="flow-error")
      .alert.alert-danger(role='alert')
        // ko with:error
        h4(data-bind='text:message')
        // ko with:cause
        p(data-bind='text:message') 
        pre(data-bind='text:stack' style='border-radius:0;background:none;')
        // /ko
        // /ko

    script(type="text/html" id="flow-cell")
      .f-cell(data-bind="click:select, css:{ 'f-cell-selected':isSelected, 'f-cell-active':isActive, 'f-cell-ready':isReady, 'f-cell-busy':isBusy, 'f-cell-error':hasError }")
        .f-cell-type(data-bind="text:type")
        .f-cell-input(data-bind="visible:hasInput, css:{ 'f-cell-has-output':hasOutput }")
          table(style='width:100%')
            tbody
              tr
                td 
                  textarea(placeholder='Expression...' rows='1' spellcheck='false' data-bind="value:input, valueUpdate:'afterkeydown', hasFocus:isActive, cursorPosition:_cursorPosition, autoResize:true")
                td(style='width:20px;text-align:right;vertical-align:top')
                  // ko ifnot:isBusy
                  // ko if:hasError
                  i.fa.fa-exclamation-circle(style='color:red' title='Error')
                  // /ko
                  // ko ifnot:hasError
                  i.fa.fa-terminal(title='Waiting for input')
                  // /ko
                  // /ko
                  // ko if:isBusy
                  i.fa.fa-cog.fa-spin(title='Computing...')
                  // /ko
        .f-cell-outputs(data-bind='visible:isOutputVisible, template: { name: templateOf, foreach:outputs }')

    script(src='//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.2/highlight.min.js')
    script(src='js/lib-flow.js')
    script(src='js/flow.js')

    script.
      (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
      function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
      e=o.createElement(i);r=o.getElementsByTagName(i)[0];
      e.src='//www.google-analytics.com/analytics.js';
      r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
      ga('create','UA-29263631-3');ga('send','pageview', { 'title': 'h2o-steam' });


