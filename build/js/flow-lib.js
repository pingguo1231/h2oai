// Generated by CommonJS Everywhere 0.9.7
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.10.33',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/tools/entry-point.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      global.escodegen = require('/escodegen.js', module);
      escodegen.browser = true;
    }());
  });
  require.define('/escodegen.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      var Syntax, Precedence, BinaryPrecedence, SourceNode, estraverse, esutils, isArray, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap, FORMAT_MINIFY, FORMAT_DEFAULTS;
      estraverse = require('/node_modules/estraverse/estraverse.js', module);
      esutils = require('/node_modules/esutils/lib/utils.js', module);
      Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportBatchSpecifier: 'ExportBatchSpecifier',
        ExportDeclaration: 'ExportDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
      };
      function isExpression(node) {
        return CodeGenerator.Expression.hasOwnProperty(node.type);
      }
      function isStatement(node) {
        return CodeGenerator.Statement.hasOwnProperty(node.type);
      }
      Precedence = {
        Sequence: 0,
        Yield: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        LogicalOR: 3,
        LogicalAND: 4,
        BitwiseOR: 5,
        BitwiseXOR: 6,
        BitwiseAND: 7,
        Equality: 8,
        Relational: 9,
        BitwiseSHIFT: 10,
        Additive: 11,
        Multiplicative: 12,
        Unary: 13,
        Postfix: 14,
        Call: 15,
        New: 16,
        TaggedTemplate: 17,
        Member: 18,
        Primary: 19
      };
      BinaryPrecedence = {
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative
      };
      var F_ALLOW_IN = 1, F_ALLOW_CALL = 1 << 1, F_ALLOW_UNPARATH_NEW = 1 << 2, F_FUNC_BODY = 1 << 3, F_DIRECTIVE_CTX = 1 << 4, F_SEMICOLON_OPT = 1 << 5;
      var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TTF = F_ALLOW_IN | F_ALLOW_CALL, E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TFF = F_ALLOW_IN, E_FFT = F_ALLOW_UNPARATH_NEW, E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;
      var S_TFFF = F_ALLOW_IN, S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT, S_FFFF = 0, S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX, S_TTFF = F_ALLOW_IN | F_FUNC_BODY;
      function getDefaultOptions() {
        return {
          indent: null,
          base: null,
          parse: null,
          comment: false,
          format: {
            indent: {
              style: '    ',
              base: 0,
              adjustMultilineComment: false
            },
            newline: '\n',
            space: ' ',
            json: false,
            renumber: false,
            hexadecimal: false,
            quotes: 'single',
            escapeless: false,
            compact: false,
            parentheses: true,
            semicolons: true,
            safeConcatenation: false
          },
          moz: {
            comprehensionExpressionStartsWithAssignment: false,
            starlessGenerator: false
          },
          sourceMap: null,
          sourceMapRoot: null,
          sourceMapWithCode: false,
          directive: false,
          raw: true,
          verbatim: null
        };
      }
      function stringRepeat(str, num) {
        var result = '';
        for (num |= 0; num > 0; num >>>= 1, str += str) {
          if (num & 1) {
            result += str;
          }
        }
        return result;
      }
      isArray = Array.isArray;
      if (!isArray) {
        isArray = function isArray(array) {
          return Object.prototype.toString.call(array) === '[object Array]';
        };
      }
      function hasLineTerminator(str) {
        return /[\r\n]/g.test(str);
      }
      function endsWithLineTerminator(str) {
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
      }
      function merge(target, override) {
        var key;
        for (key in override) {
          if (override.hasOwnProperty(key)) {
            target[key] = override[key];
          }
        }
        return target;
      }
      function updateDeeply(target, override) {
        var key, val;
        function isHashObject(target) {
          return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
        }
        for (key in override) {
          if (override.hasOwnProperty(key)) {
            val = override[key];
            if (isHashObject(val)) {
              if (isHashObject(target[key])) {
                updateDeeply(target[key], val);
              } else {
                target[key] = updateDeeply({}, val);
              }
            } else {
              target[key] = val;
            }
          }
        }
        return target;
      }
      function generateNumber(value) {
        var result, point, temp, exponent, pos;
        if (value !== value) {
          throw new Error('Numeric literal whose value is NaN');
        }
        if (value < 0 || value === 0 && 1 / value < 0) {
          throw new Error('Numeric literal whose value is negative');
        }
        if (value === 1 / 0) {
          return json ? 'null' : renumber ? '1e400' : '1e+400';
        }
        result = '' + value;
        if (!renumber || result.length < 3) {
          return result;
        }
        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 48 && point === 1) {
          point = 0;
          result = result.slice(1);
        }
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) {
          exponent = +temp.slice(pos + 1);
          temp = temp.slice(0, pos);
        }
        if (point >= 0) {
          exponent -= temp.length - point - 1;
          temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
        }
        pos = 0;
        while (temp.charCodeAt(temp.length + pos - 1) === 48) {
          --pos;
        }
        if (pos !== 0) {
          exponent -= pos;
          temp = temp.slice(0, pos);
        }
        if (exponent !== 0) {
          temp += 'e' + exponent;
        }
        if ((temp.length < result.length || hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length) && +temp === value) {
          result = temp;
        }
        return result;
      }
      function escapeRegExpCharacter(ch, previousIsBackslash) {
        if ((ch & ~1) === 8232) {
          return (previousIsBackslash ? 'u' : '\\u') + (ch === 8232 ? '2028' : '2029');
        } else if (ch === 10 || ch === 13) {
          return (previousIsBackslash ? '' : '\\') + (ch === 10 ? 'n' : 'r');
        }
        return String.fromCharCode(ch);
      }
      function generateRegExp(reg) {
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;
        result = reg.toString();
        if (reg.source) {
          match = result.match(/\/([^/]*)$/);
          if (!match) {
            return result;
          }
          flags = match[1];
          result = '';
          characterInBrack = false;
          previousIsBackslash = false;
          for (i = 0, iz = reg.source.length; i < iz; ++i) {
            ch = reg.source.charCodeAt(i);
            if (!previousIsBackslash) {
              if (characterInBrack) {
                if (ch === 93) {
                  characterInBrack = false;
                }
              } else {
                if (ch === 47) {
                  result += '\\';
                } else if (ch === 91) {
                  characterInBrack = true;
                }
              }
              result += escapeRegExpCharacter(ch, previousIsBackslash);
              previousIsBackslash = ch === 92;
            } else {
              result += escapeRegExpCharacter(ch, previousIsBackslash);
              previousIsBackslash = false;
            }
          }
          return '/' + result + '/' + flags;
        }
        return result;
      }
      function escapeAllowedCharacter(code, next) {
        var hex;
        if (code === 8) {
          return '\\b';
        }
        if (code === 12) {
          return '\\f';
        }
        if (code === 9) {
          return '\\t';
        }
        hex = code.toString(16).toUpperCase();
        if (json || code > 255) {
          return '\\u' + '0000'.slice(hex.length) + hex;
        } else if (code === 0 && !esutils.code.isDecimalDigit(next)) {
          return '\\0';
        } else if (code === 11) {
          return '\\x0B';
        } else {
          return '\\x' + '00'.slice(hex.length) + hex;
        }
      }
      function escapeDisallowedCharacter(code) {
        if (code === 92) {
          return '\\\\';
        }
        if (code === 10) {
          return '\\n';
        }
        if (code === 13) {
          return '\\r';
        }
        if (code === 8232) {
          return '\\u2028';
        }
        if (code === 8233) {
          return '\\u2029';
        }
        throw new Error('Incorrectly classified character');
      }
      function escapeDirective(str) {
        var i, iz, code, quote;
        quote = quotes === 'double' ? '"' : "'";
        for (i = 0, iz = str.length; i < iz; ++i) {
          code = str.charCodeAt(i);
          if (code === 39) {
            quote = '"';
            break;
          } else if (code === 34) {
            quote = "'";
            break;
          } else if (code === 92) {
            ++i;
          }
        }
        return quote + str + quote;
      }
      function escapeString(str) {
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;
        for (i = 0, len = str.length; i < len; ++i) {
          code = str.charCodeAt(i);
          if (code === 39) {
            ++singleQuotes;
          } else if (code === 34) {
            ++doubleQuotes;
          } else if (code === 47 && json) {
            result += '\\';
          } else if (esutils.code.isLineTerminator(code) || code === 92) {
            result += escapeDisallowedCharacter(code);
            continue;
          } else if (json && code < 32 || !(json || escapeless || code >= 32 && code <= 126)) {
            result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
            continue;
          }
          result += String.fromCharCode(code);
        }
        single = !(quotes === 'double' || quotes === 'auto' && doubleQuotes < singleQuotes);
        quote = single ? "'" : '"';
        if (!(single ? singleQuotes : doubleQuotes)) {
          return quote + result + quote;
        }
        str = result;
        result = quote;
        for (i = 0, len = str.length; i < len; ++i) {
          code = str.charCodeAt(i);
          if (code === 39 && single || code === 34 && !single) {
            result += '\\';
          }
          result += String.fromCharCode(code);
        }
        return result + quote;
      }
      function flattenToString(arr) {
        var i, iz, elem, result = '';
        for (i = 0, iz = arr.length; i < iz; ++i) {
          elem = arr[i];
          result += isArray(elem) ? flattenToString(elem) : elem;
        }
        return result;
      }
      function toSourceNodeWhenNeeded(generated, node) {
        if (!sourceMap) {
          if (isArray(generated)) {
            return flattenToString(generated);
          } else {
            return generated;
          }
        }
        if (node == null) {
          if (generated instanceof SourceNode) {
            return generated;
          } else {
            node = {};
          }
        }
        if (node.loc == null) {
          return new SourceNode(null, null, sourceMap, generated, node.name || null);
        }
        return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated, node.name || null);
      }
      function noEmptySpace() {
        return space ? space : ' ';
      }
      function join(left, right) {
        var leftSource, rightSource, leftCharCode, rightCharCode;
        leftSource = toSourceNodeWhenNeeded(left).toString();
        if (leftSource.length === 0) {
          return [right];
        }
        rightSource = toSourceNodeWhenNeeded(right).toString();
        if (rightSource.length === 0) {
          return [left];
        }
        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
        rightCharCode = rightSource.charCodeAt(0);
        if ((leftCharCode === 43 || leftCharCode === 45) && leftCharCode === rightCharCode || esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode) || leftCharCode === 47 && rightCharCode === 105) {
          return [
            left,
            noEmptySpace(),
            right
          ];
        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) || esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
          return [
            left,
            right
          ];
        }
        return [
          left,
          space,
          right
        ];
      }
      function addIndent(stmt) {
        return [
          base,
          stmt
        ];
      }
      function withIndent(fn) {
        var previousBase;
        previousBase = base;
        base += indent;
        fn(base);
        base = previousBase;
      }
      function calculateSpaces(str) {
        var i;
        for (i = str.length - 1; i >= 0; --i) {
          if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
            break;
          }
        }
        return str.length - 1 - i;
      }
      function adjustMultilineComment(value, specialBase) {
        var array, i, len, line, j, spaces, previousBase, sn;
        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;
        for (i = 1, len = array.length; i < len; ++i) {
          line = array[i];
          j = 0;
          while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
            ++j;
          }
          if (spaces > j) {
            spaces = j;
          }
        }
        if (typeof specialBase !== 'undefined') {
          previousBase = base;
          if (array[1][spaces] === '*') {
            specialBase += ' ';
          }
          base = specialBase;
        } else {
          if (spaces & 1) {
            --spaces;
          }
          previousBase = base;
        }
        for (i = 1, len = array.length; i < len; ++i) {
          sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
          array[i] = sourceMap ? sn.join('') : sn;
        }
        base = previousBase;
        return array.join('\n');
      }
      function generateComment(comment, specialBase) {
        if (comment.type === 'Line') {
          if (endsWithLineTerminator(comment.value)) {
            return '//' + comment.value;
          } else {
            return '//' + comment.value + '\n';
          }
        }
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
          return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
        }
        return '/*' + comment.value + '*/';
      }
      function addComments(stmt, result) {
        var i, len, comment, save, tailingToStatement, specialBase, fragment;
        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
          save = result;
          comment = stmt.leadingComments[0];
          result = [];
          if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
            result.push('\n');
          }
          result.push(generateComment(comment));
          if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push('\n');
          }
          for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
            comment = stmt.leadingComments[i];
            fragment = [generateComment(comment)];
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              fragment.push('\n');
            }
            result.push(addIndent(fragment));
          }
          result.push(addIndent(save));
        }
        if (stmt.trailingComments) {
          tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
          specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([
            base,
            result,
            indent
          ]).toString()));
          for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
            comment = stmt.trailingComments[i];
            if (tailingToStatement) {
              if (i === 0) {
                result = [
                  result,
                  indent
                ];
              } else {
                result = [
                  result,
                  specialBase
                ];
              }
              result.push(generateComment(comment, specialBase));
            } else {
              result = [
                result,
                addIndent(generateComment(comment))
              ];
            }
            if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
              result = [
                result,
                '\n'
              ];
            }
          }
        }
        return result;
      }
      function parenthesize(text, current, should) {
        if (current < should) {
          return [
            '(',
            text,
            ')'
          ];
        }
        return text;
      }
      function generateVerbatimString(string) {
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for (i = 1, iz = result.length; i < iz; i++) {
          result[i] = newline + base + result[i];
        }
        return result;
      }
      function generateVerbatim(expr, precedence) {
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];
        if (typeof verbatim === 'string') {
          result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
        } else {
          result = generateVerbatimString(verbatim.content);
          prec = verbatim.precedence != null ? verbatim.precedence : Precedence.Sequence;
          result = parenthesize(result, prec, precedence);
        }
        return toSourceNodeWhenNeeded(result, expr);
      }
      function CodeGenerator() {
      }
      CodeGenerator.prototype.maybeBlock = function (stmt, flags) {
        var result, noLeadingComment, that = this;
        noLeadingComment = !extra.comment || !stmt.leadingComments;
        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
          return [
            space,
            this.generateStatement(stmt, flags)
          ];
        }
        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
          return ';';
        }
        withIndent(function () {
          result = [
            newline,
            addIndent(that.generateStatement(stmt, flags))
          ];
        });
        return result;
      };
      CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
          return [
            result,
            space
          ];
        }
        if (ends) {
          return [
            result,
            base
          ];
        }
        return [
          result,
          newline,
          base
        ];
      };
      function generateIdentifier(node) {
        return toSourceNodeWhenNeeded(node.name, node);
      }
      CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
        if (node.type === Syntax.Identifier) {
          return generateIdentifier(node);
        }
        return this.generateExpression(node, precedence, flags);
      };
      CodeGenerator.prototype.generateFunctionParams = function (node) {
        var i, iz, result, hasDefault;
        hasDefault = false;
        if (node.type === Syntax.ArrowFunctionExpression && !node.rest && (!node.defaults || node.defaults.length === 0) && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
          result = [generateIdentifier(node.params[0])];
        } else {
          result = ['('];
          if (node.defaults) {
            hasDefault = true;
          }
          for (i = 0, iz = node.params.length; i < iz; ++i) {
            if (hasDefault && node.defaults[i]) {
              result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
            } else {
              result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
            }
            if (i + 1 < iz) {
              result.push(',' + space);
            }
          }
          if (node.rest) {
            if (node.params.length) {
              result.push(',' + space);
            }
            result.push('...');
            result.push(generateIdentifier(node.rest));
          }
          result.push(')');
        }
        return result;
      };
      CodeGenerator.prototype.generateFunctionBody = function (node) {
        var result, expr;
        result = this.generateFunctionParams(node);
        if (node.type === Syntax.ArrowFunctionExpression) {
          result.push(space);
          result.push('=>');
        }
        if (node.expression) {
          result.push(space);
          expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
          if (expr.toString().charAt(0) === '{') {
            expr = [
              '(',
              expr,
              ')'
            ];
          }
          result.push(expr);
        } else {
          result.push(this.maybeBlock(node.body, S_TTFF));
        }
        return result;
      };
      CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
        var result = ['for' + space + '('], that = this;
        withIndent(function () {
          if (stmt.left.type === Syntax.VariableDeclaration) {
            withIndent(function () {
              result.push(stmt.left.kind + noEmptySpace());
              result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
            });
          } else {
            result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
          }
          result = join(result, operator);
          result = [
            join(result, that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)),
            ')'
          ];
        });
        result.push(this.maybeBlock(stmt.body, flags));
        return result;
      };
      CodeGenerator.prototype.generatePropertyKey = function (expr, computed) {
        var result = [];
        if (computed) {
          result.push('[');
        }
        result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));
        if (computed) {
          result.push(']');
        }
        return result;
      };
      CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
        if (Precedence.Assignment < precedence) {
          flags |= F_ALLOW_IN;
        }
        return parenthesize([
          this.generateExpression(left, Precedence.Call, flags),
          space + operator + space,
          this.generateExpression(right, Precedence.Assignment, flags)
        ], Precedence.Assignment, precedence);
      };
      CodeGenerator.prototype.semicolon = function (flags) {
        if (!semicolons && flags & F_SEMICOLON_OPT) {
          return '';
        }
        return ';';
      };
      CodeGenerator.Statement = {
        BlockStatement: function (stmt, flags) {
          var result = [
              '{',
              newline
            ], that = this;
          withIndent(function () {
            var i, iz, fragment, bodyFlags;
            bodyFlags = S_TFFF;
            if (flags & F_FUNC_BODY) {
              bodyFlags |= F_DIRECTIVE_CTX;
            }
            for (i = 0, iz = stmt.body.length; i < iz; ++i) {
              if (i === iz - 1) {
                bodyFlags |= F_SEMICOLON_OPT;
              }
              fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
              result.push(fragment);
              if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                result.push(newline);
              }
            }
          });
          result.push(addIndent('}'));
          return result;
        },
        BreakStatement: function (stmt, flags) {
          if (stmt.label) {
            return 'break ' + stmt.label.name + this.semicolon(flags);
          }
          return 'break' + this.semicolon(flags);
        },
        ContinueStatement: function (stmt, flags) {
          if (stmt.label) {
            return 'continue ' + stmt.label.name + this.semicolon(flags);
          }
          return 'continue' + this.semicolon(flags);
        },
        ClassBody: function (stmt, flags) {
          var result = [
              '{',
              newline
            ], that = this;
          withIndent(function (indent) {
            var i, iz;
            for (i = 0, iz = stmt.body.length; i < iz; ++i) {
              result.push(indent);
              result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
              if (i + 1 < iz) {
                result.push(newline);
              }
            }
          });
          if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push(newline);
          }
          result.push(base);
          result.push('}');
          return result;
        },
        ClassDeclaration: function (stmt, flags) {
          var result, fragment;
          result = ['class ' + stmt.id.name];
          if (stmt.superClass) {
            fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));
            result = join(result, fragment);
          }
          result.push(space);
          result.push(this.generateStatement(stmt.body, S_TFFT));
          return result;
        },
        DirectiveStatement: function (stmt, flags) {
          if (extra.raw && stmt.raw) {
            return stmt.raw + this.semicolon(flags);
          }
          return escapeDirective(stmt.directive) + this.semicolon(flags);
        },
        DoWhileStatement: function (stmt, flags) {
          var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
          result = this.maybeBlockSuffix(stmt.body, result);
          return join(result, [
            'while' + space + '(',
            this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
            ')' + this.semicolon(flags)
          ]);
        },
        CatchClause: function (stmt, flags) {
          var result, that = this;
          withIndent(function () {
            var guard;
            result = [
              'catch' + space + '(',
              that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
              ')'
            ];
            if (stmt.guard) {
              guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
              result.splice(2, 0, ' if ', guard);
            }
          });
          result.push(this.maybeBlock(stmt.body, S_TFFF));
          return result;
        },
        DebuggerStatement: function (stmt, flags) {
          return 'debugger' + this.semicolon(flags);
        },
        EmptyStatement: function (stmt, flags) {
          return ';';
        },
        ExportDeclaration: function (stmt, flags) {
          var result = ['export'], bodyFlags, that = this;
          bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;
          if (stmt['default']) {
            result = join(result, 'default');
            if (isStatement(stmt.declaration)) {
              result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
            } else {
              result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
            }
            return result;
          }
          if (stmt.declaration) {
            return join(result, this.generateStatement(stmt.declaration, bodyFlags));
          }
          if (stmt.specifiers) {
            if (stmt.specifiers.length === 0) {
              result = join(result, '{' + space + '}');
            } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
              result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
            } else {
              result = join(result, '{');
              withIndent(function (indent) {
                var i, iz;
                result.push(newline);
                for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                  result.push(indent);
                  result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                  if (i + 1 < iz) {
                    result.push(',' + newline);
                  }
                }
              });
              if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
              }
              result.push(base + '}');
            }
            if (stmt.source) {
              result = join(result, [
                'from' + space,
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
              ]);
            } else {
              result.push(this.semicolon(flags));
            }
          }
          return result;
        },
        ExpressionStatement: function (stmt, flags) {
          var result, fragment;
          result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
          fragment = toSourceNodeWhenNeeded(result).toString();
          if (fragment.charAt(0) === '{' || fragment.slice(0, 5) === 'class' && ' {'.indexOf(fragment.charAt(5)) >= 0 || fragment.slice(0, 8) === 'function' && '* ('.indexOf(fragment.charAt(8)) >= 0 || directive && flags & F_DIRECTIVE_CTX && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string') {
            result = [
              '(',
              result,
              ')' + this.semicolon(flags)
            ];
          } else {
            result.push(this.semicolon(flags));
          }
          return result;
        },
        ImportDeclaration: function (stmt, flags) {
          var result, cursor, that = this;
          if (stmt.specifiers.length === 0) {
            return [
              'import',
              space,
              this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
              this.semicolon(flags)
            ];
          }
          result = ['import'];
          cursor = 0;
          if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
            result = join(result, [this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)]);
            ++cursor;
          }
          if (stmt.specifiers[cursor]) {
            if (cursor !== 0) {
              result.push(',');
            }
            if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
              result = join(result, [
                space,
                this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
              ]);
            } else {
              result.push(space + '{');
              if (stmt.specifiers.length - cursor === 1) {
                result.push(space);
                result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                result.push(space + '}' + space);
              } else {
                withIndent(function (indent) {
                  var i, iz;
                  result.push(newline);
                  for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
                    result.push(indent);
                    result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                      result.push(',' + newline);
                    }
                  }
                });
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                  result.push(newline);
                }
                result.push(base + '}' + space);
              }
            }
          }
          result = join(result, [
            'from' + space,
            this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
            this.semicolon(flags)
          ]);
          return result;
        },
        VariableDeclarator: function (stmt, flags) {
          var itemFlags = flags & F_ALLOW_IN ? E_TTT : E_FTT;
          if (stmt.init) {
            return [
              this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
              space,
              '=',
              space,
              this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
            ];
          }
          return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
        },
        VariableDeclaration: function (stmt, flags) {
          var result, i, iz, node, bodyFlags, that = this;
          result = [stmt.kind];
          bodyFlags = flags & F_ALLOW_IN ? S_TFFF : S_FFFF;
          function block() {
            node = stmt.declarations[0];
            if (extra.comment && node.leadingComments) {
              result.push('\n');
              result.push(addIndent(that.generateStatement(node, bodyFlags)));
            } else {
              result.push(noEmptySpace());
              result.push(that.generateStatement(node, bodyFlags));
            }
            for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
              node = stmt.declarations[i];
              if (extra.comment && node.leadingComments) {
                result.push(',' + newline);
                result.push(addIndent(that.generateStatement(node, bodyFlags)));
              } else {
                result.push(',' + space);
                result.push(that.generateStatement(node, bodyFlags));
              }
            }
          }
          if (stmt.declarations.length > 1) {
            withIndent(block);
          } else {
            block();
          }
          result.push(this.semicolon(flags));
          return result;
        },
        ThrowStatement: function (stmt, flags) {
          return [
            join('throw', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),
            this.semicolon(flags)
          ];
        },
        TryStatement: function (stmt, flags) {
          var result, i, iz, guardedHandlers;
          result = [
            'try',
            this.maybeBlock(stmt.block, S_TFFF)
          ];
          result = this.maybeBlockSuffix(stmt.block, result);
          if (stmt.handlers) {
            for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
              result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
              if (stmt.finalizer || i + 1 !== iz) {
                result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
              }
            }
          } else {
            guardedHandlers = stmt.guardedHandlers || [];
            for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
              result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
              if (stmt.finalizer || i + 1 !== iz) {
                result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
              }
            }
            if (stmt.handler) {
              if (isArray(stmt.handler)) {
                for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
                  result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                  if (stmt.finalizer || i + 1 !== iz) {
                    result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                  }
                }
              } else {
                result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                if (stmt.finalizer) {
                  result = this.maybeBlockSuffix(stmt.handler.body, result);
                }
              }
            }
          }
          if (stmt.finalizer) {
            result = join(result, [
              'finally',
              this.maybeBlock(stmt.finalizer, S_TFFF)
            ]);
          }
          return result;
        },
        SwitchStatement: function (stmt, flags) {
          var result, fragment, i, iz, bodyFlags, that = this;
          withIndent(function () {
            result = [
              'switch' + space + '(',
              that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
              ')' + space + '{' + newline
            ];
          });
          if (stmt.cases) {
            bodyFlags = S_TFFF;
            for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
              if (i === iz - 1) {
                bodyFlags |= F_SEMICOLON_OPT;
              }
              fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
              result.push(fragment);
              if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                result.push(newline);
              }
            }
          }
          result.push(addIndent('}'));
          return result;
        },
        SwitchCase: function (stmt, flags) {
          var result, fragment, i, iz, bodyFlags, that = this;
          withIndent(function () {
            if (stmt.test) {
              result = [
                join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                ':'
              ];
            } else {
              result = ['default:'];
            }
            i = 0;
            iz = stmt.consequent.length;
            if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
              fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
              result.push(fragment);
              i = 1;
            }
            if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
              result.push(newline);
            }
            bodyFlags = S_TFFF;
            for (; i < iz; ++i) {
              if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
                bodyFlags |= F_SEMICOLON_OPT;
              }
              fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
              result.push(fragment);
              if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                result.push(newline);
              }
            }
          });
          return result;
        },
        IfStatement: function (stmt, flags) {
          var result, bodyFlags, semicolonOptional, that = this;
          withIndent(function () {
            result = [
              'if' + space + '(',
              that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
              ')'
            ];
          });
          semicolonOptional = flags & F_SEMICOLON_OPT;
          bodyFlags = S_TFFF;
          if (semicolonOptional) {
            bodyFlags |= F_SEMICOLON_OPT;
          }
          if (stmt.alternate) {
            result.push(this.maybeBlock(stmt.consequent, S_TFFF));
            result = this.maybeBlockSuffix(stmt.consequent, result);
            if (stmt.alternate.type === Syntax.IfStatement) {
              result = join(result, [
                'else ',
                this.generateStatement(stmt.alternate, bodyFlags)
              ]);
            } else {
              result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
            }
          } else {
            result.push(this.maybeBlock(stmt.consequent, bodyFlags));
          }
          return result;
        },
        ForStatement: function (stmt, flags) {
          var result, that = this;
          withIndent(function () {
            result = ['for' + space + '('];
            if (stmt.init) {
              if (stmt.init.type === Syntax.VariableDeclaration) {
                result.push(that.generateStatement(stmt.init, S_FFFF));
              } else {
                result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                result.push(';');
              }
            } else {
              result.push(';');
            }
            if (stmt.test) {
              result.push(space);
              result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
              result.push(';');
            } else {
              result.push(';');
            }
            if (stmt.update) {
              result.push(space);
              result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
              result.push(')');
            } else {
              result.push(')');
            }
          });
          result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
          return result;
        },
        ForInStatement: function (stmt, flags) {
          return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },
        ForOfStatement: function (stmt, flags) {
          return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },
        LabeledStatement: function (stmt, flags) {
          return [
            stmt.label.name + ':',
            this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)
          ];
        },
        Program: function (stmt, flags) {
          var result, fragment, i, iz, bodyFlags;
          iz = stmt.body.length;
          result = [safeConcatenation && iz > 0 ? '\n' : ''];
          bodyFlags = S_TFTF;
          for (i = 0; i < iz; ++i) {
            if (!safeConcatenation && i === iz - 1) {
              bodyFlags |= F_SEMICOLON_OPT;
            }
            fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
            result.push(fragment);
            if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              result.push(newline);
            }
          }
          return result;
        },
        FunctionDeclaration: function (stmt, flags) {
          var isGenerator = stmt.generator && !extra.moz.starlessGenerator;
          return [
            isGenerator ? 'function*' : 'function',
            isGenerator ? space : noEmptySpace(),
            generateIdentifier(stmt.id),
            this.generateFunctionBody(stmt)
          ];
        },
        ReturnStatement: function (stmt, flags) {
          if (stmt.argument) {
            return [
              join('return', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),
              this.semicolon(flags)
            ];
          }
          return ['return' + this.semicolon(flags)];
        },
        WhileStatement: function (stmt, flags) {
          var result, that = this;
          withIndent(function () {
            result = [
              'while' + space + '(',
              that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
              ')'
            ];
          });
          result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
          return result;
        },
        WithStatement: function (stmt, flags) {
          var result, that = this;
          withIndent(function () {
            result = [
              'with' + space + '(',
              that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
              ')'
            ];
          });
          result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
          return result;
        }
      };
      merge(CodeGenerator.prototype, CodeGenerator.Statement);
      CodeGenerator.Expression = {
        SequenceExpression: function (expr, precedence, flags) {
          var result, i, iz;
          if (Precedence.Sequence < precedence) {
            flags |= F_ALLOW_IN;
          }
          result = [];
          for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
            result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
            if (i + 1 < iz) {
              result.push(',' + space);
            }
          }
          return parenthesize(result, Precedence.Sequence, precedence);
        },
        AssignmentExpression: function (expr, precedence, flags) {
          return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
        },
        ArrowFunctionExpression: function (expr, precedence, flags) {
          return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
        },
        ConditionalExpression: function (expr, precedence, flags) {
          if (Precedence.Conditional < precedence) {
            flags |= F_ALLOW_IN;
          }
          return parenthesize([
            this.generateExpression(expr.test, Precedence.LogicalOR, flags),
            space + '?' + space,
            this.generateExpression(expr.consequent, Precedence.Assignment, flags),
            space + ':' + space,
            this.generateExpression(expr.alternate, Precedence.Assignment, flags)
          ], Precedence.Conditional, precedence);
        },
        LogicalExpression: function (expr, precedence, flags) {
          return this.BinaryExpression(expr, precedence, flags);
        },
        BinaryExpression: function (expr, precedence, flags) {
          var result, currentPrecedence, fragment, leftSource;
          currentPrecedence = BinaryPrecedence[expr.operator];
          if (currentPrecedence < precedence) {
            flags |= F_ALLOW_IN;
          }
          fragment = this.generateExpression(expr.left, currentPrecedence, flags);
          leftSource = fragment.toString();
          if (leftSource.charCodeAt(leftSource.length - 1) === 47 && esutils.code.isIdentifierPart(expr.operator.charCodeAt(0))) {
            result = [
              fragment,
              noEmptySpace(),
              expr.operator
            ];
          } else {
            result = join(fragment, expr.operator);
          }
          fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);
          if (expr.operator === '/' && fragment.toString().charAt(0) === '/' || expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
            result.push(noEmptySpace());
            result.push(fragment);
          } else {
            result = join(result, fragment);
          }
          if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
            return [
              '(',
              result,
              ')'
            ];
          }
          return parenthesize(result, currentPrecedence, precedence);
        },
        CallExpression: function (expr, precedence, flags) {
          var result, i, iz;
          result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
          result.push('(');
          for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
            result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
            if (i + 1 < iz) {
              result.push(',' + space);
            }
          }
          result.push(')');
          if (!(flags & F_ALLOW_CALL)) {
            return [
              '(',
              result,
              ')'
            ];
          }
          return parenthesize(result, Precedence.Call, precedence);
        },
        NewExpression: function (expr, precedence, flags) {
          var result, length, i, iz, itemFlags;
          length = expr['arguments'].length;
          itemFlags = flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0 ? E_TFT : E_TFF;
          result = join('new', this.generateExpression(expr.callee, Precedence.New, itemFlags));
          if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
            result.push('(');
            for (i = 0, iz = length; i < iz; ++i) {
              result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
              if (i + 1 < iz) {
                result.push(',' + space);
              }
            }
            result.push(')');
          }
          return parenthesize(result, Precedence.New, precedence);
        },
        MemberExpression: function (expr, precedence, flags) {
          var result, fragment;
          result = [this.generateExpression(expr.object, Precedence.Call, flags & F_ALLOW_CALL ? E_TTF : E_TFF)];
          if (expr.computed) {
            result.push('[');
            result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
            result.push(']');
          } else {
            if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
              fragment = toSourceNodeWhenNeeded(result).toString();
              if (fragment.indexOf('.') < 0 && !/[eExX]/.test(fragment) && esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) && !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)) {
                result.push('.');
              }
            }
            result.push('.');
            result.push(generateIdentifier(expr.property));
          }
          return parenthesize(result, Precedence.Member, precedence);
        },
        UnaryExpression: function (expr, precedence, flags) {
          var result, fragment, rightCharCode, leftSource, leftCharCode;
          fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);
          if (space === '') {
            result = join(expr.operator, fragment);
          } else {
            result = [expr.operator];
            if (expr.operator.length > 2) {
              result = join(result, fragment);
            } else {
              leftSource = toSourceNodeWhenNeeded(result).toString();
              leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
              rightCharCode = fragment.toString().charCodeAt(0);
              if ((leftCharCode === 43 || leftCharCode === 45) && leftCharCode === rightCharCode || esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode)) {
                result.push(noEmptySpace());
                result.push(fragment);
              } else {
                result.push(fragment);
              }
            }
          }
          return parenthesize(result, Precedence.Unary, precedence);
        },
        YieldExpression: function (expr, precedence, flags) {
          var result;
          if (expr.delegate) {
            result = 'yield*';
          } else {
            result = 'yield';
          }
          if (expr.argument) {
            result = join(result, this.generateExpression(expr.argument, Precedence.Yield, E_TTT));
          }
          return parenthesize(result, Precedence.Yield, precedence);
        },
        UpdateExpression: function (expr, precedence, flags) {
          if (expr.prefix) {
            return parenthesize([
              expr.operator,
              this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
            ], Precedence.Unary, precedence);
          }
          return parenthesize([
            this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
            expr.operator
          ], Precedence.Postfix, precedence);
        },
        FunctionExpression: function (expr, precedence, flags) {
          var result, isGenerator;
          isGenerator = expr.generator && !extra.moz.starlessGenerator;
          result = isGenerator ? 'function*' : 'function';
          if (expr.id) {
            return [
              result,
              isGenerator ? space : noEmptySpace(),
              generateIdentifier(expr.id),
              this.generateFunctionBody(expr)
            ];
          }
          return [
            result + space,
            this.generateFunctionBody(expr)
          ];
        },
        ExportBatchSpecifier: function (expr, precedence, flags) {
          return '*';
        },
        ArrayPattern: function (expr, precedence, flags) {
          return this.ArrayExpression(expr, precedence, flags);
        },
        ArrayExpression: function (expr, precedence, flags) {
          var result, multiline, that = this;
          if (!expr.elements.length) {
            return '[]';
          }
          multiline = expr.elements.length > 1;
          result = [
            '[',
            multiline ? newline : ''
          ];
          withIndent(function (indent) {
            var i, iz;
            for (i = 0, iz = expr.elements.length; i < iz; ++i) {
              if (!expr.elements[i]) {
                if (multiline) {
                  result.push(indent);
                }
                if (i + 1 === iz) {
                  result.push(',');
                }
              } else {
                result.push(multiline ? indent : '');
                result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
              }
              if (i + 1 < iz) {
                result.push(',' + (multiline ? newline : space));
              }
            }
          });
          if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push(newline);
          }
          result.push(multiline ? base : '');
          result.push(']');
          return result;
        },
        ClassExpression: function (expr, precedence, flags) {
          var result, fragment;
          result = ['class'];
          if (expr.id) {
            result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
          }
          if (expr.superClass) {
            fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));
            result = join(result, fragment);
          }
          result.push(space);
          result.push(this.generateStatement(expr.body, S_TFFT));
          return result;
        },
        MethodDefinition: function (expr, precedence, flags) {
          var result, fragment;
          if (expr['static']) {
            result = ['static' + space];
          } else {
            result = [];
          }
          if (expr.kind === 'get' || expr.kind === 'set') {
            result = join(result, [
              join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
              this.generateFunctionBody(expr.value)
            ]);
          } else {
            fragment = [
              this.generatePropertyKey(expr.key, expr.computed),
              this.generateFunctionBody(expr.value)
            ];
            if (expr.value.generator) {
              result.push('*');
              result.push(fragment);
            } else {
              result = join(result, fragment);
            }
          }
          return result;
        },
        Property: function (expr, precedence, flags) {
          var result;
          if (expr.kind === 'get' || expr.kind === 'set') {
            return [
              expr.kind,
              noEmptySpace(),
              this.generatePropertyKey(expr.key, expr.computed),
              this.generateFunctionBody(expr.value)
            ];
          }
          if (expr.shorthand) {
            return this.generatePropertyKey(expr.key, expr.computed);
          }
          if (expr.method) {
            result = [];
            if (expr.value.generator) {
              result.push('*');
            }
            result.push(this.generatePropertyKey(expr.key, expr.computed));
            result.push(this.generateFunctionBody(expr.value));
            return result;
          }
          return [
            this.generatePropertyKey(expr.key, expr.computed),
            ':' + space,
            this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
          ];
        },
        ObjectExpression: function (expr, precedence, flags) {
          var multiline, result, fragment, that = this;
          if (!expr.properties.length) {
            return '{}';
          }
          multiline = expr.properties.length > 1;
          withIndent(function () {
            fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
          });
          if (!multiline) {
            if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
              return [
                '{',
                space,
                fragment,
                space,
                '}'
              ];
            }
          }
          withIndent(function (indent) {
            var i, iz;
            result = [
              '{',
              newline,
              indent,
              fragment
            ];
            if (multiline) {
              result.push(',' + newline);
              for (i = 1, iz = expr.properties.length; i < iz; ++i) {
                result.push(indent);
                result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                if (i + 1 < iz) {
                  result.push(',' + newline);
                }
              }
            }
          });
          if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push(newline);
          }
          result.push(base);
          result.push('}');
          return result;
        },
        ObjectPattern: function (expr, precedence, flags) {
          var result, i, iz, multiline, property, that = this;
          if (!expr.properties.length) {
            return '{}';
          }
          multiline = false;
          if (expr.properties.length === 1) {
            property = expr.properties[0];
            if (property.value.type !== Syntax.Identifier) {
              multiline = true;
            }
          } else {
            for (i = 0, iz = expr.properties.length; i < iz; ++i) {
              property = expr.properties[i];
              if (!property.shorthand) {
                multiline = true;
                break;
              }
            }
          }
          result = [
            '{',
            multiline ? newline : ''
          ];
          withIndent(function (indent) {
            var i, iz;
            for (i = 0, iz = expr.properties.length; i < iz; ++i) {
              result.push(multiline ? indent : '');
              result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
              if (i + 1 < iz) {
                result.push(',' + (multiline ? newline : space));
              }
            }
          });
          if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
            result.push(newline);
          }
          result.push(multiline ? base : '');
          result.push('}');
          return result;
        },
        ThisExpression: function (expr, precedence, flags) {
          return 'this';
        },
        Identifier: function (expr, precedence, flags) {
          return generateIdentifier(expr);
        },
        ImportDefaultSpecifier: function (expr, precedence, flags) {
          return generateIdentifier(expr.id);
        },
        ImportNamespaceSpecifier: function (expr, precedence, flags) {
          var result = ['*'];
          if (expr.id) {
            result.push(space + 'as' + noEmptySpace() + generateIdentifier(expr.id));
          }
          return result;
        },
        ImportSpecifier: function (expr, precedence, flags) {
          return this.ExportSpecifier(expr, precedence, flags);
        },
        ExportSpecifier: function (expr, precedence, flags) {
          var result = [expr.id.name];
          if (expr.name) {
            result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(expr.name));
          }
          return result;
        },
        Literal: function (expr, precedence, flags) {
          var raw;
          if (expr.hasOwnProperty('raw') && parse && extra.raw) {
            try {
              raw = parse(expr.raw).body[0].expression;
              if (raw.type === Syntax.Literal) {
                if (raw.value === expr.value) {
                  return expr.raw;
                }
              }
            } catch (e) {
            }
          }
          if (expr.value === null) {
            return 'null';
          }
          if (typeof expr.value === 'string') {
            return escapeString(expr.value);
          }
          if (typeof expr.value === 'number') {
            return generateNumber(expr.value);
          }
          if (typeof expr.value === 'boolean') {
            return expr.value ? 'true' : 'false';
          }
          return generateRegExp(expr.value);
        },
        GeneratorExpression: function (expr, precedence, flags) {
          return this.ComprehensionExpression(expr, precedence, flags);
        },
        ComprehensionExpression: function (expr, precedence, flags) {
          var result, i, iz, fragment, that = this;
          result = expr.type === Syntax.GeneratorExpression ? ['('] : ['['];
          if (extra.moz.comprehensionExpressionStartsWithAssignment) {
            fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
            result.push(fragment);
          }
          if (expr.blocks) {
            withIndent(function () {
              for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
                fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                  result = join(result, fragment);
                } else {
                  result.push(fragment);
                }
              }
            });
          }
          if (expr.filter) {
            result = join(result, 'if' + space);
            fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
            result = join(result, [
              '(',
              fragment,
              ')'
            ]);
          }
          if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
            fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
            result = join(result, fragment);
          }
          result.push(expr.type === Syntax.GeneratorExpression ? ')' : ']');
          return result;
        },
        ComprehensionBlock: function (expr, precedence, flags) {
          var fragment;
          if (expr.left.type === Syntax.VariableDeclaration) {
            fragment = [
              expr.left.kind,
              noEmptySpace(),
              this.generateStatement(expr.left.declarations[0], S_FFFF)
            ];
          } else {
            fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
          }
          fragment = join(fragment, expr.of ? 'of' : 'in');
          fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));
          return [
            'for' + space + '(',
            fragment,
            ')'
          ];
        },
        SpreadElement: function (expr, precedence, flags) {
          return [
            '...',
            this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
          ];
        },
        TaggedTemplateExpression: function (expr, precedence, flags) {
          var itemFlags = E_TTF;
          if (!(flags & F_ALLOW_CALL)) {
            itemFlags = E_TFF;
          }
          var result = [
              this.generateExpression(expr.tag, Precedence.Call, itemFlags),
              this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
            ];
          return parenthesize(result, Precedence.TaggedTemplate, precedence);
        },
        TemplateElement: function (expr, precedence, flags) {
          return expr.value.raw;
        },
        TemplateLiteral: function (expr, precedence, flags) {
          var result, i, iz;
          result = ['`'];
          for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
            result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
            if (i + 1 < iz) {
              result.push('${' + space);
              result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
              result.push(space + '}');
            }
          }
          result.push('`');
          return result;
        },
        ModuleSpecifier: function (expr, precedence, flags) {
          return this.Literal(expr, precedence, flags);
        }
      };
      merge(CodeGenerator.prototype, CodeGenerator.Expression);
      CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
        var result, type;
        type = expr.type || Syntax.Property;
        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
          return generateVerbatim(expr, precedence);
        }
        result = this[type](expr, precedence, flags);
        if (extra.comment) {
          result = addComments(expr, result);
        }
        return toSourceNodeWhenNeeded(result, expr);
      };
      CodeGenerator.prototype.generateStatement = function (stmt, flags) {
        var result, fragment;
        result = this[stmt.type](stmt, flags);
        if (extra.comment) {
          result = addComments(stmt, result);
        }
        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' && fragment.charAt(fragment.length - 1) === '\n') {
          result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
        }
        return toSourceNodeWhenNeeded(result, stmt);
      };
      function generateInternal(node) {
        var codegen;
        codegen = new CodeGenerator;
        if (isStatement(node)) {
          return codegen.generateStatement(node, S_TFFF);
        }
        if (isExpression(node)) {
          return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
        }
        throw new Error('Unknown node type: ' + node.type);
      }
      function generate(node, options) {
        var defaultOptions = getDefaultOptions(), result, pair;
        if (options != null) {
          if (typeof options.indent === 'string') {
            defaultOptions.format.indent.style = options.indent;
          }
          if (typeof options.base === 'number') {
            defaultOptions.format.indent.base = options.base;
          }
          options = updateDeeply(defaultOptions, options);
          indent = options.format.indent.style;
          if (typeof options.base === 'string') {
            base = options.base;
          } else {
            base = stringRepeat(indent, options.format.indent.base);
          }
        } else {
          options = defaultOptions;
          indent = options.format.indent.style;
          base = stringRepeat(indent, options.format.indent.base);
        }
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) {
          newline = space = indent = base = '';
        }
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        extra = options;
        if (sourceMap) {
          if (!exports.browser) {
            SourceNode = require('/node_modules/source-map/lib/source-map.js', module).SourceNode;
          } else {
            SourceNode = global.sourceMap.SourceNode;
          }
        }
        result = generateInternal(node);
        if (!sourceMap) {
          pair = {
            code: result.toString(),
            map: null
          };
          return options.sourceMapWithCode ? pair : pair.code;
        }
        pair = result.toStringWithSourceMap({
          file: options.file,
          sourceRoot: options.sourceMapRoot
        });
        if (options.sourceContent) {
          pair.map.setSourceContent(options.sourceMap, options.sourceContent);
        }
        if (options.sourceMapWithCode) {
          return pair;
        }
        return pair.map.toString();
      }
      FORMAT_MINIFY = {
        indent: {
          style: '',
          base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
      };
      FORMAT_DEFAULTS = getDefaultOptions().format;
      exports.version = require('/package.json', module).version;
      exports.generate = generate;
      exports.attachComments = estraverse.attachComments;
      exports.Precedence = updateDeeply({}, Precedence);
      exports.browser = false;
      exports.FORMAT_MINIFY = FORMAT_MINIFY;
      exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
    }());
  });
  require.define('/package.json', function (module, exports, __dirname, __filename) {
    module.exports = {
      'name': 'escodegen',
      'description': 'ECMAScript code generator',
      'homepage': 'http://github.com/estools/escodegen',
      'main': 'escodegen.js',
      'bin': {
        'esgenerate': './bin/esgenerate.js',
        'escodegen': './bin/escodegen.js'
      },
      'files': [
        'LICENSE.BSD',
        'LICENSE.source-map',
        'README.md',
        'bin',
        'escodegen.js',
        'package.json'
      ],
      'version': '1.4.4-dev',
      'engines': { 'node': '>=0.10.0' },
      'maintainers': [{
          'name': 'Yusuke Suzuki',
          'email': 'utatane.tea@gmail.com',
          'web': 'http://github.com/Constellation'
        }],
      'repository': {
        'type': 'git',
        'url': 'http://github.com/estools/escodegen.git'
      },
      'dependencies': {
        'estraverse': '^1.9.0',
        'esutils': '^1.1.6',
        'esprima': '^1.2.2',
        'optionator': '^0.5.0'
      },
      'optionalDependencies': { 'source-map': '~0.1.40' },
      'devDependencies': {
        'esprima-moz': '*',
        'semver': '^4.1.0',
        'bluebird': '^2.3.11',
        'chai': '^1.10.0',
        'gulp-mocha': '^2.0.0',
        'gulp-eslint': '^0.2.0',
        'gulp': '^3.8.10',
        'bower-registry-client': '^0.2.1',
        'commonjs-everywhere': '^0.9.7'
      },
      'licenses': [{
          'type': 'BSD',
          'url': 'http://github.com/estools/escodegen/raw/master/LICENSE.BSD'
        }],
      'scripts': {
        'test': 'gulp travis',
        'unit-test': 'gulp test',
        'lint': 'gulp lint',
        'release': 'node tools/release.js',
        'build-min': './node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js',
        'build': './node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js'
      }
    };
  });
  require.define('/node_modules/source-map/lib/source-map.js', function (module, exports, __dirname, __filename) {
    exports.SourceMapGenerator = require('/node_modules/source-map/lib/source-map/source-map-generator.js', module).SourceMapGenerator;
    exports.SourceMapConsumer = require('/node_modules/source-map/lib/source-map/source-map-consumer.js', module).SourceMapConsumer;
    exports.SourceNode = require('/node_modules/source-map/lib/source-map/source-node.js', module).SourceNode;
  });
  require.define('/node_modules/source-map/lib/source-map/source-node.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      var SourceMapGenerator = require('/node_modules/source-map/lib/source-map/source-map-generator.js', module).SourceMapGenerator;
      var util = require('/node_modules/source-map/lib/source-map/util.js', module);
      var REGEX_NEWLINE = /(\r?\n)/;
      var REGEX_CHARACTER = /\r\n|[\s\S]/g;
      function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
        this.children = [];
        this.sourceContents = {};
        this.line = aLine == null ? null : aLine;
        this.column = aColumn == null ? null : aColumn;
        this.source = aSource == null ? null : aSource;
        this.name = aName == null ? null : aName;
        if (aChunks != null)
          this.add(aChunks);
      }
      SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        var node = new SourceNode;
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var shiftNextLine = function () {
          var lineContents = remainingLines.shift();
          var newLine = remainingLines.shift() || '';
          return lineContents + newLine;
        };
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
        var lastMapping = null;
        aSourceMapConsumer.eachMapping(function (mapping) {
          if (lastMapping !== null) {
            if (lastGeneratedLine < mapping.generatedLine) {
              var code = '';
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
            } else {
              var nextLine = remainingLines[0];
              var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
              remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code);
              lastMapping = mapping;
              return;
            }
          }
          while (lastGeneratedLine < mapping.generatedLine) {
            node.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[0];
            node.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[0] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        if (remainingLines.length > 0) {
          if (lastMapping) {
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          node.add(remainingLines.join(''));
        }
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aRelativePath != null) {
              sourceFile = util.join(aRelativePath, sourceFile);
            }
            node.setSourceContent(sourceFile, content);
          }
        });
        return node;
        function addMappingWithCode(mapping, code) {
          if (mapping === null || mapping.source === undefined) {
            node.add(code);
          } else {
            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
            node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
          }
        }
      };
      SourceNode.prototype.add = function SourceNode_add(aChunk) {
        if (Array.isArray(aChunk)) {
          aChunk.forEach(function (chunk) {
            this.add(chunk);
          }, this);
        } else if (aChunk instanceof SourceNode || typeof aChunk === 'string') {
          if (aChunk) {
            this.children.push(aChunk);
          }
        } else {
          throw new TypeError('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ' + aChunk);
        }
        return this;
      };
      SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
        if (Array.isArray(aChunk)) {
          for (var i = aChunk.length - 1; i >= 0; i--) {
            this.prepend(aChunk[i]);
          }
        } else if (aChunk instanceof SourceNode || typeof aChunk === 'string') {
          this.children.unshift(aChunk);
        } else {
          throw new TypeError('Expected a SourceNode, string, or an array of SourceNodes and strings. Got ' + aChunk);
        }
        return this;
      };
      SourceNode.prototype.walk = function SourceNode_walk(aFn) {
        var chunk;
        for (var i = 0, len = this.children.length; i < len; i++) {
          chunk = this.children[i];
          if (chunk instanceof SourceNode) {
            chunk.walk(aFn);
          } else {
            if (chunk !== '') {
              aFn(chunk, {
                source: this.source,
                line: this.line,
                column: this.column,
                name: this.name
              });
            }
          }
        }
      };
      SourceNode.prototype.join = function SourceNode_join(aSep) {
        var newChildren;
        var i;
        var len = this.children.length;
        if (len > 0) {
          newChildren = [];
          for (i = 0; i < len - 1; i++) {
            newChildren.push(this.children[i]);
            newChildren.push(aSep);
          }
          newChildren.push(this.children[i]);
          this.children = newChildren;
        }
        return this;
      };
      SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
        var lastChild = this.children[this.children.length - 1];
        if (lastChild instanceof SourceNode) {
          lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === 'string') {
          this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
          this.children.push(''.replace(aPattern, aReplacement));
        }
        return this;
      };
      SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
      };
      SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
        for (var i = 0, len = this.children.length; i < len; i++) {
          if (this.children[i] instanceof SourceNode) {
            this.children[i].walkSourceContents(aFn);
          }
        }
        var sources = Object.keys(this.sourceContents);
        for (var i = 0, len = sources.length; i < len; i++) {
          aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
        }
      };
      SourceNode.prototype.toString = function SourceNode_toString() {
        var str = '';
        this.walk(function (chunk) {
          str += chunk;
        });
        return str;
      };
      SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
        var generated = {
            code: '',
            line: 1,
            column: 0
          };
        var map = new SourceMapGenerator(aArgs);
        var sourceMappingActive = false;
        var lastOriginalSource = null;
        var lastOriginalLine = null;
        var lastOriginalColumn = null;
        var lastOriginalName = null;
        this.walk(function (chunk, original) {
          generated.code += chunk;
          if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
          } else if (sourceMappingActive) {
            map.addMapping({
              generated: {
                line: generated.line,
                column: generated.column
              }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
          }
          chunk.match(REGEX_CHARACTER).forEach(function (ch, idx, array) {
            if (REGEX_NEWLINE.test(ch)) {
              generated.line++;
              generated.column = 0;
              if (idx + 1 === array.length) {
                lastOriginalSource = null;
                sourceMappingActive = false;
              } else if (sourceMappingActive) {
                map.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated.line,
                    column: generated.column
                  },
                  name: original.name
                });
              }
            } else {
              generated.column += ch.length;
            }
          });
        });
        this.walkSourceContents(function (sourceFile, sourceContent) {
          map.setSourceContent(sourceFile, sourceContent);
        });
        return {
          code: generated.code,
          map: map
        };
      };
      exports.SourceNode = SourceNode;
    });
  });
  require.define('/node_modules/source-map/lib/source-map/util.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse(aUrl) {
        var match = aUrl.match(urlRegexp);
        if (!match) {
          return null;
        }
        return {
          scheme: match[1],
          auth: match[2],
          host: match[3],
          port: match[4],
          path: match[5]
        };
      }
      exports.urlParse = urlParse;
      function urlGenerate(aParsedUrl) {
        var url = '';
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ':';
        }
        url += '//';
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + '@';
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ':' + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports.urlGenerate = urlGenerate;
      function normalize(aPath) {
        var path = aPath;
        var url = urlParse(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path = url.path;
        }
        var isAbsolute = path.charAt(0) === '/';
        var parts = path.split(/\/+/);
        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
          part = parts[i];
          if (part === '.') {
            parts.splice(i, 1);
          } else if (part === '..') {
            up++;
          } else if (up > 0) {
            if (part === '') {
              parts.splice(i + 1, up);
              up = 0;
            } else {
              parts.splice(i, 2);
              up--;
            }
          }
        }
        path = parts.join('/');
        if (path === '') {
          path = isAbsolute ? '/' : '.';
        }
        if (url) {
          url.path = path;
          return urlGenerate(url);
        }
        return path;
      }
      exports.normalize = normalize;
      function join(aRoot, aPath) {
        if (aRoot === '') {
          aRoot = '.';
        }
        if (aPath === '') {
          aPath = '.';
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || '/';
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports.join = join;
      function relative(aRoot, aPath) {
        if (aRoot === '') {
          aRoot = '.';
        }
        aRoot = aRoot.replace(/\/$/, '');
        var url = urlParse(aRoot);
        if (aPath.charAt(0) == '/' && url && url.path == '/') {
          return aPath.slice(1);
        }
        return aPath.indexOf(aRoot + '/') === 0 ? aPath.substr(aRoot.length + 1) : aPath;
      }
      exports.relative = relative;
      function toSetString(aStr) {
        return '$' + aStr;
      }
      exports.toSetString = toSetString;
      function fromSetString(aStr) {
        return aStr.substr(1);
      }
      exports.fromSetString = fromSetString;
      function strcmp(aStr1, aStr2) {
        var s1 = aStr1 || '';
        var s2 = aStr2 || '';
        return (s1 > s2) - (s1 < s2);
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp;
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp || onlyCompareOriginal) {
          return cmp;
        }
        cmp = strcmp(mappingA.name, mappingB.name);
        if (cmp) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp) {
          return cmp;
        }
        return mappingA.generatedColumn - mappingB.generatedColumn;
      }
      ;
      exports.compareByOriginalPositions = compareByOriginalPositions;
      function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
        var cmp;
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      ;
      exports.compareByGeneratedPositions = compareByGeneratedPositions;
    });
  });
  require.define('/node_modules/source-map/node_modules/amdefine/amdefine.js', function (module, exports, __dirname, __filename) {
    'use strict';
    function amdefine(module, requireFn) {
      'use strict';
      var defineCache = {}, loaderCache = {}, alreadyCalled = false, path = require('path', module), makeRequire, stringRequire;
      function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i += 1) {
          part = ary[i];
          if (part === '.') {
            ary.splice(i, 1);
            i -= 1;
          } else if (part === '..') {
            if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
              break;
            } else if (i > 0) {
              ary.splice(i - 1, 2);
              i -= 2;
            }
          }
        }
      }
      function normalize(name, baseName) {
        var baseParts;
        if (name && name.charAt(0) === '.') {
          if (baseName) {
            baseParts = baseName.split('/');
            baseParts = baseParts.slice(0, baseParts.length - 1);
            baseParts = baseParts.concat(name.split('/'));
            trimDots(baseParts);
            name = baseParts.join('/');
          }
        }
        return name;
      }
      function makeNormalize(relName) {
        return function (name) {
          return normalize(name, relName);
        };
      }
      function makeLoad(id) {
        function load(value) {
          loaderCache[id] = value;
        }
        load.fromText = function (id, text) {
          throw new Error('amdefine does not implement load.fromText');
        };
        return load;
      }
      makeRequire = function (systemRequire, exports, module, relId) {
        function amdRequire(deps, callback) {
          if (typeof deps === 'string') {
            return stringRequire(systemRequire, exports, module, deps, relId);
          } else {
            deps = deps.map(function (depName) {
              return stringRequire(systemRequire, exports, module, depName, relId);
            });
            process.nextTick(function () {
              callback.apply(null, deps);
            });
          }
        }
        amdRequire.toUrl = function (filePath) {
          if (filePath.indexOf('.') === 0) {
            return normalize(filePath, path.dirname(module.filename));
          } else {
            return filePath;
          }
        };
        return amdRequire;
      };
      requireFn = requireFn || function req() {
        return module.require.apply(module, arguments);
      };
      function runFactory(id, deps, factory) {
        var r, e, m, result;
        if (id) {
          e = loaderCache[id] = {};
          m = {
            id: id,
            uri: __filename,
            exports: e
          };
          r = makeRequire(requireFn, e, m, id);
        } else {
          if (alreadyCalled) {
            throw new Error('amdefine with no module ID cannot be called more than once per file.');
          }
          alreadyCalled = true;
          e = module.exports;
          m = module;
          r = makeRequire(requireFn, e, m, module.id);
        }
        if (deps) {
          deps = deps.map(function (depName) {
            return r(depName);
          });
        }
        if (typeof factory === 'function') {
          result = factory.apply(m.exports, deps);
        } else {
          result = factory;
        }
        if (result !== undefined) {
          m.exports = result;
          if (id) {
            loaderCache[id] = m.exports;
          }
        }
      }
      stringRequire = function (systemRequire, exports, module, id, relId) {
        var index = id.indexOf('!'), originalId = id, prefix, plugin;
        if (index === -1) {
          id = normalize(id, relId);
          if (id === 'require') {
            return makeRequire(systemRequire, exports, module, relId);
          } else if (id === 'exports') {
            return exports;
          } else if (id === 'module') {
            return module;
          } else if (loaderCache.hasOwnProperty(id)) {
            return loaderCache[id];
          } else if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
          } else {
            if (systemRequire) {
              return systemRequire(originalId);
            } else {
              throw new Error('No module with ID: ' + id);
            }
          }
        } else {
          prefix = id.substring(0, index);
          id = id.substring(index + 1, id.length);
          plugin = stringRequire(systemRequire, exports, module, prefix, relId);
          if (plugin.normalize) {
            id = plugin.normalize(id, makeNormalize(relId));
          } else {
            id = normalize(id, relId);
          }
          if (loaderCache[id]) {
            return loaderCache[id];
          } else {
            plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});
            return loaderCache[id];
          }
        }
      };
      function define(id, deps, factory) {
        if (Array.isArray(id)) {
          factory = deps;
          deps = id;
          id = undefined;
        } else if (typeof id !== 'string') {
          factory = id;
          id = deps = undefined;
        }
        if (deps && !Array.isArray(deps)) {
          factory = deps;
          deps = undefined;
        }
        if (!deps) {
          deps = [
            'require',
            'exports',
            'module'
          ];
        }
        if (id) {
          defineCache[id] = [
            id,
            deps,
            factory
          ];
        } else {
          runFactory(id, deps, factory);
        }
      }
      define.require = function (id) {
        if (loaderCache[id]) {
          return loaderCache[id];
        }
        if (defineCache[id]) {
          runFactory.apply(null, defineCache[id]);
          return loaderCache[id];
        }
      };
      define.amd = {};
      return define;
    }
    module.exports = amdefine;
  });
  require.define('/node_modules/source-map/lib/source-map/source-map-generator.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      var base64VLQ = require('/node_modules/source-map/lib/source-map/base64-vlq.js', module);
      var util = require('/node_modules/source-map/lib/source-map/util.js', module);
      var ArraySet = require('/node_modules/source-map/lib/source-map/array-set.js', module).ArraySet;
      function SourceMapGenerator(aArgs) {
        if (!aArgs) {
          aArgs = {};
        }
        this._file = util.getArg(aArgs, 'file', null);
        this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
        this._sources = new ArraySet;
        this._names = new ArraySet;
        this._mappings = [];
        this._sourcesContents = null;
      }
      SourceMapGenerator.prototype._version = 3;
      SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
            file: aSourceMapConsumer.file,
            sourceRoot: sourceRoot
          });
        aSourceMapConsumer.eachMapping(function (mapping) {
          var newMapping = {
              generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn
              }
            };
          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };
            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }
          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            generator.setSourceContent(sourceFile, content);
          }
        });
        return generator;
      };
      SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
        var generated = util.getArg(aArgs, 'generated');
        var original = util.getArg(aArgs, 'original', null);
        var source = util.getArg(aArgs, 'source', null);
        var name = util.getArg(aArgs, 'name', null);
        this._validateMapping(generated, original, source, name);
        if (source != null && !this._sources.has(source)) {
          this._sources.add(source);
        }
        if (name != null && !this._names.has(name)) {
          this._names.add(name);
        }
        this._mappings.push({
          generatedLine: generated.line,
          generatedColumn: generated.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source: source,
          name: name
        });
      };
      SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util.relative(this._sourceRoot, source);
        }
        if (aSourceContent != null) {
          if (!this._sourcesContents) {
            this._sourcesContents = {};
          }
          this._sourcesContents[util.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          delete this._sourcesContents[util.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };
      SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        var newSources = new ArraySet;
        var newNames = new ArraySet;
        this._mappings.forEach(function (mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            var original = aSourceMapConsumer.originalPositionFor({
                line: mapping.originalLine,
                column: mapping.originalColumn
              });
            if (original.source != null) {
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }
          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }
          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }
        }, this);
        this._sources = newSources;
        this._names = newNames;
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aSourceMapPath != null) {
              sourceFile = util.join(aSourceMapPath, sourceFile);
            }
            if (sourceRoot != null) {
              sourceFile = util.relative(sourceRoot, sourceFile);
            }
            this.setSourceContent(sourceFile, content);
          }
        }, this);
      };
      SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
        if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
          return;
        } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
          return;
        } else {
          throw new Error('Invalid mapping: ' + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      };
      SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = '';
        var mapping;
        this._mappings.sort(util.compareByGeneratedPositions);
        for (var i = 0, len = this._mappings.length; i < len; i++) {
          mapping = this._mappings[i];
          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              result += ';';
              previousGeneratedLine++;
            }
          } else {
            if (i > 0) {
              if (!util.compareByGeneratedPositions(mapping, this._mappings[i - 1])) {
                continue;
              }
              result += ',';
            }
          }
          result += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;
          if (mapping.source != null) {
            result += base64VLQ.encode(this._sources.indexOf(mapping.source) - previousSource);
            previousSource = this._sources.indexOf(mapping.source);
            result += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            result += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
              result += base64VLQ.encode(this._names.indexOf(mapping.name) - previousName);
              previousName = this._names.indexOf(mapping.name);
            }
          }
        }
        return result;
      };
      SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function (source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
          }
          var key = util.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
        }, this);
      };
      SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
        var map = {
            version: this._version,
            sources: this._sources.toArray(),
            names: this._names.toArray(),
            mappings: this._serializeMappings()
          };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }
        return map;
      };
      SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
        return JSON.stringify(this);
      };
      exports.SourceMapGenerator = SourceMapGenerator;
    });
  });
  require.define('/node_modules/source-map/lib/source-map/array-set.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      var util = require('/node_modules/source-map/lib/source-map/util.js', module);
      function ArraySet() {
        this._array = [];
        this._set = {};
      }
      ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set = new ArraySet;
        for (var i = 0, len = aArray.length; i < len; i++) {
          set.add(aArray[i], aAllowDuplicates);
        }
        return set;
      };
      ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var isDuplicate = this.has(aStr);
        var idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          this._set[util.toSetString(aStr)] = idx;
        }
      };
      ArraySet.prototype.has = function ArraySet_has(aStr) {
        return Object.prototype.hasOwnProperty.call(this._set, util.toSetString(aStr));
      };
      ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        if (this.has(aStr)) {
          return this._set[util.toSetString(aStr)];
        }
        throw new Error('"' + aStr + '" is not in the set.');
      };
      ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error('No element indexed by ' + aIdx);
      };
      ArraySet.prototype.toArray = function ArraySet_toArray() {
        return this._array.slice();
      };
      exports.ArraySet = ArraySet;
    });
  });
  require.define('/node_modules/source-map/lib/source-map/base64-vlq.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      var base64 = require('/node_modules/source-map/lib/source-map/base64.js', module);
      var VLQ_BASE_SHIFT = 5;
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
      var VLQ_BASE_MASK = VLQ_BASE - 1;
      var VLQ_CONTINUATION_BIT = VLQ_BASE;
      function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
      }
      function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
      }
      exports.encode = function base64VLQ_encode(aValue) {
        var encoded = '';
        var digit;
        var vlq = toVLQSigned(aValue);
        do {
          digit = vlq & VLQ_BASE_MASK;
          vlq >>>= VLQ_BASE_SHIFT;
          if (vlq > 0) {
            digit |= VLQ_CONTINUATION_BIT;
          }
          encoded += base64.encode(digit);
        } while (vlq > 0);
        return encoded;
      };
      exports.decode = function base64VLQ_decode(aStr, aOutParam) {
        var i = 0;
        var strLen = aStr.length;
        var result = 0;
        var shift = 0;
        var continuation, digit;
        do {
          if (i >= strLen) {
            throw new Error('Expected more digits in base 64 VLQ value.');
          }
          digit = base64.decode(aStr.charAt(i++));
          continuation = !!(digit & VLQ_CONTINUATION_BIT);
          digit &= VLQ_BASE_MASK;
          result = result + (digit << shift);
          shift += VLQ_BASE_SHIFT;
        } while (continuation);
        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aStr.slice(i);
      };
    });
  });
  require.define('/node_modules/source-map/lib/source-map/base64.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      var charToIntMap = {};
      var intToCharMap = {};
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('').forEach(function (ch, index) {
        charToIntMap[ch] = index;
        intToCharMap[index] = ch;
      });
      exports.encode = function base64_encode(aNumber) {
        if (aNumber in intToCharMap) {
          return intToCharMap[aNumber];
        }
        throw new TypeError('Must be between 0 and 63: ' + aNumber);
      };
      exports.decode = function base64_decode(aChar) {
        if (aChar in charToIntMap) {
          return charToIntMap[aChar];
        }
        throw new TypeError('Not a valid base 64 digit: ' + aChar);
      };
    });
  });
  require.define('/node_modules/source-map/lib/source-map/source-map-consumer.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      var util = require('/node_modules/source-map/lib/source-map/util.js', module);
      var binarySearch = require('/node_modules/source-map/lib/source-map/binary-search.js', module);
      var ArraySet = require('/node_modules/source-map/lib/source-map/array-set.js', module).ArraySet;
      var base64VLQ = require('/node_modules/source-map/lib/source-map/base64-vlq.js', module);
      function SourceMapConsumer(aSourceMap) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === 'string') {
          sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
        }
        var version = util.getArg(sourceMap, 'version');
        var sources = util.getArg(sourceMap, 'sources');
        var names = util.getArg(sourceMap, 'names', []);
        var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
        var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
        var mappings = util.getArg(sourceMap, 'mappings');
        var file = util.getArg(sourceMap, 'file', null);
        if (version != this._version) {
          throw new Error('Unsupported version: ' + version);
        }
        sources = sources.map(util.normalize);
        this._names = ArraySet.fromArray(names, true);
        this._sources = ArraySet.fromArray(sources, true);
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
        this._mappings = mappings;
        this.file = file;
      }
      SourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
        var smc = Object.create(SourceMapConsumer.prototype);
        smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
        smc.file = aSourceMap._file;
        smc.__generatedMappings = aSourceMap._mappings.slice().sort(util.compareByGeneratedPositions);
        smc.__originalMappings = aSourceMap._mappings.slice().sort(util.compareByOriginalPositions);
        return smc;
      };
      SourceMapConsumer.prototype._version = 3;
      Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
        get: function () {
          return this._sources.toArray().map(function (s) {
            return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
          }, this);
        }
      });
      SourceMapConsumer.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
        get: function () {
          if (!this.__generatedMappings) {
            this.__generatedMappings = [];
            this.__originalMappings = [];
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__generatedMappings;
        }
      });
      SourceMapConsumer.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
        get: function () {
          if (!this.__originalMappings) {
            this.__generatedMappings = [];
            this.__originalMappings = [];
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__originalMappings;
        }
      });
      SourceMapConsumer.prototype._nextCharIsMappingSeparator = function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
        var c = aStr.charAt(0);
        return c === ';' || c === ',';
      };
      SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var str = aStr;
        var temp = {};
        var mapping;
        while (str.length > 0) {
          if (str.charAt(0) === ';') {
            generatedLine++;
            str = str.slice(1);
            previousGeneratedColumn = 0;
          } else if (str.charAt(0) === ',') {
            str = str.slice(1);
          } else {
            mapping = {};
            mapping.generatedLine = generatedLine;
            base64VLQ.decode(str, temp);
            mapping.generatedColumn = previousGeneratedColumn + temp.value;
            previousGeneratedColumn = mapping.generatedColumn;
            str = temp.rest;
            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
              base64VLQ.decode(str, temp);
              mapping.source = this._sources.at(previousSource + temp.value);
              previousSource += temp.value;
              str = temp.rest;
              if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
                throw new Error('Found a source, but no line and column');
              }
              base64VLQ.decode(str, temp);
              mapping.originalLine = previousOriginalLine + temp.value;
              previousOriginalLine = mapping.originalLine;
              mapping.originalLine += 1;
              str = temp.rest;
              if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
                throw new Error('Found a source and line, but no column');
              }
              base64VLQ.decode(str, temp);
              mapping.originalColumn = previousOriginalColumn + temp.value;
              previousOriginalColumn = mapping.originalColumn;
              str = temp.rest;
              if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
                base64VLQ.decode(str, temp);
                mapping.name = this._names.at(previousName + temp.value);
                previousName += temp.value;
                str = temp.rest;
              }
            }
            this.__generatedMappings.push(mapping);
            if (typeof mapping.originalLine === 'number') {
              this.__originalMappings.push(mapping);
            }
          }
        }
        this.__generatedMappings.sort(util.compareByGeneratedPositions);
        this.__originalMappings.sort(util.compareByOriginalPositions);
      };
      SourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator) {
        if (aNeedle[aLineName] <= 0) {
          throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
        }
        return binarySearch.search(aNeedle, aMappings, aComparator);
      };
      SourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for (var index = 0; index < this._generatedMappings.length; ++index) {
          var mapping = this._generatedMappings[index];
          if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }
          mapping.lastGeneratedColumn = Infinity;
        }
      };
      SourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
            generatedLine: util.getArg(aArgs, 'line'),
            generatedColumn: util.getArg(aArgs, 'column')
          };
        var index = this._findMapping(needle, this._generatedMappings, 'generatedLine', 'generatedColumn', util.compareByGeneratedPositions);
        if (index >= 0) {
          var mapping = this._generatedMappings[index];
          if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, 'source', null);
            if (source != null && this.sourceRoot != null) {
              source = util.join(this.sourceRoot, source);
            }
            return {
              source: source,
              line: util.getArg(mapping, 'originalLine', null),
              column: util.getArg(mapping, 'originalColumn', null),
              name: util.getArg(mapping, 'name', null)
            };
          }
        }
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };
      SourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource) {
        if (!this.sourcesContent) {
          return null;
        }
        if (this.sourceRoot != null) {
          aSource = util.relative(this.sourceRoot, aSource);
        }
        if (this._sources.has(aSource)) {
          return this.sourcesContent[this._sources.indexOf(aSource)];
        }
        var url;
        if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
          var fileUriAbsPath = aSource.replace(/^file:\/\//, '');
          if (url.scheme == 'file' && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }
          if ((!url.path || url.path == '/') && this._sources.has('/' + aSource)) {
            return this.sourcesContent[this._sources.indexOf('/' + aSource)];
          }
        }
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      };
      SourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var needle = {
            source: util.getArg(aArgs, 'source'),
            originalLine: util.getArg(aArgs, 'line'),
            originalColumn: util.getArg(aArgs, 'column')
          };
        if (this.sourceRoot != null) {
          needle.source = util.relative(this.sourceRoot, needle.source);
        }
        var index = this._findMapping(needle, this._originalMappings, 'originalLine', 'originalColumn', util.compareByOriginalPositions);
        if (index >= 0) {
          var mapping = this._originalMappings[index];
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };
      SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var needle = {
            source: util.getArg(aArgs, 'source'),
            originalLine: util.getArg(aArgs, 'line'),
            originalColumn: Infinity
          };
        if (this.sourceRoot != null) {
          needle.source = util.relative(this.sourceRoot, needle.source);
        }
        var mappings = [];
        var index = this._findMapping(needle, this._originalMappings, 'originalLine', 'originalColumn', util.compareByOriginalPositions);
        if (index >= 0) {
          var mapping = this._originalMappings[index];
          while (mapping && mapping.originalLine === needle.originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });
            mapping = this._originalMappings[--index];
          }
        }
        return mappings.reverse();
      };
      SourceMapConsumer.GENERATED_ORDER = 1;
      SourceMapConsumer.ORIGINAL_ORDER = 2;
      SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
        var mappings;
        switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error('Unknown order of iteration.');
        }
        var sourceRoot = this.sourceRoot;
        mappings.map(function (mapping) {
          var source = mapping.source;
          if (source != null && sourceRoot != null) {
            source = util.join(sourceRoot, source);
          }
          return {
            source: source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name
          };
        }).forEach(aCallback, context);
      };
      exports.SourceMapConsumer = SourceMapConsumer;
    });
  });
  require.define('/node_modules/source-map/lib/source-map/binary-search.js', function (module, exports, __dirname, __filename) {
    if (typeof define !== 'function') {
      var define = require('/node_modules/source-map/node_modules/amdefine/amdefine.js', module)(module, require);
    }
    define(function (require, exports, module) {
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
          }
          return mid;
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
          }
          return aLow < 0 ? -1 : aLow;
        }
      }
      exports.search = function search(aNeedle, aHaystack, aCompare) {
        if (aHaystack.length === 0) {
          return -1;
        }
        return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare);
      };
    });
  });
  require.define('/node_modules/esutils/lib/utils.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      exports.ast = require('/node_modules/esutils/lib/ast.js', module);
      exports.code = require('/node_modules/esutils/lib/code.js', module);
      exports.keyword = require('/node_modules/esutils/lib/keyword.js', module);
    }());
  });
  require.define('/node_modules/esutils/lib/keyword.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      var code = require('/node_modules/esutils/lib/code.js', module);
      function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
          return true;
        default:
          return false;
        }
      }
      function isKeywordES5(id, strict) {
        if (!strict && id === 'yield') {
          return false;
        }
        return isKeywordES6(id, strict);
      }
      function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
          return true;
        }
        switch (id.length) {
        case 2:
          return id === 'if' || id === 'in' || id === 'do';
        case 3:
          return id === 'var' || id === 'for' || id === 'new' || id === 'try';
        case 4:
          return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
        case 5:
          return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
        case 6:
          return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
        case 7:
          return id === 'default' || id === 'finally' || id === 'extends';
        case 8:
          return id === 'function' || id === 'continue' || id === 'debugger';
        case 10:
          return id === 'instanceof';
        default:
          return false;
        }
      }
      function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
      }
      function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
      }
      function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
      }
      function isIdentifierName(id) {
        var i, iz, ch;
        if (id.length === 0) {
          return false;
        }
        ch = id.charCodeAt(0);
        if (!code.isIdentifierStart(ch) || ch === 92) {
          return false;
        }
        for (i = 1, iz = id.length; i < iz; ++i) {
          ch = id.charCodeAt(i);
          if (!code.isIdentifierPart(ch) || ch === 92) {
            return false;
          }
        }
        return true;
      }
      function isIdentifierES5(id, strict) {
        return isIdentifierName(id) && !isReservedWordES5(id, strict);
      }
      function isIdentifierES6(id, strict) {
        return isIdentifierName(id) && !isReservedWordES6(id, strict);
      }
      module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierName: isIdentifierName,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
      };
    }());
  });
  require.define('/node_modules/esutils/lib/code.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      var Regex, NON_ASCII_WHITESPACES;
      Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
      };
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      function isHexDigit(ch) {
        return isDecimalDigit(ch) || 97 <= ch && ch <= 102 || 65 <= ch && ch <= 70;
      }
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      NON_ASCII_WHITESPACES = [
        5760,
        6158,
        8192,
        8193,
        8194,
        8195,
        8196,
        8197,
        8198,
        8199,
        8200,
        8201,
        8202,
        8239,
        8287,
        12288,
        65279
      ];
      function isWhiteSpace(ch) {
        return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
      }
      function isLineTerminator(ch) {
        return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
      }
      function isIdentifierStart(ch) {
        return ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90 || ch === 36 || ch === 95 || ch === 92 || ch >= 128 && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch));
      }
      function isIdentifierPart(ch) {
        return ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90 || ch >= 48 && ch <= 57 || ch === 36 || ch === 95 || ch === 92 || ch >= 128 && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch));
      }
      module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStart: isIdentifierStart,
        isIdentifierPart: isIdentifierPart
      };
    }());
  });
  require.define('/node_modules/esutils/lib/ast.js', function (module, exports, __dirname, __filename) {
    (function () {
      'use strict';
      function isExpression(node) {
        if (node == null) {
          return false;
        }
        switch (node.type) {
        case 'ArrayExpression':
        case 'AssignmentExpression':
        case 'BinaryExpression':
        case 'CallExpression':
        case 'ConditionalExpression':
        case 'FunctionExpression':
        case 'Identifier':
        case 'Literal':
        case 'LogicalExpression':
        case 'MemberExpression':
        case 'NewExpression':
        case 'ObjectExpression':
        case 'SequenceExpression':
        case 'ThisExpression':
        case 'UnaryExpression':
        case 'UpdateExpression':
          return true;
        }
        return false;
      }
      function isIterationStatement(node) {
        if (node == null) {
          return false;
        }
        switch (node.type) {
        case 'DoWhileStatement':
        case 'ForInStatement':
        case 'ForStatement':
        case 'WhileStatement':
          return true;
        }
        return false;
      }
      function isStatement(node) {
        if (node == null) {
          return false;
        }
        switch (node.type) {
        case 'BlockStatement':
        case 'BreakStatement':
        case 'ContinueStatement':
        case 'DebuggerStatement':
        case 'DoWhileStatement':
        case 'EmptyStatement':
        case 'ExpressionStatement':
        case 'ForInStatement':
        case 'ForStatement':
        case 'IfStatement':
        case 'LabeledStatement':
        case 'ReturnStatement':
        case 'SwitchStatement':
        case 'ThrowStatement':
        case 'TryStatement':
        case 'VariableDeclaration':
        case 'WhileStatement':
        case 'WithStatement':
          return true;
        }
        return false;
      }
      function isSourceElement(node) {
        return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
      }
      function trailingStatement(node) {
        switch (node.type) {
        case 'IfStatement':
          if (node.alternate != null) {
            return node.alternate;
          }
          return node.consequent;
        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
          return node.body;
        }
        return null;
      }
      function isProblematicIfStatement(node) {
        var current;
        if (node.type !== 'IfStatement') {
          return false;
        }
        if (node.alternate == null) {
          return false;
        }
        current = node.consequent;
        do {
          if (current.type === 'IfStatement') {
            if (current.alternate == null) {
              return true;
            }
          }
          current = trailingStatement(current);
        } while (current);
        return false;
      }
      module.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,
        trailingStatement: trailingStatement
      };
    }());
  });
  require.define('/node_modules/estraverse/estraverse.js', function (module, exports, __dirname, __filename) {
    (function (root, factory) {
      'use strict';
      if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
      } else if (typeof exports !== 'undefined') {
        factory(exports);
      } else {
        factory(root.estraverse = {});
      }
    }(this, function (exports) {
      'use strict';
      var Syntax, isArray, VisitorOption, VisitorKeys, objectCreate, objectKeys, BREAK, SKIP, REMOVE;
      function ignoreJSHintError() {
      }
      isArray = Array.isArray;
      if (!isArray) {
        isArray = function isArray(array) {
          return Object.prototype.toString.call(array) === '[object Array]';
        };
      }
      function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            val = obj[key];
            if (typeof val === 'object' && val !== null) {
              ret[key] = deepCopy(val);
            } else {
              ret[key] = val;
            }
          }
        }
        return ret;
      }
      function shallowCopy(obj) {
        var ret = {}, key;
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            ret[key] = obj[key];
          }
        }
        return ret;
      }
      ignoreJSHintError(shallowCopy);
      function upperBound(array, func) {
        var diff, len, i, current;
        len = array.length;
        i = 0;
        while (len) {
          diff = len >>> 1;
          current = i + diff;
          if (func(array[current])) {
            len = diff;
          } else {
            i = current + 1;
            len -= diff + 1;
          }
        }
        return i;
      }
      function lowerBound(array, func) {
        var diff, len, i, current;
        len = array.length;
        i = 0;
        while (len) {
          diff = len >>> 1;
          current = i + diff;
          if (func(array[current])) {
            i = current + 1;
            len -= diff + 1;
          } else {
            len = diff;
          }
        }
        return i;
      }
      ignoreJSHintError(lowerBound);
      objectCreate = Object.create || function () {
        function F() {
        }
        return function (o) {
          F.prototype = o;
          return new F;
        };
      }();
      objectKeys = Object.keys || function (o) {
        var keys = [], key;
        for (key in o) {
          keys.push(key);
        }
        return keys;
      };
      function extend(to, from) {
        objectKeys(from).forEach(function (key) {
          to[key] = from[key];
        });
        return to;
      }
      Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportBatchSpecifier: 'ExportBatchSpecifier',
        ExportDeclaration: 'ExportDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
      };
      VisitorKeys = {
        AssignmentExpression: [
          'left',
          'right'
        ],
        ArrayExpression: ['elements'],
        ArrayPattern: ['elements'],
        ArrowFunctionExpression: [
          'params',
          'defaults',
          'rest',
          'body'
        ],
        AwaitExpression: ['argument'],
        BlockStatement: ['body'],
        BinaryExpression: [
          'left',
          'right'
        ],
        BreakStatement: ['label'],
        CallExpression: [
          'callee',
          'arguments'
        ],
        CatchClause: [
          'param',
          'body'
        ],
        ClassBody: ['body'],
        ClassDeclaration: [
          'id',
          'body',
          'superClass'
        ],
        ClassExpression: [
          'id',
          'body',
          'superClass'
        ],
        ComprehensionBlock: [
          'left',
          'right'
        ],
        ComprehensionExpression: [
          'blocks',
          'filter',
          'body'
        ],
        ConditionalExpression: [
          'test',
          'consequent',
          'alternate'
        ],
        ContinueStatement: ['label'],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: [
          'body',
          'test'
        ],
        EmptyStatement: [],
        ExportBatchSpecifier: [],
        ExportDeclaration: [
          'declaration',
          'specifiers',
          'source'
        ],
        ExportSpecifier: [
          'id',
          'name'
        ],
        ExpressionStatement: ['expression'],
        ForStatement: [
          'init',
          'test',
          'update',
          'body'
        ],
        ForInStatement: [
          'left',
          'right',
          'body'
        ],
        ForOfStatement: [
          'left',
          'right',
          'body'
        ],
        FunctionDeclaration: [
          'id',
          'params',
          'defaults',
          'rest',
          'body'
        ],
        FunctionExpression: [
          'id',
          'params',
          'defaults',
          'rest',
          'body'
        ],
        GeneratorExpression: [
          'blocks',
          'filter',
          'body'
        ],
        Identifier: [],
        IfStatement: [
          'test',
          'consequent',
          'alternate'
        ],
        ImportDeclaration: [
          'specifiers',
          'source'
        ],
        ImportDefaultSpecifier: ['id'],
        ImportNamespaceSpecifier: ['id'],
        ImportSpecifier: [
          'id',
          'name'
        ],
        Literal: [],
        LabeledStatement: [
          'label',
          'body'
        ],
        LogicalExpression: [
          'left',
          'right'
        ],
        MemberExpression: [
          'object',
          'property'
        ],
        MethodDefinition: [
          'key',
          'value'
        ],
        ModuleSpecifier: [],
        NewExpression: [
          'callee',
          'arguments'
        ],
        ObjectExpression: ['properties'],
        ObjectPattern: ['properties'],
        Program: ['body'],
        Property: [
          'key',
          'value'
        ],
        ReturnStatement: ['argument'],
        SequenceExpression: ['expressions'],
        SpreadElement: ['argument'],
        SwitchStatement: [
          'discriminant',
          'cases'
        ],
        SwitchCase: [
          'test',
          'consequent'
        ],
        TaggedTemplateExpression: [
          'tag',
          'quasi'
        ],
        TemplateElement: [],
        TemplateLiteral: [
          'quasis',
          'expressions'
        ],
        ThisExpression: [],
        ThrowStatement: ['argument'],
        TryStatement: [
          'block',
          'handlers',
          'handler',
          'guardedHandlers',
          'finalizer'
        ],
        UnaryExpression: ['argument'],
        UpdateExpression: ['argument'],
        VariableDeclaration: ['declarations'],
        VariableDeclarator: [
          'id',
          'init'
        ],
        WhileStatement: [
          'test',
          'body'
        ],
        WithStatement: [
          'object',
          'body'
        ],
        YieldExpression: ['argument']
      };
      BREAK = {};
      SKIP = {};
      REMOVE = {};
      VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
      };
      function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
      }
      Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
      };
      Reference.prototype.remove = function remove() {
        if (isArray(this.parent)) {
          this.parent.splice(this.key, 1);
          return true;
        } else {
          this.replace(null);
          return false;
        }
      };
      function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
      }
      function Controller() {
      }
      Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;
        function addToPath(result, path) {
          if (isArray(path)) {
            for (j = 0, jz = path.length; j < jz; ++j) {
              result.push(path[j]);
            }
          } else {
            result.push(path);
          }
        }
        if (!this.__current.path) {
          return null;
        }
        result = [];
        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
          element = this.__leavelist[i];
          addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
      };
      Controller.prototype.type = function () {
        var node = this.current();
        return node.type || this.__current.wrap;
      };
      Controller.prototype.parents = function parents() {
        var i, iz, result;
        result = [];
        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
          result.push(this.__leavelist[i].node);
        }
        return result;
      };
      Controller.prototype.current = function current() {
        return this.__current.node;
      };
      Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;
        result = undefined;
        previous = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
          result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;
        return result;
      };
      Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
      };
      Controller.prototype.skip = function () {
        this.notify(SKIP);
      };
      Controller.prototype['break'] = function () {
        this.notify(BREAK);
      };
      Controller.prototype.remove = function () {
        this.notify(REMOVE);
      };
      Controller.prototype.__initialize = function (root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = visitor.fallback === 'iteration';
        this.__keys = VisitorKeys;
        if (visitor.keys) {
          this.__keys = extend(objectCreate(this.__keys), visitor.keys);
        }
      };
      function isNode(node) {
        if (node == null) {
          return false;
        }
        return typeof node === 'object' && typeof node.type === 'string';
      }
      function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
      }
      Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
        this.__initialize(root, visitor);
        sentinel = {};
        worklist = this.__worklist;
        leavelist = this.__leavelist;
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));
        while (worklist.length) {
          element = worklist.pop();
          if (element === sentinel) {
            element = leavelist.pop();
            ret = this.__execute(visitor.leave, element);
            if (this.__state === BREAK || ret === BREAK) {
              return;
            }
            continue;
          }
          if (element.node) {
            ret = this.__execute(visitor.enter, element);
            if (this.__state === BREAK || ret === BREAK) {
              return;
            }
            worklist.push(sentinel);
            leavelist.push(element);
            if (this.__state === SKIP || ret === SKIP) {
              continue;
            }
            node = element.node;
            nodeType = element.wrap || node.type;
            candidates = this.__keys[nodeType];
            if (!candidates) {
              if (this.__fallback) {
                candidates = objectKeys(node);
              } else {
                throw new Error('Unknown node type ' + nodeType + '.');
              }
            }
            current = candidates.length;
            while ((current -= 1) >= 0) {
              key = candidates[current];
              candidate = node[key];
              if (!candidate) {
                continue;
              }
              if (isArray(candidate)) {
                current2 = candidate.length;
                while ((current2 -= 1) >= 0) {
                  if (!candidate[current2]) {
                    continue;
                  }
                  if (isProperty(nodeType, candidates[current])) {
                    element = new Element(candidate[current2], [
                      key,
                      current2
                    ], 'Property', null);
                  } else if (isNode(candidate[current2])) {
                    element = new Element(candidate[current2], [
                      key,
                      current2
                    ], null, null);
                  } else {
                    continue;
                  }
                  worklist.push(element);
                }
              } else if (isNode(candidate)) {
                worklist.push(new Element(candidate, key, null, null));
              }
            }
          }
        }
      };
      Controller.prototype.replace = function replace(root, visitor) {
        function removeElem(element) {
          var i, key, nextElem, parent;
          if (element.ref.remove()) {
            key = element.ref.key;
            parent = element.ref.parent;
            i = worklist.length;
            while (i--) {
              nextElem = worklist[i];
              if (nextElem.ref && nextElem.ref.parent === parent) {
                if (nextElem.ref.key < key) {
                  break;
                }
                --nextElem.ref.key;
              }
            }
          }
        }
        var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
        this.__initialize(root, visitor);
        sentinel = {};
        worklist = this.__worklist;
        leavelist = this.__leavelist;
        outer = { root: root };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);
        while (worklist.length) {
          element = worklist.pop();
          if (element === sentinel) {
            element = leavelist.pop();
            target = this.__execute(visitor.leave, element);
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
              element.ref.replace(target);
            }
            if (this.__state === REMOVE || target === REMOVE) {
              removeElem(element);
            }
            if (this.__state === BREAK || target === BREAK) {
              return outer.root;
            }
            continue;
          }
          target = this.__execute(visitor.enter, element);
          if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
            element.ref.replace(target);
            element.node = target;
          }
          if (this.__state === REMOVE || target === REMOVE) {
            removeElem(element);
            element.node = null;
          }
          if (this.__state === BREAK || target === BREAK) {
            return outer.root;
          }
          node = element.node;
          if (!node) {
            continue;
          }
          worklist.push(sentinel);
          leavelist.push(element);
          if (this.__state === SKIP || target === SKIP) {
            continue;
          }
          nodeType = element.wrap || node.type;
          candidates = this.__keys[nodeType];
          if (!candidates) {
            if (this.__fallback) {
              candidates = objectKeys(node);
            } else {
              throw new Error('Unknown node type ' + nodeType + '.');
            }
          }
          current = candidates.length;
          while ((current -= 1) >= 0) {
            key = candidates[current];
            candidate = node[key];
            if (!candidate) {
              continue;
            }
            if (isArray(candidate)) {
              current2 = candidate.length;
              while ((current2 -= 1) >= 0) {
                if (!candidate[current2]) {
                  continue;
                }
                if (isProperty(nodeType, candidates[current])) {
                  element = new Element(candidate[current2], [
                    key,
                    current2
                  ], 'Property', new Reference(candidate, current2));
                } else if (isNode(candidate[current2])) {
                  element = new Element(candidate[current2], [
                    key,
                    current2
                  ], null, new Reference(candidate, current2));
                } else {
                  continue;
                }
                worklist.push(element);
              }
            } else if (isNode(candidate)) {
              worklist.push(new Element(candidate, key, null, new Reference(node, key)));
            }
          }
        }
        return outer.root;
      };
      function traverse(root, visitor) {
        var controller = new Controller;
        return controller.traverse(root, visitor);
      }
      function replace(root, visitor) {
        var controller = new Controller;
        return controller.replace(root, visitor);
      }
      function extendCommentRange(comment, tokens) {
        var target;
        target = upperBound(tokens, function search(token) {
          return token.range[0] > comment.range[0];
        });
        comment.extendedRange = [
          comment.range[0],
          comment.range[1]
        ];
        if (target !== tokens.length) {
          comment.extendedRange[1] = tokens[target].range[0];
        }
        target -= 1;
        if (target >= 0) {
          comment.extendedRange[0] = tokens[target].range[1];
        }
        return comment;
      }
      function attachComments(tree, providedComments, tokens) {
        var comments = [], comment, len, i, cursor;
        if (!tree.range) {
          throw new Error('attachComments needs range information');
        }
        if (!tokens.length) {
          if (providedComments.length) {
            for (i = 0, len = providedComments.length; i < len; i += 1) {
              comment = deepCopy(providedComments[i]);
              comment.extendedRange = [
                0,
                tree.range[0]
              ];
              comments.push(comment);
            }
            tree.leadingComments = comments;
          }
          return tree;
        }
        for (i = 0, len = providedComments.length; i < len; i += 1) {
          comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }
        cursor = 0;
        traverse(tree, {
          enter: function (node) {
            var comment;
            while (cursor < comments.length) {
              comment = comments[cursor];
              if (comment.extendedRange[1] > node.range[0]) {
                break;
              }
              if (comment.extendedRange[1] === node.range[0]) {
                if (!node.leadingComments) {
                  node.leadingComments = [];
                }
                node.leadingComments.push(comment);
                comments.splice(cursor, 1);
              } else {
                cursor += 1;
              }
            }
            if (cursor === comments.length) {
              return VisitorOption.Break;
            }
            if (comments[cursor].extendedRange[0] > node.range[1]) {
              return VisitorOption.Skip;
            }
          }
        });
        cursor = 0;
        traverse(tree, {
          leave: function (node) {
            var comment;
            while (cursor < comments.length) {
              comment = comments[cursor];
              if (node.range[1] < comment.extendedRange[0]) {
                break;
              }
              if (node.range[1] === comment.extendedRange[0]) {
                if (!node.trailingComments) {
                  node.trailingComments = [];
                }
                node.trailingComments.push(comment);
                comments.splice(cursor, 1);
              } else {
                cursor += 1;
              }
            }
            if (cursor === comments.length) {
              return VisitorOption.Break;
            }
            if (comments[cursor].extendedRange[0] > node.range[1]) {
              return VisitorOption.Skip;
            }
          }
        });
        return tree;
      }
      exports.version = '1.8.1-dev';
      exports.Syntax = Syntax;
      exports.traverse = traverse;
      exports.replace = replace;
      exports.attachComments = attachComments;
      exports.VisitorKeys = VisitorKeys;
      exports.VisitorOption = VisitorOption;
      exports.Controller = Controller;
    }));
  });
  require('/tools/entry-point.js');
}.call(this, this));

(function() {
  var $;

  $ = jQuery;

  $.bootstrapGrowl = function(message, options) {
    var $alert, css, offsetAmount;
    options = $.extend({}, $.bootstrapGrowl.default_options, options);
    $alert = $("<div>");
    $alert.attr("class", "bootstrap-growl alert");
    if (options.type) {
      $alert.addClass("alert-" + options.type);
    }
    if (options.allow_dismiss) {
      $alert.addClass("alert-dismissible");
      $alert.append("<button  class=\"close\" data-dismiss=\"alert\" type=\"button\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>");
    }
    $alert.append(message);
    if (options.top_offset) {
      options.offset = {
        from: "top",
        amount: options.top_offset
      };
    }
    offsetAmount = options.offset.amount;
    $(".bootstrap-growl").each(function() {
      return offsetAmount = Math.max(offsetAmount, parseInt($(this).css(options.offset.from)) + $(this).outerHeight() + options.stackup_spacing);
    });
    css = {
      "position": (options.ele === "body" ? "fixed" : "absolute"),
      "margin": 0,
      "z-index": "9999",
      "display": "none"
    };
    css[options.offset.from] = offsetAmount + "px";
    $alert.css(css);
    if (options.width !== "auto") {
      $alert.css("width", options.width + "px");
    }
    $(options.ele).append($alert);
    switch (options.align) {
      case "center":
        $alert.css({
          "left": "50%",
          "margin-left": "-" + ($alert.outerWidth() / 2) + "px"
        });
        break;
      case "left":
        $alert.css("left", "20px");
        break;
      default:
        $alert.css("right", "20px");
    }
    $alert.fadeIn();
    if (options.delay > 0) {
      $alert.delay(options.delay).fadeOut(function() {
        return $(this).alert("close");
      });
    }
    return $alert;
  };

  $.bootstrapGrowl.default_options = {
    ele: "body",
    type: "info",
    offset: {
      from: "top",
      amount: 20
    },
    align: "right",
    width: 250,
    delay: 4000,
    allow_dismiss: true,
    stackup_spacing: 10
  };

}).call(this);

(function(){var n,t,e,r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w,b,y,k,x,C,S,q,N,W,T,O,E,Y,X,I,M,z,A,P,F,j,L,R,B,V,D,H,G,U,K,J,Q,Z,nn,tn,en,rn,on,un,an,sn,cn,ln,fn,hn,dn,pn,vn,gn,mn,wn,bn,yn,_n,kn,xn,Cn,Sn,qn,Nn,Wn,Tn,On,En,Yn,Xn,In,Mn,zn,An,Pn,Fn,jn,Ln,Rn,Bn,Vn,Dn,Hn,$n,Gn,Un,Kn,Jn,Qn,Zn,nt,tt,et,rt,it,ot,ut,at,st,ct,lt,ft,ht,dt,pt,vt,gt,mt,wt,bt,yt,_t,kt,xt,Ct,St,qt,Nt,Wt,Tt,Ot,Et,Yt,Xt,It,Mt,zt,At,Pt,Ft,jt,Lt,Rt,Bt,Vt,Dt,Ht,$t,Gt,Ut,Kt,Jt,Qt,Zt,ne,te,ee,re,ie,oe,ue,ae,se,ce,le,fe,he,de,pe,ve,ge,me,we,be,ye,_e,ke,xe,Ce,Se,qe,Ne,We,Te,Oe,Ee,Ye,Xe,Ie,Me,ze,Ae,Pe,Fe,je,Le,Re,Be,Ve,De,He,$e,Ge,Ue,Ke,Je,Qe,Ze,nr,tr,er,rr,ir,or,ur,ar,sr,cr,lr,fr,hr,dr,pr,vr,gr,mr,wr,br,yr,_r,kr,xr,Cr,Sr,qr,Nr,Wr,Tr,Or,Er,Yr,Xr,Ir,Mr,zr,Ar,Pr,Fr,jr,Lr,Rr,Br,Vr,Dr,Hr,$r,Gr,Ur,Kr,Jr,Qr,Zr,ni,ti,ei,ri,ii,oi,ui,ai,si,ci,li,fi,hi,di,pi,vi,gi,mi,wi,bi,yi,_i,ki,xi,Ci,Si,qi,Ni,Wi,Ti,Oi,Ei,Yi,Xi,Ii,Mi,zi,Ai,Pi,Fi,ji,Li,Ri,Bi,Vi,Di,Hi,$i,Gi,Ui,Ki,Ji,Qi,Zi,no,to,eo,ro,io,oo,uo,ao,so,co,lo,fo,ho,po,vo,go,mo,wo,bo,yo,_o,ko,xo,Co,So,qo,No,Wo,To,Oo,Eo,Yo,Xo,Io,Mo,zo,Ao,Po,Fo,jo,Lo,Ro,Bo,Vo,Do,Ho,$o,Go,Uo,Ko,Jo,Qo,Zo,nu,tu,eu,ru,iu,ou,uu,au,su,cu,lu,fu,hu,du,pu,vu,gu,mu,wu,bu,yu,_u,ku,xu,Cu,Su,qu,Nu,Wu,Tu,Ou=[].slice,Eu=function(n,t){function e(){this.constructor=n}for(var r in t)Yu.call(t,r)&&(n[r]=t[r]);return e.prototype=t.prototype,n.prototype=new e,n.__super__=t.prototype,n},Yu={}.hasOwnProperty;Wu=Math.PI,Tu=2*Wu,fn=Wu/2,Nu=1e-6,Q=Nu*Nu,$n=Wu/180,B=180/Wu,Pt=Math.tan(30*$n),_t=Math.sqrt(3),C=16581375,Rt="transparent",On="&middot;",At="undefined",Yt="null",Wt="Boolean",zt="String",Xt="Number",Et="Function",It="Object",Nt="Array",qt="Arguments",Tt="Date",Mt="RegExp",Ot="Error",Su=function(n){var t;if(t=Object.prototype.toString.call(n),null===n)return Yt;if(void 0===n)return At;if(n===!0||n===!1||"[object Boolean]"===t)return Wt;switch(t){case"[object String]":return zt;case"[object Number]":return Xt;case"[object Function]":return Et;case"[object Object]":return It;case"[object Array]":return Nt;case"[object Arguments]":return qt;case"[object Date]":return Tt;case"[object RegExp]":return Mt;case"[object Error]":return Ot;default:return t}},Tn=function(){function n(n,t){this.match=n,this.func=t}return n}(),Er=function(){var n,t;return n=function(t){var e,r,i;switch(r=Su(t)){case At:return function(n){return void 0===n};case Yt:return function(n){return null===n};case Wt:return function(n){return t===Boolean||n===t};case zt:return function(n){return t===String||n===t};case Xt:return function(n){return t===Number||n===t||_.isNaN(n)&&_.isNaN(t)};case Mt:return function(){return t===RegExp};case Error:return function(){return t===Error};case Tt:return function(n){return t===Date||n===t};case Nt:return 1===t.length&&Et===(i=Su(t[0]))?(e=n(t[0]),function(n){var t,r,i;if(Nt!==Su(n))return!1;for(t=0,r=n.length;r>t;t++)if(i=n[t],!e(i))return!1;return!0}):function(n){return t===Array||be(t,n)};case Et:return function(n){var e;return n instanceof t?!0:n&&n.constructor===t?!0:(e=Su(n),t===Boolean&&e===Wt||t===String&&e===zt||t===Number&&e===Xt)};case It:return function(n){var e,r;for(e in t)if(r=t[e],n[e]!==r)return!1;return!0};default:return function(){return!1}}},t=function(t){var e;return e=_.map(t,n),function(n){var t,r,i,o;if(0===n.length)return!1;if(n.length!==e.length)return!1;for(r=i=0,o=e.length;o>i;r=++i)if(t=e[r],!t(n[r]))return!1;return!0}},function(){var n,e;return n=1<=arguments.length?Ou.call(arguments,0):[],e=_.map(n,function(n){var e,r,i;return i=2<=n.length?Ou.call(n,0,r=n.length-1):(r=0,[]),e=n[r++],new Tn(t(i),e)}),function(){var n,t,r,i;for(n=1<=arguments.length?Ou.call(arguments,0):[],t=0,r=e.length;r>t;t++)if(i=e[t],i.match(n))return i.func.apply(null,n);throw new Error("Pattern match failure for args [ "+_.map(n,function(n){return""+n+":"+Su(n)}).join(", ")+" ]")}}}(),we=function(n,t){return new(n.bind.apply(n,[null].concat(t)))},m=function(){function n(n,t){this.put=n,this.test=t}return n}(),Wn=function(){function n(n,t){this.put=n,this.test=t}return n}(),gt=function(){function n(n,t){this.width=n,this.height=t}return n}(),Kn=function(){function n(n,t,e,r){this.left=n,this.top=t,this.width=e,this.height=r}return n}(),ee=function(){function n(n,t,e,r,i,o,u){this.name=n,this.label=t,this.type=e,this.at=r,this.count=i,this.domain=o,this.format=u}return n}(),nn=function(n){function t(n,e,r,i,o,u,a,s){this.valueAt=o,t.__super__.constructor.call(this,n,e,r,i,u,a,s)}return Eu(t,n),t}(ee),xn=function(n){function t(n,e,r,i,o,u){t.__super__.constructor.call(this,n,e,It,r,i,o,u)}return Eu(t,n),t}(ee),cn=function(){function n(){}return n}(),an=function(){function n(n,t,e,r,i,o,u,a,s){this.label=n,this.vectors=t,this.schema=e,this.indices=r,this.cube=i,this.at=o,this.evaluate=u,this.attach=a,this.metadata=s}return n}(),Bt=function(){function n(n){this.value=n}return n}(),En=function(n){function t(n){t.__super__.constructor.call(this,n)}return Eu(t,n),t}(Bt),kt=function(n){function t(n){t.__super__.constructor.call(this,n)}return Eu(t,n),t}(Bt),R=function(n){function t(n){t.__super__.constructor.call(this,n)}return Eu(t,n),t}(Bt),a=function(n){function t(n){t.__super__.constructor.call(this,n)}return Eu(t,n),t}(Bt),en=function(){function n(n){this.name=n}return n}(),Cn=function(n){function t(n){this.evaluate=n}return Eu(t,n),t}(en),Qn=function(n){function t(n){this.evaluate=n}return Eu(t,n),t}(en),rn=function(){function n(n,t){this.color=n,this.opacity=t}return n}(),xt=function(){function n(n,t,e){this.color=n,this.opacity=t,this.size=e}return n}(),ct=function(){function n(n){this.fields=n}return n}(),Un=function(){function n(n){this.index=n}return n}(),Nn=function(){function n(){}return n}(),Fn=function(n){function t(n,t,e,r,i,o,u,a,s){this.position=n,this.shape=t,this.size=e,this.fillColor=r,this.fillOpacity=i,this.strokeColor=o,this.strokeOpacity=u,this.lineWidth=a,this.tooltip=s}return Eu(t,n),t}(Nn),In=function(n){function t(n,t,e,r,i){this.position=n,this.strokeColor=t,this.strokeOpacity=e,this.lineWidth=r,this.tooltip=i}return Eu(t,n),t}(Nn),tt=function(n){function t(n,t,e,r,i){this.position=n,this.strokeColor=t,this.strokeOpacity=e,this.lineWidth=r,this.tooltip=i}return Eu(t,n),t}(Nn),Jn=function(n){function t(n,t,e,r,i,o,u,a,s){this.position=n,this.width=t,this.height=e,this.fillColor=r,this.fillOpacity=i,this.strokeColor=o,this.strokeOpacity=u,this.lineWidth=a,this.tooltip=s}return Eu(t,n),t}(Nn),e=function(){function n(){}return n}(),yn=function(n){function t(n,t,e,r){this.position=n,this.strokeColor=t,this.strokeOpacity=e,this.lineWidth=r}return Eu(t,n),t}(e),t=function(){function n(){}return n}(),bn=function(n){function t(n,t,e,r,i){this.slope=n,this.intercept=t,this.strokeColor=e,this.strokeOpacity=r,this.lineWidth=i,this.render=su}return Eu(t,n),t}(t),qn=function(){function n(){}return n}(),Ln=function(n){function t(n,t,e,r,i,o,u,a,s,c,l){this.space=n,this.positionX=t,this.positionY=e,this.shape=r,this.size=i,this.fillColor=o,this.fillOpacity=u,this.strokeColor=a,this.strokeOpacity=s,this.lineWidth=c,this.tooltip=l,this.geometry=jn}return Eu(t,n),t}(qn),it=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.space=n,this.q0=t,this.q1=e,this.q2=r,this.q3=i,this.qn=o,this.positionY=u,this.height=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f,this.geometry=rt}return Eu(t,n),t}(qn),at=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.space=n,this.positionX=t,this.q0=e,this.q1=r,this.q2=i,this.q3=o,this.qn=u,this.width=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f,this.geometry=ut}return Eu(t,n),t}(qn),y=function(n){function t(n,t,e,r,i,o,u,a,s,c,l){this.space=n,this.positionX=t,this.positionY1=e,this.positionY2=r,this.width=i,this.fillColor=o,this.fillOpacity=u,this.strokeColor=a,this.strokeOpacity=s,this.lineWidth=c,this.tooltip=l,this.geometry=b}return Eu(t,n),t}(qn),u=function(n){function t(n,t,e,r,i,u,a,s,c,l,f){this.space=n,this.positionX1=t,this.positionX2=e,this.positionY=r,this.height=i,this.fillColor=u,this.fillOpacity=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f,this.geometry=o}return Eu(t,n),t}(qn),zn=function(n){function t(n,t,e,r,i,o,u){this.space=n,this.positionX=t,this.positionY=e,this.strokeColor=r,this.strokeOpacity=i,this.lineWidth=o,this.tooltip=u,this.geometry=Mn}return Eu(t,n),t}(qn),J=function(){function n(){}return n}(),Pn=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.positionX=n,this.positionY=t,this.shape=e,this.size=r,this.fill=i,this.fillColor=o,this.fillOpacity=u,this.stroke=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f}return Eu(t,n),t}(J),et=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.q0=n,this.q1=t,this.q2=e,this.q3=r,this.qn=i,this.positionY=o,this.height=u,this.stroke=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f}return Eu(t,n),t}(J),ot=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.positionX=n,this.q0=t,this.q1=e,this.q2=r,this.q3=i,this.qn=o,this.width=u,this.stroke=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f}return Eu(t,n),t}(J),w=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.positionX=n,this.positionY1=t,this.positionY2=e,this.width=r,this.fill=i,this.fillColor=o,this.fillOpacity=u,this.stroke=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f}return Eu(t,n),t}(J),i=function(n){function t(n,t,e,r,i,o,u,a,s,c,l,f){this.positionX1=n,this.positionX2=t,this.positionY=e,this.height=r,this.fill=i,this.fillColor=o,this.fillOpacity=u,this.stroke=a,this.strokeColor=s,this.strokeOpacity=c,this.lineWidth=l,this.tooltip=f}return Eu(t,n),t}(J),Xn=function(n){function t(n,t,e,r,i,o,u){this.positionX=n,this.positionY=t,this.stroke=e,this.strokeColor=r,this.strokeOpacity=i,this.lineWidth=o,this.tooltip=u}return Eu(t,n),t}(J),yt=function(){function n(n,t){this.x=n,this.y=t}return n}(),bt=function(){function n(n,t,e){this.type=n,this.vectors=t,this.domain=e}return n}(),r=function(){function n(){}return n}(),f=function(n){function t(n,t,e,r,i,o,u){this.type=n,this.label=t,this.scale=e,this.domain=r,this.range=i,this.rect=o,this.guide=u}return Eu(t,n),t}(r),Vn=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(r),kn=function(n){function t(n,t,e,r,i,o,u){this.type=n,this.label=t,this.scale=e,this.domain=r,this.range=i,this.rect=o,this.guide=u}return Eu(t,n),t}(Vn),Ft=function(){function n(n,t){this.value=n,this.label=t}return n}(),K=function(){function n(n,t){this.label=n,this.encode=t}return n}(),T=function(n){function t(n){this.value=n,t.__super__.constructor.call(this,"Constant",me(this.value))}return Eu(t,n),t}(K),Dt=function(n){function t(n,e,r){this.vector=r,t.__super__.constructor.call(this,n,e)}return Eu(t,n),t}(K),Lt=function(n){function t(n){this.vectors=n,t.__super__.constructor.call(this,"tooltips")}return Eu(t,n),t}(K),Bn=function(n){function t(n,e,r,i,o,u){this.domain=i,this.range=o,this.guide=u,t.__super__.constructor.call(this,n,e,r)}return Eu(t,n),t}(Dt),x=function(n){function t(n,e,r,i,o,u){this.domain=i,this.range=o,this.guide=u,t.__super__.constructor.call(this,n,e,r)}return Eu(t,n),t}(Dt),Yn=function(n){function t(n,e,r,i,o,u){this.domain=i,this.range=o,this.guide=u,t.__super__.constructor.call(this,n,e,r)}return Eu(t,n),t}(Dt),wt=function(n){function t(n,e,r,i,o,u){this.domain=i,this.range=o,this.guide=u,t.__super__.constructor.call(this,n,e,r)}return Eu(t,n),t}(Dt),dt=function(n){function t(n,e,r,i,o,u){this.domain=i,this.range=o,this.guide=u,t.__super__.constructor.call(this,n,e,r)}return Eu(t,n),t}(Dt),g=function(){function n(){}return n}(),k=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),F=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),Rn=function(n){function t(n){this.coordinates=n}return Eu(t,n),t}(g),on=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),un=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),Ct=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),St=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),mt=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),ue=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),pn=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),_n=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),ht=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),jt=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(g),W=function(n){function t(n){this.value=n}return Eu(t,n),t}(F),Vt=function(n){function t(n){this.field=n}return Eu(t,n),t}(F),O=function(n){function t(n){this.value=n}return Eu(t,n),t}(on),Ht=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(on),E=function(n){function t(n){this.value=n}return Eu(t,n),t}(un),$t=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(un),z=function(n){function t(n){this.value=n}return Eu(t,n),t}(Ct),Qt=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(Ct),A=function(n){function t(n){this.value=n}return Eu(t,n),t}(St),Zt=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(St),M=function(n){function t(n){this.value=n}return Eu(t,n),t}(mt),Jt=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(mt),P=function(n){function t(n){this.value=n}return Eu(t,n),t}(ue),te=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(ue),Y=function(n){function t(n){this.value=n}return Eu(t,n),t}(pn),Gt=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(pn),X=function(n){function t(n){this.value=n}return Eu(t,n),t}(_n),Ut=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(_n),I=function(n){function t(n){this.value=n}return Eu(t,n),t}(ht),Kt=function(n){function t(n,t){this.field=n,this.range=t}return Eu(t,n),t}(ht),ne=function(n){function t(n){this.fields=n}return Eu(t,n),t}(jt),Z=function(){function n(n,t){this.min=n,this.max=t}return n}(),G=function(){function n(n,t){this.min=n,this.max=t}return n}(),U=function(){function n(n,t){this.min=n,this.max=t}return n}(),Gn=function(){function n(){}return n}(),h=function(n){function t(n){this.values=n}return Eu(t,n),t}(Gn),Dn=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(Gn),ft=function(n){function t(n,t){this.min=n,this.max=t}return Eu(t,n),t}(Dn),H=function(n){function t(n,t,e){this.min=n,this.mid=t,this.max=e}return Eu(t,n),t}(Dn),q=function(n){function t(){return t.__super__.constructor.apply(this,arguments)}return Eu(t,n),t}(Gn),lt=function(n){function t(n,t){this.min=n,this.max=t}return Eu(t,n),t}(q),D=function(n){function t(n,t,e){this.min=n,this.mid=t,this.max=e}return Eu(t,n),t}(q),sn=function(){function n(n,t,e,r,i){this.encode=n,this.mask=t,this.highlight=e,this.render=r,this.select=i}return n}(),L=function(){function n(n){this.read=n}return n}(),l=function(){function n(n,t,e,r){this.element=n,this.context=t,this.bounds=e,this.ratio=r}return n}(),re=function(){function n(n,t,e,r,i,o,u,a,s,c,l){this.box=n,this.container=t,this.baseCanvas=e,this.highlightCanvas=r,this.hoverCanvas=i,this.maskCanvas=o,this.clipCanvas=u,this.marquee=a,this.tooltip=s,this.mask=c,this.clip=l}return n}(),gn=function(){function n(n,t,e,r,i,o){this.encodings=n,this.encoders=t,this.mask=e,this.highlight=r,this.render=i,this.select=o}return n}(),ie=function(){function n(n,t,e,r,i,o,u,a){this.viewport=n,this.frame=t,this.test=e,this.highlight=r,this.hover=i,this.selectAt=o,this.selectWithin=u,this.render=a}return n}(),An=function(){function n(n,t,e,r){this.element=n,this.subscribe=t,this.unsubscribe=e,this.highlight=r}return n}(),s=function(){function n(n,t){this.width=n,this.height=t}return n}(),Zn=function(){function n(n,t,e,r,i){this.center=n,this.left=t,this.top=e,this.right=r,this.bottom=i}return n}(),Sn=function(){function n(n,t,e,r){this.left=n,this.top=t,this.right=e,this.bottom=r}return n}(),c=function(){function n(n,t,e){var r;this.width=n,this.height=t,this.margin=e,this.regions=new Zn(r=new Kn(e.left,e.top,n-e.left-e.right,t-e.top-e.bottom),new Kn(0,e.top,e.left,r.height),new Kn(e.left+r.width,e.top,e.right,r.height),new Kn(e.left,0,r.width,e.top),new Kn(e.left,e.top+r.height,r.width,e.bottom))}return n}(),Hn=function(){function n(n,t,e,r){this.where=n,this.limit=t,this.group=e,this.having=r}return n}(),d=function(){function n(n,t){this.key=n,this.value=t}return n}(),n=new d(0,"All"),j=function(){function n(n,t,e,r){this.frame=n,this.hierarchy=t,this.cells=e,this.dimension=r}return n}(),mn=function(){function n(n,t,e){this.category=n,this.indices=t,this.children=e}return n}(),p=function(){function n(n,t){this.levels=n,this.indices=t}return n}(),tn=function(){function n(n,t,e,r,i){this.at=n,this.valueAt=t,this.count=e,this.domain=r,this.format=i}return n}(),ln=function(){function n(n){this.fields=n}return n}(),oe=function(){function n(n,t){this.fields=n,this.predicate=t}return n}(),wn=function(){function n(n,t){this.offset=n,this.length=t}return n}(),hn=function(){function n(n,t){this.fields=n,this.predicate=t}return n}(),vn=function(){function n(n,t){this.frame=n,this.index=t}return n}(),st=function(){function n(n,t){this.frame=n,this.indices=t}return n}(),V=function(){function n(n){this.frame=n}return n}(),N=function(){function n(n){this.vector=n}return n}(),dn=function(){function n(n){this.vector=n}return n}(),nt=function(){function n(n){this.index=n}return n}(),v=function(){function n(n,t){this.vector=n,this.index=t}return n}(),ke=function(n){var t;return t=parseFloat(n),_.isNaN(t)?void 0:t},_e=function(n){var t;return t=parseInt(n,10),_.isNaN(t)?void 0:t},ye=function(n){return null!=n?n:void 0},xu=function(n){return n*n},Ne=function(n,t){return function(e){return n>e?n:e>t?t:e}},qe=Ne(0,1),Or=8,Le=function(n){return n.slice(0)},Ci=function(n,t){var e,r,i,o,u,a,s,c;for(c=[],e=0,r=n.length;r>e;e++)for(a=n[e],u=t(a),o=0,i=u.length;i>o;o++)s=u[o],c.push(s);return c},Hi=function(){var n,t;return t=arguments[0],n=2<=arguments.length?Ou.call(arguments,1):[],function(){return t.apply(null,n)}},me=function(n){return function(){return n}},be=function(n,t){var e,r,i,o;if(n&&t&&n.length===t.length){for(e=r=0,i=n.length;i>r;e=++r)if(o=n[e],o!==t[e])return!1;return!0}return!1},bi=function(){var n,t,e,r,i,o,u,a,s;for(t=arguments[0],s=2<=arguments.length?Ou.call(arguments,1):[],e=[],r=0,i=t.length;i>r;r++)for(n=t[r],u=0,o=s.length;o>u;u++)a=s[u],n instanceof a&&e.push(n);return e},ki=function(){var n,t,e,r,i,o,u,a;for(t=arguments[0],a=2<=arguments.length?Ou.call(arguments,1):[],e=0,r=t.length;r>e;e++)for(n=t[e],o=0,i=a.length;i>o;o++)if(u=a[o],n instanceof u)return n},xi=function(n,t){var e,r,i,o;for(i=[],e=0,r=t.length;r>e;e++)o=t[e],i.push(ki(n,o));return i},rr=function(n,t){return t>n?new Z(n,t):new Z(t,n)},ze=function(n){var t,e,r,i,o;for(i=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY,t=0,e=n.length;e>t;t++)o=n[t],void 0!==o&&(i>=o&&(i=o),o>=r&&(r=o));return new Z(i,r)},Ae=function(n,t){var e,r,i,o,u,a;for(o=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY,e=r=0,u=n;u>=0?u>r:r>u;e=u>=0?++r:--r)void 0!==(a=t(e))&&(o>=a&&(o=a),a>=i&&(i=a));return new Z(o,i)},je=function(n){return function(t){return t.min>=n&&t.max>n?1:t.min<n&&t.max<=n?-1:0}},Fe=je(0),Xe=function(n,t){return new Z(Math.min(n.min,t.min),Math.max(n.max,t.max))},Xi=function(n){return function(t){return t.min>n&&t.max>n?new Z(n,t.max):t.min<n&&t.max<n?new Z(t.min,n):t}},Yi=Xi(0),jr=function(n,t,e){return $.ajax({dataType:n,url:t,success:function(n,t,r){return e(null,n)},error:function(n,t,r){return e(r)}})},fr=function(n,t,e){var r,i,o;return i=function(){return t.length},r=function(n){return t[n]},o=e?function(n){return e(t[n],n)}:r,new xn(n,n,r,i,t,o)},Nr=function(n,t,e,r){return le(n,n,t,e,r)},le=function(n,t,e,r,i){var o,u,a,s;return a=ze(r),u=function(){return r.length},o=function(n){return r[n]},s=i?function(n){return i(r[n],n)}:o,new ee(n,t,e,o,u,a,s)},sr=function(n,t,e,r,i,o){var u,a;return u=Ae(r,i),a=o?function(n){return o(i(n),n)}:i,new ee(n,t,e,i,r,u,a)},wi=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,p,v,g,m,w;for(o=0,i={},v=t(),s=new Array(v),c=function(){var n,t,r;for(r=[],n=0,t=e.length;t>n;n++)m=e[n],r.push(i[m]=new d(o++,m));return r}(),h=p=0,g=v;g>=0?g>p:p>g;h=g>=0?++p:--p)l=n(h),m=void 0!==l?l:"?",(a=i[m])||c.push(i[m]=a=new d(o++,m)),s[h]=a;return u=function(n){return s[n]},w=function(n){return s[n].value},f=r?function(n){return r(s[n].value)}:function(n){return void 0!==(m=s[n].value)?_.escape(m):m},new tn(u,w,t,c,f)},ir=function(n,t,e,r,i){var o,u,a;return u=function(){return e.length},o=function(n){return e[n]},a=wi(o,u,r||[],i),new nn(n,n,t,a.at,a.valueAt,u,a.domain,a.format)},Be=function(n,t){var e,r,i,o,u,a;return i="All",r=new d(0,i),a=function(n){return i},e=function(){return r},o=function(){return t},u=function(){return i},new nn(n,n,zt,e,a,o,[r],u)},ar=function(n,t,e,r,i){var o,u;return u=_.indexBy(t,function(n){return n.name}),o=new an(n,t,u,e,r,null,null,null,i||{}),o.evaluate=function(t){var e,i,a,s;return i=_.isArray(t)?t:[t],a=function(){var a,c,l;for(l=[],a=0,c=i.length;c>a;a++)if(e=i[a],e instanceof Cn)l.push(o.evaluate(e.evaluate(o)));else if(e instanceof Qn){if(!r)throw new Error("Cannot compute aggregate ["+e.name+"] on an unaggregated frame.");l.push(o.evaluate(e.evaluate(o,r)))}else{if(!(e instanceof en))throw new Error("Cannot evaluate ["+t+"] on frame ["+n+"].");if(!(s=u[e.name]))throw new Error("Vector ["+e.name+"] does not exist in frame ["+n+"].");l.push(s)}return l}(),_.flatten(a)},o.attach=function(e){if(u[e.name])throw new Error("Cannot attach vector ["+e.name+"]: a vector by that name already exists in frame ["+n+"]");return t.push(e),u[e.name]=e,e},o.exists=function(n){return u[n]?!0:!1},o},Ur=function(n){var t,e,r,i,o,u,a,s,c,l,f;for(f=new Array(n.indices.length),e=_.map(n.vectors,function(n){return n instanceof nn?n.valueAt:n.at}),c=n.indices,i=0,o=c.length;o>i;i++)for(r=c[i],f[r]=l=new Array(n.vectors.length),s=a=0,u=e.length;u>a;s=++a)t=e[s],l[s]=t(r);return f},wr=function(n){return new Hn(bi(n,oe),bi(n,wn),bi(n,ln),bi(n,hn))},ur=function(n){return _.map(n,function(n){return new en(n)})},or=function(n){return new Cn(function(t){var e,r,i,o,u,a,s,c,l;if(l=_.head(t.evaluate(n)),l instanceof nn)return n;for(a=l.count(),e=l.at,i=new Array(a),o=u=0,s=a;s>=0?s>u:u>s;o=s>=0?++u:--u)void 0!==(c=e(o))&&(i[o]=""+c);return t.attach(r=ir("factor("+l.label+")",zt,i)),[new en(r.name)]})},Ve=function(n){return new Cn(function(t){return t.attach(Be(n,t.indices.length)),[new en(n)]})},ao=Er([String,function(n){return ao(new en(n))}],[en,function(n){return or(n)}],[kt,function(n){var t;return t=n.value,Ve(t)}]),Cr=function(n,t){return new Cn(function(e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w,b,y,k,x,C,S,q,N,W;if(W=_.head(e.evaluate(n)),W instanceof nn)throw new Error("Cannot stack factor ["+W.label+"]: expecting vector.");for(g=W.count(),y=new Array(g),l=new Array(g),b="low("+W.name+", "+t+")",c="high("+W.name+", "+t+")",i=W.at,u=e.cube,t=Math.min(t,u.dimension),o=u.cells,w=s=0,r=new Array(t),C=e.indices,p=0,v=C.length;v>p;p++){for(f=C[p],m=o[f].levels,h=k=0,S=t;S>=0?S>k:k>S;h=S>=0?++k:--k)if(r[h]!==m[h].category){for(w=s=0,d=x=0,q=t;q>=0?q>x:x>q;d=q>=0?++x:--x)r[d]=m[d].category;break}N=i(f),0>N?(y[f]=w,l[f]=w+=N):(y[f]=s,l[f]=s+=N)}return a=function(n,t){return W.format(t)},e.attach(le(b,W.name,W.type,y,a)),e.attach(le(c,W.name,W.type,l,a)),[new en(b),new en(c)]})},Fo=Er([String,Number,function(n,t){return Fo(new en(n),t)}],[en,Number,function(n,t){return Cr(n,t)}]),Go=function(n){var t;return t=Ne(0,n.length-1),function(e){return n[t(-1+Math.round(e*n.length))]}},Pe=function(n){var t,e,r,i,o,u,a,s;return s=function(){var t,e,r;for(r=[],t=0,e=n.length;e>t;t++)a=n[t],(a||0===a)&&r.push(a);return r}(),s.sort(function(n,t){return n-t}),e=s[0],t=s[s.length-1],u=Go(s),r=u(.25),i=u(.5),o=u(.75),[e,r,i,o,t]},he=function(n){var t,e,r,i,o;for(i=0,t=0,e=0,r=n.length;r>e;e++)o=n[e],void 0!==o&&(i+=o,t++);return i/t},de=function(n){var t,e,r,i;for(t=0,e=0,r=n.length;r>e;e++)i=n[e],void 0!==i&&t++;return t},pe=function(n){var t,e,r,i;for(r=Number.NEGATIVE_INFINITY,t=0,e=n.length;e>t;t++)i=n[t],void 0!==i&&i>=r&&(r=i);return r},ve=function(n){var t,e,r,i;for(r=Number.POSITIVE_INFINITY,t=0,e=n.length;e>t;t++)i=n[t],void 0!==i&&r>=i&&(r=i);return r},ge=function(n){var t,e,r,i;for(r=0,t=0,e=n.length;e>t;t++)i=n[t],void 0!==i&&(r+=i);return r},Re=function(n,t,e,r,i){return new Qn(function(o,u){var a,s,c,l,f,h,d,p,v,g,m,w,b,y,k,x;if(m=t+"("+n.name+")",o.exists(m))return new en(m);for(x=_.head(u.frame.evaluate(n)),a=x.at,l=new Array(u.cells.length),w=u.cells,h=d=0,p=w.length;p>d;h=++d){for(s=w[h],k=[],b=s.indices,g=0,v=b.length;v>g;g++)f=b[g],void 0!==(y=a(f))&&k.push(y);l[h]=i(k)}return o.attach(c=Nr(m,e,l,r)),[new en(c.name)]})},Qi=function(n,t,e,r){return Er([String,function(i){return Re(new en(i),n,t,e,r)}],[en,function(i){return Re(i,n,t,e,r)}])},eo=Qi("count",Xt,_.identity,de),Zi=Qi("avg",Xt,_.identity,he),Co=Qi("max",Xt,_.identity,pe),So=Qi("min",Xt,_.identity,ve),Ro=Qi("sum",Xt,_.identity,ge),ho=function(){var n,t,e;return t=1<=arguments.length?Ou.call(arguments,0):[],e=function(){var e,r,i;for(i=[],e=0,r=t.length;r>e;e++)if(n=t[e],n instanceof en)i.push(n);else{if(!_.isString(n))throw new Error("Cannot group by ["+n+"]");i.push(new en(n))}return i}(),new ln(e)},Ji=Er([[String],Function,function(n,t){return new oe(ur(n),t)}]),Do=function(){var n,t,e;return e=2<=arguments.length?Ou.call(arguments,0,t=arguments.length-1):(t=0,[]),n=arguments[t++],Ji(e,n)},yo=Er([Number,Number,function(n,t){return new wn(n,t)}],[Number,function(n){return new wn(0,n)}]),Ki=Er([[String],Function,function(n,t){return new hn(ur(n),t)}],[[en],Function,function(n,t){return new hn(n,t)}]),vo=function(){var n,t,e;return e=2<=arguments.length?Ou.call(arguments,0,t=arguments.length-1):(t=0,[]),n=arguments[t++],Ki(e,n)},uo=function(n){return function(t){return t===n}},qo=function(n){return function(t){return t!==n}},xo=function(n){return function(t){return n>t}},po=function(n){return function(t){return t>n}},wo=function(n){return function(t){return n>=t}},fo=function(n){return function(t){return t>=n}},bo=function(n){if(Mt!==Su(n))throw new Error("like ["+n+"]: expecting RegExp");return function(t){return n.test(t)}},mo=function(n){return function(t){var e,r,i;for(r=0,i=n.length;i>r;r++)if(e=n[r],e===t)return!0;return!1}},No=function(n){return function(t){var e,r,i;for(r=0,i=n.length;i>r;r++)if(e=n[r],e===t)return!1;return!0}},Uo=function(t,e){var r,i,o,u,a,s,c,l,f,h,d;return c=e.where.length?ar(t.label,t.vectors,_i(t,e.where)):t,h=e.group.length?(s=Ci(e.group,function(n){return n.fields}),u=function(){var n,t,e;for(e=[],n=0,t=s.length;t>n;n++){if(a=s[n],d=_.head(c.evaluate(a)),!(d instanceof nn))throw new Error("Cannot group by ["+a.name+"]: not a Factor.");e.push(d)}return e}(),l={0:new mn(n,c.indices,{})},xe(l,u,0),i=[],Oe(l[0].children,s.length-1,i,0,new Array(s.length)),o=new j(c,l,i,s.length),r=fe(c.label+"'",o,u),e.having.length?ar(r.label,r.vectors,_i(r,e.having),r.cube):r):c,e.limit.length?(f=e.limit[e.limit.length-1],ar(h.label,h.vectors,h.indices.slice(f.offset,f.offset+f.length))):h},_i=function(n,t){var e,r,i,o,u,a,s,c,l,f,h,d,p,v,g,m;for(e=n.indices,l=0,f=t.length;f>l;l++){for(g=t[l],s=[],m=function(){var t,e,r,i;for(r=g.fields,i=[],e=0,t=r.length;t>e;e++)u=r[e],i.push(_.head(n.evaluate(u)));return i}(),o=_.map(m,function(n){return n instanceof nn?n.valueAt:n.at}),p=0,h=e.length;h>p;p++){for(a=e[p],r=new Array(m.length),c=v=0,d=o.length;d>v;c=++v)i=o[c],r[c]=i(a);g.predicate.apply(null,r)&&s.push(a)}e=s}return e},fe=function(n,t,e){var r,i,o;return r=_.range(t.cells.length),o=function(){var n,r,o;for(o=[],i=n=0,r=t.dimension;r>=0?r>n:n>r;i=r>=0?++n:--n)o.push(mi(t,e[i],i));return o}(),ar(n,o,r,t)},xe=function(n,t,e){var r,i,o,u,a,s,c,l,f,h;r=t[e].at;for(s in n){for(f=n[s],u=f.children,h=f.indices,c=0,l=h.length;l>c;c++)a=h[c],i=r(a),(o=u[i.key])||(u[i.key]=o=new mn(i,[],{})),o.indices.push(a);e<t.length-1&&xe(u,t,e+1)}},Oe=function(n,t,e,r,i){var o,u;for(o in n)u=n[o],i[r]=u,r===t?e.push(new p(Le(i),u.indices)):Oe(u.children,t,e,r+1,i)},mi=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v;for(a=new Array(n.cells.length),s={},c=[],p=n.cells,f=h=0,d=p.length;d>h;f=++h)o=p[f],a[f]=i=o.levels[e].category,s[i.value]||(s[i.value]=i,c.push(i));return r=function(n){return a[n]},v=function(n){return a[n].value},l=function(n){return a[n].value},u=function(){return a.length},new nn(t.label,t.label,t.type,r,v,u,c,l)},S={c10:["#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],c20:["#1f77b4","#aec7e8","#ff7f0e","#ffbb78","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5","#8c564b","#c49c94","#e377c2","#f7b6d2","#7f7f7f","#c7c7c7","#bcbd22","#dbdb8d","#17becf","#9edae5"],c20b:["#393b79","#5254a3","#6b6ecf","#9c9ede","#637939","#8ca252","#b5cf6b","#cedb9c","#8c6d31","#bd9e39","#e7ba52","#e7cb94","#843c39","#ad494a","#d6616b","#e7969c","#7b4173","#a55194","#ce6dbd","#de9ed6"],c20c:["#3182bd","#6baed6","#9ecae1","#c6dbef","#e6550d","#fd8d3c","#fdae6b","#fdd0a2","#31a354","#74c476","#a1d99b","#c7e9c0","#756bb1","#9e9ac8","#bcbddc","#dadaeb","#636363","#969696","#bdbdbd","#d9d9d9"]},$i=function(n){return n>10?S.c20:S.c10},Te=function(n){var t,e,r,i;return i=n.rgb(),r=i[0],e=i[1],t=i[2],chroma.rgb(r,e,t)},Ye=function(n,t){return t>=0&&1>t?Te(n).alpha(t).css():n.css()},Lr=function(n,t,e,r){var i;return i=Math.sqrt(r/Wu),n.beginPath(),n.arc(t,e,i,0,Tu,!1),n.closePath()},Vr=function(n,t,e,r){var i;return i=.5*Math.sqrt(r),n.save(),n.translate(t,e),n.beginPath(),n.moveTo(i,i),n.lineTo(-i,i),n.lineTo(-i,-i),n.lineTo(i,-i),n.closePath(),n.restore()},Rr=function(n,t,e,r){var i,o;return i=.5*Math.sqrt(r/5),o=3*i,n.save(),n.translate(t,e),n.beginPath(),n.moveTo(o,i),n.lineTo(i,i),n.lineTo(i,o),n.lineTo(-i,o),n.lineTo(-i,i),n.lineTo(-o,i),n.lineTo(-o,-i),n.lineTo(-i,-i),n.lineTo(-i,-o),n.lineTo(i,-o),n.lineTo(i,-i),n.lineTo(o,-i),n.closePath(),n.restore()},Br=function(n,t,e,r){var i,o;return o=Math.sqrt(r/(2*Pt)),i=o*Pt,n.save(),n.translate(t,e),n.beginPath(),n.moveTo(i,0),n.lineTo(0,o),n.lineTo(-i,0),n.lineTo(0,-o),n.closePath(),n.restore()},Gr=function(n,t,e,r){var i,o;return i=Math.sqrt(r/_t),o=i*_t/2,n.save(),n.translate(t,e),n.beginPath(),n.moveTo(0,-o),n.lineTo(i,o),n.lineTo(-i,o),n.closePath(),n.restore()},Dr=function(n,t,e,r){var i,o;return i=Math.sqrt(r/_t),o=i*_t/2,n.save(),n.translate(t,e),n.beginPath(),n.moveTo(0,o),n.lineTo(i,-o),n.lineTo(-i,-o),n.closePath(),n.restore()},$r=function(n,t,e,r){var i,o;return o=Math.sqrt(r/_t),i=o*_t/2,n.save(),n.translate(t,e),n.beginPath(),n.moveTo(i,0),n.lineTo(-i,o),n.lineTo(-i,-o),n.closePath(),n.restore()},Hr=function(n,t,e,r){var i,o;return o=Math.sqrt(r/_t),i=o*_t/2,n.save(),n.translate(t,e),n.beginPath(),n.moveTo(-i,0),n.lineTo(i,-o),n.lineTo(i,o),n.closePath(),n.restore()},vt={circle:Lr,square:Vr,cross:Rr,diamond:Br,triangleUp:Gr,triangleDown:Dr,triangleLeft:Hr,triangleRight:$r},pt={c8:["circle","square","cross","diamond","triangleUp","triangleDown","triangleLeft","triangleRight"]},Gi=function(){return pt.c8},mu=function(n){return function(t){return void 0!==t?n(t):void 0}},pr=function(n,t){var e;return e=d3.scale.linear().domain([n.min,n.max]).range([t.min,t.max]).nice(),[mu(e),e.tickFormat,e.ticks]},vr=function(n,t){var e,r,i,o,u,a,s;for(r=0,e={},o=0,u=n.length;u>o;o++)i=n[o],e[i.key]=r++;return a=(t.max-t.min)/n.length/2,
s=t.min,mu(function(n){return s+2*e[n.key]*a+a})},Ue=function(n,t){var e,r;return r=t.values,e=r.length,mu(function(n){return r[n.key%e]})},kr=function(n,t){return mu(d3.scale.linear().domain([n.min,n.max]).range([t.min,t.max]))},nr=function(n,t){return mu(d3.scale.linear().domain([n.min,n.mid,n.max]).range([t.min,t.mid,t.max]))},_r=function(n,t){return mu(chroma.scale([t.min,t.max]).domain([n.min,n.max]).mode("lch"))},Ze=function(n,t){var e,r;return e=chroma.scale([t.min,t.mid]).domain([n.min,n.mid]).mode("lch"),r=chroma.scale([t.mid,t.max]).domain([n.mid,n.max]).mode("lch"),function(t){return void 0!==t?t<n.mid?e(t):r(t):void 0}},Je=Er([ft,q,_r],[H,q,Ze]),lr=Er([ft,ft,kr],[H,H,nr]),Ce=function(n){var t;return t=n.toString(16),1===t.length?"0"+t:t},Ke=function(n){var t,e,r,i;return t=n.context,r=n.ratio,e=function(){return"#fff"},i=function(n,e){var i,o,u,a,s;return s=t.getImageData(n*r,e*r,1,1).data,a=s[0],u=s[1],o=s[2],i=s[3],255===a&&255===u&&255===o&&255===i},new m(e,i)},dr=function(n){var t,e,r,i,o,u;return e=n.context,o=n.ratio,t=0,r={},i=function(n){var e,i,o,u;return i=t++,t>=C&&(t=0),r[i]=n,u=i>>16&255,o=i>>8&255,e=255&i,"#"+Ce(u)+Ce(o)+Ce(e)},u=function(n,t){var i,u,a,s,c,l;return l=e.getImageData(n*o,t*o,1,1).data,c=l[0],s=l[1],u=l[2],i=l[3],255===i?(a=(c<<16)+(s<<8)+u,r[a]):void 0},new Wn(i,u)},ai=function(n,t){var e,r,i,o,u,a,s;return s=n.scale,r=n.domain,a=n.range,o=n.guide,u=t.label,e=t.at,i=function(n){return s(e(n))},new Bn(u,i,t,r,a,o)},ni=function(n,t){return new T(n.scale(t))},Zr=function(n,t){var e,r,i,o,u,a,s;return t instanceof Ht||t instanceof Qt?(s=_.head(n.evaluate(t.field)),s instanceof nn?(t.range||(t.range=new h($i(s.domain.length))),u=Ue(s.domain,t.range),e=s.at,i=function(n){return chroma(u(e(n)))},new x(s.label,i,s,s.domain,t.range,null)):(r=function(){switch(Fe(s.domain)){case 1:return new ft(s.domain.min,s.domain.max);case-1:return new ft(s.domain.min,s.domain.max);default:return new H(s.domain.min,0,s.domain.max)}}(),a=Fe(r),o=t.range?t.range instanceof D?r instanceof ft?1===a?new lt(t.range.mid,t.range.max):new lt(t.range.min,t.range.mid):t.range:(r instanceof H?r=new ft(r.min,r.max):void 0,t.range):r instanceof ft?1===a?new lt("#deebf7","#3182bd"):new lt("#e6550d","#fee6ce"):new D("#fc8d59","#ffffbf"),u=Je(r,o),e=s.at,i=function(n){return u(e(n))},new x(s.label,i,s,r,o,null))):new T(t.value)},ii=function(n,t){var e,r,i,o,u,a;if(t instanceof $t||t instanceof Zt){if(a=_.head(n.evaluate(t.field)),a instanceof nn)throw new Error("Could not encode opacity. Vector ["+a.label+"] is a Factor.");return r=new ft(a.domain.min,a.domain.max),o=t.range?new ft(qe(t.range.min),qe(t.range.max)):t.range=new ft(.05,1),u=lr(r,o),e=a.at,i=function(n){return u(e(n))},new Yn(a.label,i,a,r,o,null)}return new T(qe(t.value))},di=function(n,t){var e,r;return n&&t?(e=n.encode,r=t.encode,new Dt("("+n.label+", "+t.label+")",function(n){return Ye(e(n),r(n))})):void 0},gi=function(n,t){return function(e,r,i){var o,u,a,s,c,l;if(r instanceof n){if(l=_.head(e.evaluate(r.field)),l instanceof nn)throw new Error("Could not encode size. Vector ["+l.label+"] is a Factor.");return u=new ft(l.domain.min,l.domain.max),s=r.range?new ft(qe(r.range.min),qe(r.range.max)):r.range=new ft(.05,1),c=lr(u,s),o=l.at,a=function(n){return i*c(o(n))},new t(l.label,a,u,s,null)}return new T(i*qe(r.value))}},fi=gi(Jt,wt),vi=gi(te,wt),ei=gi(Gt,wt),Kr=function(n,t){var e,r,i,o,u,a;if(t instanceof Jt){if(a=_.head(n.evaluate(t.field)),a instanceof nn)throw new Error("Could not encode size. Vector ["+a.label+"] is a Factor.");return r=new ft(a.domain.min,a.domain.max),o=t.range?new ft(xu(t.range.min),xu(t.range.max)):t.range=new ft(xu(Or),xu(30)),u=lr(r,o),e=a.at,i=function(n){return u(e(n))},new wt(a.label,i,a,r,o,null)}return new T(xu(t.value))},ri=function(n,t){var e,r,i,o,u,a;if(t instanceof Ut){if(a=_.head(n.evaluate(t.field)),a instanceof nn)throw new Error("Could not encode lineWidth. Vector ["+a.label+"] is a Factor.");return r=new ft(a.domain.min,a.domain.max),o=t.range?new ft(t.range.min,t.range.max):t.range=new ft(1.5,15),u=lr(r,o),e=a.at,i=function(n){return u(e(n))},new wt(a.label,i,a,r,o,null)}return new T(t.value)},li=function(n,t){var e,r,i,o;if(t instanceof Kt){if(o=_.head(n.evaluate(t.field)),!(o instanceof nn))throw new Error("Could not encode shape. Vector ["+o.label+"] is not a Factor.");return t.range||(t.range=new h(Gi(o.domain.length))),i=Ue(o.domain,t.range),e=o.at,r=function(n){return vt[i(e(n))]},new dt(o.label,r,o,o.domain,t.range,null)}return new T(vt[t.value]||vt.circle)},pi=function(n,t){var e,r;return t?(r=function(){var r,i,o,u;for(o=t.fields,u=[],r=0,i=o.length;i>r;r++)e=o[r],u.push(_.head(n.evaluate(e)));return u}(),new Lt(r)):void 0},Ii=function(n,t){return[null!=n?n:new O(chroma(_.head(S.c10))),null!=t?t:new E(1)]},zi=function(n,t,e){return[null!=n?n:new z(chroma(_.head(S.c10))),null!=t?t:new A(1),null!=e?e:new X(1.5)]},Mi=function(n,t,e,r,i,o,u){var a,s,c,l;return a=n||t,s=e||r||i,a||s||(o&&(a=!0),u&&(s=!0)),a&&(c=Ii(n,t),n=c[0],t=c[1]),s&&(l=zi(e,r,i),e=l[0],r=l[1],i=l[2]),[n,t,e,r,i]},ti=function(n,t){var e,r;return t.fillColor||t.fillOpacity?[e=Zr(n,t.fillColor),r=ii(n,t.fillOpacity),di(e,r)]:[]},hi=function(n,t){var e,r;return t.strokeColor||t.strokeOpacity||t.lineWidth?[e=Zr(n,t.strokeColor),r=ii(n,t.strokeOpacity),di(e,r),ri(n,t.lineWidth)]:[]},We=function(n,t,e,r,i){return n.beginPath(),n.rect(t,e,r,i),n.clip()},Fr=function(n,t,e){return n.lineWidth=e,n.strokeStyle=t,n.stroke()},Xr=function(n,t){return n.fillStyle=t,n.fill()},Ir=function(n,t,e,r,i){return n.beginPath(),n.moveTo(t,e),n.lineTo(r,i),n.stroke()},zr=function(n,t,e,r,i){return n.beginPath(),r>e?n.rect(t-i/2,e,i,r-e):n.rect(t-i/2,r,i,e-r),n.closePath()},Mr=function(n,t,e,r,i){return n.beginPath(),e>t?n.rect(t,r-i/2,e-t,i):n.rect(e,r-i/2,t-e,i),n.closePath()},Ar=function(n,t,e,r,i,o,u,a,s,c){var l,f;return void 0!==t&&void 0!==e&&void 0!==r&&void 0!==i&&void 0!==o&&void 0!==u&&void 0!==a&&void 0!==s&&void 0!==c?(n.strokeStyle=s,n.lineWidth=c,Mr(n,e,i,u,a),n.stroke(),l=a/2,f=a/4,Ir(n,r,u-l,r,u+l),Ir(n,e,u,t,u),Ir(n,i,u,o,u),Ir(n,t,u-f,t,u+f),Ir(n,o,u-f,o,u+f)):void 0},Pr=function(n,t,e,r,i,o,u,a,s,c){var l,f;return void 0!==t&&void 0!==e&&void 0!==r&&void 0!==i&&void 0!==o&&void 0!==u&&void 0!==a&&void 0!==s&&void 0!==c?(n.strokeStyle=s,n.lineWidth=c,zr(n,t,r,o,a),n.stroke(),l=a/2,f=a/4,Ir(n,t-l,i,t+l,i),Ir(n,t,r,t,e),Ir(n,t,o,t,u),Ir(n,t-f,e,t+f,e),Ir(n,t-f,u,t+f,u)):void 0},su=function(n,t,e,r){var i,o,u,a,s,c,l,f,h;u=n.slope,i=n.intercept,a=n.strokeColor,s=n.strokeOpacity,o=n.lineWidth,void 0!==i?0===u?e instanceof Vn&&(c=t.range.min,l=t.range.max,f=h=e.scale(i)):t instanceof Vn&&e instanceof Vn&&(c=t.scale(t.domain.min),l=t.scale(t.domain.max),f=e.scale(u*t.domain.min+i),h=e.scale(u*e.domain.max+i)):t instanceof Vn&&(c=l=t.scale(u),f=e.range.min,h=e.range.max),void 0!==c&&void 0!==f&&void 0!==l&&void 0!==h&&(r.save(),r.strokeStyle=Ye(a,s),r.lineWidth=o,Ir(r,c,f,l,h),r.restore())},cr=function(n){var t,e,r,i,o,u;return r=n.position.coordinates,i=r[0],t=r[1],o=n.strokeColor,u=n.strokeOpacity,e=n.lineWidth,new bn(i?i.value:0,t?t.value:void 0,o?o.value:chroma("red"),u?u.value:1,e?e.value:1.5)},mr=function(n,t){var e,r,i,o,u,a,s,c,l,f,h,d,p;return o=t[0],u=t[1],h=new yt([o],[u]),l=null!=(a=n.shape)?a:new I("circle"),f=null!=(s=n.size)?s:new M(Or),c=Mi(n.fillColor,n.fillOpacity,n.strokeColor,n.strokeOpacity,n.lineWidth,!1,!0),e=c[0],r=c[1],d=c[2],p=c[3],i=c[4],new Ln(h,o,u,l,f,e,r,d,p,i,n.tooltip)},ui=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g,m;return s=ai(e,t.positionX),c=ai(r,t.positionY),h=li(n,t.shape),d=Kr(n,t.size),l=ti(n,t),o=l[0],u=l[1],i=l[2],f=hi(n,t),v=f[0],g=f[1],p=f[2],a=f[3],m=pi(n,t.tooltip),new Pn(s,c,h,d,i,o,u,p,v,g,a,m)},Ti=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g;for(l=t.positionX,f=t.positionY,h=t.shape,d=t.size,r=t.fill,p=t.stroke,s=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],v=l(i),g=f(i),void 0!==v&&void 0!==g&&(h(i)(e,v,g,d(i)),e.lineWidth=2+(p?s(i):1),e.stroke());for(e.restore(),e.save(),e.globalCompositeOperation="destination-out",e.fillStyle=e.strokeStyle="black",c=0,a=n.length;a>c;c++)i=n[c],v=l(i),g=f(i),void 0!==v&&void 0!==g&&(h(i)(e,v,g,d(i)),p&&(e.lineWidth=s(i),e.stroke()),r&&e.fill());return e.restore()},Bi=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v;for(c=t.positionX,l=t.positionY,f=t.shape,h=t.size,d=t.stroke,a=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],p=c(i),v=l(i),void 0!==p&&void 0!==v&&(s=r.put(i),f(i)(e,p,v,h(i)),e.fillStyle=s,e.fill(),d&&(e.lineWidth=a(i),e.strokeStyle=s,e.stroke()));return e.restore()},fu=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p;for(s=t.positionX,c=t.positionY,l=t.shape,f=t.size,r=t.fill,h=t.stroke,a=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],d=s(i),p=c(i),void 0!==d&&void 0!==p&&(l(i)(e,d,p,f(i)),h&&(e.lineWidth=a(i),e.strokeStyle=h(i),e.stroke()),r&&(e.fillStyle=r(i),e.fill()));return e.restore()},yu=function(n,t,e,r,i,o){var u,a,s,c,l,f,h,d;for(c=t.positionX,l=t.positionY,f=[],a=0,s=n.length;s>a;a++)u=n[a],h=c(u),d=l(u),void 0!==h&&void 0!==d&&h>=e&&i>=h&&d>=r&&o>=d&&f.push(u);return f},Cu=function(n){return _.map(n,function(n){return n.type}).join(", ")},br=function(n,t){var e,r,i,o,a,s,c,l,f,h,d,p,v,g,m,w,b,_,k,x,C,S,q;switch(S=Cu(t)){case"String, Number":return a=t[0],h=t[1],k=new yt([a],[h]),q=null!=(d=n.width)?d:new P(.8),p=Mi(n.fillColor,n.fillOpacity,n.strokeColor,n.strokeOpacity,n.lineWidth,!0,!1),e=p[0],r=p[1],x=p[2],C=p[3],o=p[4],new y(k,a,void 0,h,q,e,r,x,C,o,n.tooltip);case"String, Number, Number":return a=t[0],f=t[1],h=t[2],k=new yt([a],[f,h]),q=null!=(v=n.width)?v:new P(.8),g=Mi(n.fillColor,n.fillOpacity,n.strokeColor,n.strokeOpacity,n.lineWidth,!0,!1),e=g[0],r=g[1],x=g[2],C=g[3],o=g[4],new y(k,a,f,h,q,e,r,x,C,o,n.tooltip);case"Number, String":return c=t[0],l=t[1],k=new yt([c],[l]),i=null!=(m=n.height)?m:new Y(.8),w=Mi(n.fillColor,n.fillOpacity,n.strokeColor,n.strokeOpacity,n.lineWidth,!0,!1),e=w[0],r=w[1],x=w[2],C=w[3],o=w[4],new u(k,void 0,c,l,i,e,r,x,C,o,n.tooltip);case"Number, Number, String":return s=t[0],c=t[1],l=t[2],k=new yt([s,c],[l]),i=null!=(b=n.height)?b:new Y(.8),_=Mi(n.fillColor,n.fillOpacity,n.strokeColor,n.strokeOpacity,n.lineWidth,!0,!1),e=_[0],r=_[1],x=_[2],C=_[3],o=_[4],new u(k,s,c,l,i,e,r,x,C,o,n.tooltip);default:throw new Error("Cannot create rect marks with vectors of type ["+S+"]")}},Qr=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g,m;return s=ai(e,t.positionX),c=t.positionY1?ai(r,t.positionY1):ni(r,0),l=ai(r,t.positionY2),m=fi(n,t.width,e.rect.width/e.domain.length),f=ti(n,t),o=f[0],u=f[1],i=f[2],h=hi(n,t),p=h[0],v=h[1],d=h[2],a=h[3],g=pi(n,t.tooltip),new w(s,c,l,m,i,o,u,d,p,v,a,g)},Jr=function(n,t,e,r){var o,u,a,s,c,l,f,h,d,p,v,g,m,w,b,y,_,k;switch(t.space.x.length){case 1:_=t.space.x[0],l=ni(e,0),f=ai(e,_);break;default:d=t.space.x,y=d[0],_=d[1],l=ai(e,y),f=ai(e,_)}return k=t.space.y[0],h=ai(r,k),s=fi(n,t.height,r.rect.height/r.domain.length),p=ti(n,t),u=p[0],a=p[1],o=p[2],v=hi(n,t),m=v[0],w=v[1],g=v[2],c=v[3],b=pi(n,t.tooltip),new i(l,f,h,s,o,u,a,g,m,w,c,b)},Ni=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w;for(l=t.positionX,f=t.positionY1,h=t.positionY2,v=t.width,r=t.fill,d=t.stroke,s=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],g=l(i),m=f(i),w=h(i),p=v(i),void 0!==g&&void 0!==m&&void 0!==w&&void 0!==p&&(zr(e,g,m,w,p),e.lineWidth=2+(d?s(i):1),e.stroke());for(e.restore(),e.save(),e.globalCompositeOperation="destination-out",e.fillStyle=e.strokeStyle="black",c=0,a=n.length;a>c;c++)i=n[c],g=l(i),m=f(i),w=h(i),p=v(i),void 0!==g&&void 0!==m&&void 0!==w&&void 0!==p&&(zr(e,g,m,w,p),d&&(e.lineWidth=s(i),e.stroke()),r&&e.fill());return e.restore()},qi=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w;for(h=t.positionX1,d=t.positionX2,p=t.positionY,o=t.height,r=t.fill,v=t.stroke,l=t.lineWidth,e.save(),a=0,s=n.length;s>a;a++)u=n[a],g=h(u),m=d(u),w=p(u),i=o(u),void 0!==g&&void 0!==m&&void 0!==w&&void 0!==i&&(Mr(e,g,m,w,i),e.lineWidth=2+(v?l(u):1),e.stroke());for(e.restore(),e.save(),e.globalCompositeOperation="destination-out",e.fillStyle=e.strokeStyle="black",f=0,c=n.length;c>f;f++)u=n[f],g=h(u),m=d(u),w=p(u),i=o(u),void 0!==g&&void 0!==m&&void 0!==w&&void 0!==i&&(Mr(e,g,m,w,i),v&&(e.lineWidth=l(u),e.stroke()),r&&e.fill());return e.restore()},Li=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g,m;for(c=t.positionX,l=t.positionY1,f=t.positionY2,p=t.width,h=t.stroke,a=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],v=c(i),g=l(i),m=f(i),d=p(i),void 0!==v&&void 0!==g&&void 0!==m&&void 0!==d&&(s=r.put(i),zr(e,v,g,m,d),Xr(e,s),h&&Fr(e,s,a(i)));return e.restore()},ji=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g,m;for(f=t.positionX1,h=t.positionX2,d=t.positionY,o=t.height,p=t.stroke,c=t.lineWidth,e.save(),a=0,s=n.length;s>a;a++)u=n[a],v=f(u),g=h(u),m=d(u),i=o(u),void 0!==v&&void 0!==g&&void 0!==m&&void 0!==i&&(l=r.put(u),Mr(e,v,g,m,i),Xr(e,l),p&&Fr(e,l,c(u)));return e.restore()},ru=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g;for(s=t.positionX,c=t.positionY1,l=t.positionY2,d=t.width,r=t.fill,f=t.stroke,a=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],p=s(i),v=c(i),g=l(i),h=d(i),void 0!==p&&void 0!==v&&void 0!==g&&void 0!==h&&(zr(e,p,v,g,h),f&&Fr(e,f(i),a(i)),r&&Xr(e,r(i)));return e.restore()},eu=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g;for(l=t.positionX1,f=t.positionX2,h=t.positionY,o=t.height,r=t.fill,d=t.stroke,c=t.lineWidth,e.save(),a=0,s=n.length;s>a;a++)u=n[a],p=l(u),v=f(u),g=h(u),i=o(u),void 0!==p&&void 0!==v&&void 0!==g&&void 0!==i&&(Mr(e,p,v,g,i),d&&Fr(e,d(u),c(u)),r&&Xr(e,r(u)));return e.restore()},bu=function(n,t,e,r,i,o){var u,a,s,c,l,f,h,d,p,v,g,m,w,b,y;for(c=t.positionX,l=t.positionY1,f=t.positionY2,p=t.width,h=[],a=0,s=n.length;s>a;a++)u=n[a],v=c(u),w=l(u),b=f(u),w>b&&(y=w,w=b,b=y),d=p(u),void 0!==v&&void 0!==w&&void 0!==b&&void 0!==d&&(g=v-d/2,m=v+d/2,e>m||g>i||r>b||w>o||h.push(u));return h},wu=function(n,t,e,r,i,o){var u,a,s,c,l,f,h,d,p,v,g,m,w,b,y;for(f=t.positionX1,h=t.positionX2,d=t.positionY,a=t.height,p=[],c=0,l=n.length;l>c;c++)s=n[c],v=f(s),g=h(s),w=d(s),v>g&&(m=v,v=g,g=m),u=a(s),void 0!==v&&void 0!==g&&void 0!==w&&void 0!==u&&(b=w-u/2,y=w+u/2,e>g||v>i||r>y||b>o||p.push(s));return p},yr=function(n,t){var e,r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w,b;switch(g=Cu(t)){case"String, Number, Number, Number, Number, Number":return w=t[0],i=t[1],o=t[2],u=t[3],a=t[4],s=t[5],d=new yt([w],[i,o,u,a,s]),m=null!=(c=n.width)?c:new P(.8),l=zi(n.strokeColor,n.strokeOpacity,n.lineWidth),p=l[0],v=l[1],r=l[2],new at(d,w,i,o,u,a,s,m,p,v,r,n.tooltip);case"Number, Number, Number, Number, Number, String":return i=t[0],o=t[1],u=t[2],a=t[3],s=t[4],b=t[5],d=new yt([i,o,u,a,s],[b]),e=null!=(f=n.height)?f:new P(.8),h=zi(n.strokeColor,n.strokeOpacity,n.lineWidth),p=h[0],v=h[1],r=h[2],new it(d,i,o,u,a,s,b,e,p,v,r,n.tooltip)}},si=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g;return u=ai(e,t.q0),a=ai(e,t.q1),s=ai(e,t.q2),c=ai(e,t.q3),l=ai(e,t.qn),g=ai(r,t.positionY),i=fi(n,t.height,r.rect.height/r.domain.length),f=hi(n,t),d=f[0],p=f[1],h=f[2],o=f[3],v=pi(n,t.tooltip),new et(u,a,s,c,l,g,i,h,d,p,o,v)},Oi=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g;for(l=t.positionY,f=t.q0,h=t.q1,d=t.q2,p=t.q3,v=t.qn,r=t.height,g=t.stroke,s=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],Ar(e,f(i),h(i),d(i),p(i),v(i),l(i),r(i),g(i),2+(g?s(i):1));for(e.restore(),e.save(),e.globalCompositeOperation="destination-out",e.strokeStyle="black",c=0,a=n.length;a>c;c++)i=n[c],Ar(e,f(i),h(i),d(i),p(i),v(i),l(i),r(i),g(i),s(i));return e.restore()},Vi=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g,m,w,b,y;for(f=t.positionY,h=t.q0,d=t.q1,p=t.q2,v=t.q3,g=t.qn,o=t.height,m=t.stroke,c=t.lineWidth,e.save(),a=0,s=n.length;s>a;a++)u=n[a],w=h(u),b=g(u),y=f(u),i=o(u),void 0!==w&&void 0!==b&&void 0!==y&&void 0!==i&&(l=r.put(u),Mr(e,w,b,y,i),Xr(e,l),Fr(e,l,c(u)));return e.restore()},du=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p;for(s=t.positionY,c=t.q0,l=t.q1,f=t.q2,h=t.q3,d=t.qn,r=t.height,p=t.stroke,a=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],Ar(e,c(i),l(i),f(i),h(i),d(i),s(i),r(i),p(i),a(i));return e.restore()},_u=function(n,t,e,r,i,o){var u,a,s,c,l,f,h,d,p,v,g,m,w,b,y,_,k,x,C,S;for(h=t.positionY,d=t.q0,p=t.q1,v=t.q2,g=t.q3,m=t.qn,a=t.height,b=t.stroke,f=t.lineWidth,w=[],c=0,l=n.length;l>c;c++)s=n[c],y=d(s),_=m(s),x=h(s),y>_&&(k=y,y=_,_=k),u=a(s),void 0!==y&&void 0!==_&&void 0!==x&&void 0!==u&&(C=x-u/2,S=x+u/2,e>_||y>i||r>S||C>o||w.push(s));return w},ci=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g;return g=ai(e,t.positionX),o=ai(r,t.q0),u=ai(r,t.q1),a=ai(r,t.q2),s=ai(r,t.q3),c=ai(r,t.qn),v=fi(n,t.width,e.rect.width/e.domain.length),l=hi(n,t),h=l[0],d=l[1],f=l[2],i=l[3],p=pi(n,t.tooltip),new ot(g,o,u,a,s,c,v,f,h,d,i,p)},Ei=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g;for(c=t.positionX,l=t.q0,f=t.q1,h=t.q2,d=t.q3,p=t.qn,g=t.width,v=t.stroke,a=t.lineWidth,e.save(),i=0,o=n.length;o>i;i++)r=n[i],Pr(e,c(r),l(r),f(r),h(r),d(r),p(r),g(r),v(r),2+(v?a(r):1));for(e.restore(),e.save(),e.globalCompositeOperation="destination-out",e.strokeStyle="black",s=0,u=n.length;u>s;s++)r=n[s],Pr(e,c(r),l(r),f(r),h(r),d(r),p(r),g(r),v(r),a(r));return e.restore()},Di=function(n,t,e,r){var i,o,u,a,s,c,l,f,h,d,p,v,g,m,w,b,y;for(c=t.positionX,l=t.q0,f=t.q1,h=t.q2,d=t.q3,p=t.qn,m=t.width,v=t.stroke,a=t.lineWidth,e.save(),o=0,u=n.length;u>o;o++)i=n[o],w=c(i),b=l(i),y=p(i),g=m(i),void 0!==w&&void 0!==b&&void 0!==y&&void 0!==g&&(s=r.put(i),zr(e,w,b,y,g),Xr(e,s),Fr(e,s,a(i)));return e.restore()},pu=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p;for(a=t.positionX,s=t.q0,c=t.q1,l=t.q2,f=t.q3,h=t.qn,p=t.width,d=t.stroke,u=t.lineWidth,e.save(),i=0,o=n.length;o>i;i++)r=n[i],Pr(e,a(r),s(r),c(r),l(r),f(r),h(r),p(r),d(r),u(r));return e.restore()},ku=function(n,t,e,r,i,o){var u,a,s,c,l,f,h,d,p,v,g,m,w,b,y,_,k,x,C,S;for(l=t.positionX,f=t.q0,h=t.q1,d=t.q2,p=t.q3,v=t.qn,b=t.width,m=t.stroke,c=t.lineWidth,g=[],a=0,s=n.length;s>a;a++)u=n[a],y=l(u),x=f(u),C=v(u),x>C&&(S=x,x=C,C=S),w=b(u),void 0!==y&&void 0!==x&&void 0!==C&&void 0!==w&&(_=y-w/2,k=y+w/2,e>k||_>i||r>C||x>o||g.push(u));return g},gr=function(n,t){var e,r,i,o,u,a,s;return r=t[0],i=t[1],u=new yt([r],[i]),o=zi(n.strokeColor,n.strokeOpacity,n.lineWidth),a=o[0],s=o[1],e=o[2],new zn(u,r,i,a,s,e,n.tooltip)},oi=function(n,t,e,r){var i,o,u,a,s,c,l,f;return o=ai(e,t.positionX),u=ai(r,t.positionY),a=hi(n,t),c=a[0],l=a[1],s=a[2],i=a[3],f=pi(n,t.tooltip),new Xn(o,u,s,c,l,i,f)},Wi=function(n,t,e){var r,i,o,u,a,s,c;for(u=t.positionX,a=t.positionY,e.save(),i=0,o=n.length;o>i;i++)r=n[i],s=u(r),c=a(r),e.lineWidth=1.5,e.strokeStyle="black",void 0!==s&&void 0!==c&&(Lr(e,s,c,64),e.stroke());return e.restore()},Ri=function(n,t,e,r){var i,o,u,a,s,c,l;for(a=t.positionX,s=t.positionY,e.save(),o=0,u=n.length;u>o;o++)i=n[o],c=a(i),l=s(i),void 0!==c&&void 0!==l&&(Lr(e,c,l,64),e.fillStyle=r.put(i),e.fill());return e.restore()},cu=function(n,t,e){var r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w,b,y,_;if(f=t.positionX,h=t.positionY,d=t.stroke,c=t.lineWidth,d instanceof T&&c instanceof T){for(e.strokeStyle=d(),e.lineWidth=c(),e.save(),r=!1,u=0,a=n.length;a>u;u++)o=n[u],g=f(o),b=h(o),void 0!==g&&void 0!==b?r?e.lineTo(g,b):(e.beginPath(),r=!0,e.moveTo(g,b)):(r&&e.stroke(),r=!1);return e.restore()}for(e.save(),e.lineCap="round",r=!1,m=void 0,y=void 0,p=void 0,l=0,s=n.length;s>l;l++)o=n[l],w=f(o),_=h(o),void 0!==w&&void 0!==_?(v=d(o),r&&(v!==p?(i=e.createLinearGradient(m,y,w,_),i.addColorStop(0,p||Rt),i.addColorStop(1,v||Rt),e.strokeStyle=i):e.strokeStyle=v,e.lineWidth=c(o),e.beginPath(),e.moveTo(m,y),e.lineTo(w,_),e.stroke()),r=!0,m=w,y=_,p=v):r=!1;return e.restore()},hr=Er([Fn,Array,mr],[In,Array,gr],[Jn,Array,br],[tt,Array,yr]),De=Er([yn,cr]),jn=new sn(ui,Bi,Ti,fu,yu),Mn=new sn(oi,Ri,Wi,cu,yu),b=new sn(Qr,Li,Ni,ru,bu),o=new sn(Jr,ji,qi,eu,wu),rt=new sn(si,Vi,Oi,du,_u),ut=new sn(ci,Di,Ei,pu,ku),no=Er([Number,null,function(n,t){return new s(n,void 0)}],[null,Number,function(n,t){return new s(void 0,t)}],[Number,Number,function(n,t){return new s(n,t)}],[null,null,function(){return new s(void 0,void 0)}]),io=Er([Number,Number,function(n,t){return new G(n,t)}]),oo=Er([Number,Number,function(n,t){return new U(n,t)}]),lo=Er([an,_.identity],[Function,function(n){return new L(n)}]),Vo=Er([Number,function(n){return new En(n)}],[Boolean,function(n){return new a(n)}],[Date,function(n){return new R(n)}],[String,function(n){return new kt(n)}]),Yo=Er([Array,function(n){return new h(n)}],[Number,function(n){return n>0?new ft(0,n):0>n?new ft(n,0):new H(-1,0,1)}],[String,function(n){return new lt(n,"black")}],[Number,Number,function(n,t){return t>=n?new ft(n,t):new ft(t,n)}],[String,String,function(n,t){return new lt(n,t)}],[Number,Number,Number,function(n,t,e){var r,i,o,u;return u=_.sortBy([n,t,e],_.identity),r=u[0],i=u[1],o=u[2],new H(r,i,o)}],[String,String,String,function(n,t,e){return new D(n,t,e)}]),Ee=function(n){var t,e,r,i,o;for(i=[],e=0,r=n.length;r>e;e++)if(t=n[e],t instanceof en)i.push(t);else{if(zt!==(o=Su(t)))throw new Error("Cannot create vector reference from ["+t+"] of type ["+o+"].");i.push(new en(t))}return i},Eo=function(){var n,t,e;return t=1<=arguments.length?Ou.call(arguments,0):[],new Rn(_.every(t,function(n){return n instanceof Bt})?function(){var e,r,i;for(i=[],e=0,r=t.length;r>e;e++)n=t[e],i.push(new W(n.value));return i}():function(){var n,r,i,o;for(i=Ee(t),o=[],n=0,r=i.length;r>n;n++)e=i[n],o.push(new Vt(e));return o}())},so=Er([kt,function(n){return new O(chroma(n.value))}],[String,function(n){return new Ht(new en(n))}],[en,function(n){return new Ht(n)}],[String,q,function(n,t){return new Ht(new en(n),t)}],[en,q,function(n,t){return new Ht(n,t)}],[String,h,function(n,t){return new Ht(new en(n),t)}],[en,h,function(n,t){return new Ht(n,t)}]),co=Er([En,function(n){return new E(n.value)}],[String,function(n){return new $t(new en(n))}],[en,function(n){return new $t(n)}],[String,ft,function(n,t){return new $t(new en(n),t)}],[en,ft,function(n,t){return new $t(n,t)}]),jo=Er([kt,function(n){return new z(chroma(n.value))}],[String,function(n){return new Qt(new en(n))}],[en,function(n){return new Qt(n)}],[String,q,function(n,t){return new Qt(new en(n),t)}],[en,q,function(n,t){return new Qt(n,t)}],[String,h,function(n,t){return new Qt(new en(n),t)}],[en,h,function(n,t){return new Qt(n,t)}]),Lo=Er([En,function(n){return new A(n.value)}],[String,function(n){return new Zt(new en(n))}],[en,function(n){return new Zt(n)}],[String,ft,function(n,t){return new Zt(new en(n),t)}],[en,ft,function(n,t){return new Zt(n,t)}]),Yr=function(n,t){return Er([En,function(t){return new n(t.value)}],[String,function(n){return new t(new en(n))}],[en,function(n){return new t(n)}],[String,ft,function(n,e){return new t(new en(n),e)}],[en,ft,function(n,e){return new t(n,e)}])},Po=Yr(M,Jt),Ho=Yr(P,te),go=Yr(Y,Gt),ko=Er([En,function(n){return new X(n.value)}],[String,function(n){return new Ut(new en(n))}],[en,function(n){return new Ut(n)}],[String,ft,function(n,t){return new Ut(new en(n),t)}],[en,ft,function(n,t){return new Ut(n,t)}]),Ao=Er([kt,function(n){return new I(n.value)}],[String,function(n){return new Kt(new en(n))}],[en,function(n){return new Kt(n)}],[String,h,function(n,t){return new Kt(new en(n),t)}],[en,h,function(n,t){return new Kt(n,t)}]),Bo=function(){var n;return n=1<=arguments.length?Ou.call(arguments,0):[],new ne(Ee(n))},Mo=function(){var n,t;return t=1<=arguments.length?Ou.call(arguments,0):[],1===t.length&&_.isNumber(n=_.head(t))?new Un(n):new ct(Ee(t))},Jo=function(n){var t,e,r,i,o;for(o=[],e=0,r=n.length;r>e;e++)switch(t=n[e],t.type){case"string":o.push({label:t.name,type:"String",domain:null!=(i=t.lightningDomain)?i:[],parse:ye});break;case"integer":o.push({label:t.name,type:"Number",parse:_e});break;case"number":o.push({label:t.name,type:"Number",parse:ke});break;default:throw new Error("Invalid type ["+t.type+"] for schema field ["+t.name+"]")}return o},Ko=function(n,t,e,r){var i,o,u,a,s,c,l,f;return a=Papa.parse(e,{skipEmptyLines:!0}),c=a.data,r&&c.shift(),f=function(){var n,r,a,f,h;for(h=[],u=n=0,r=t.length;r>n;u=++n){for(i=t[u],e=new Array(c.length),o=f=0,a=c.length;a>f;o=++f)s=c[o],void 0!==(l=i.parse(s[u]))&&(e[o]=l);switch(i.type){case"String":h.push(ir(i.label,i.type,e,i.domain));break;case"Number":h.push(Nr(i.label,i.type,e,_.identity));break;default:h.push(void 0)}}return h}(),ar(n,f,_.range(c.length))},to=function(n,t,e,r,i){return function(o){var u,a,s,c,l,f;return l=Math.floor((e-t)/r),u=function(n){return t+n*r},s=function(n,t){var e;return e=function(n){return t(u(n))},sr(n,n,"Number",l,e,_.identity)},f=function(){var n;n=[];for(c in i)a=i[c],n.push(s(c,a));return n}(),f.unshift(sr(n,n,"Number",l,u,_.identity)),o(null,ar("computed",f,_.range(l)))}},ro=function(n){return function(t){return jr("json",n+"/datapackage.json",function(e,r){var i,o;return e?t(e):(i=_.head(r.resources))?(o=i.path)?jr("text",n+"/"+o,function(n,e){if(n)return t(n);try{return t(null,Ko(r.name,Jo(i.schema),e,!0))}catch(o){return n=o,t(n)}}):t(new Error("Resource is missing attribute [path].")):t(new Error("No resources found in data package."))})}},er=function(){var n,t;return n=arguments[0],t=2<=arguments.length?Ou.call(arguments,1):[],function(){var e;return e=1<=arguments.length?Ou.call(arguments,0):[],we(n,xi(e,t))}},Oo=er(Fn,Rn,ht,mt,on,un,Ct,St,_n,jt),Xo=er(Jn,Rn,ue,pn,on,un,Ct,St,_n,jt),To=er(In,Rn,Ct,St,_n,jt),Io=er(tt,Rn,ue,pn,Ct,St,_n,jt),_o=er(yn,Rn,Ct,St,_n),Wo=function(n,t){var e;return e=function(n,t){var r,i,o,u;if(_.isArray(n)){for(i=n.length,o=[];i--;)r=n[i],null!==r&&_.isObject(r)?(e(r,t),o.push(t(r))):o.push(void 0);return o}u=[];for(i in n)Yu.call(n,i)&&(r=n[i],null!==r&&_.isObject(r)?(e(r,t),u.push(t(r))):u.push(void 0));return u},function(r){var i;return i=n.parse(r),e(i,function(n){var t;"CallExpression"===n.type&&"Identifier"===n.callee.type?_.isFunction(Ui[t=n.callee.name])&&(n.callee={type:"MemberExpression",computed:!1,object:{type:"Identifier",name:"plot"},property:{type:"Identifier",name:t}}):"Identifier"===n.type&&_.isFunction(Ui[t=n.name])&&(delete n.name,n.type="MemberExpression",n.computed=!1,n.object={type:"Identifier",name:"plot"},n.property={type:"Identifier",name:t})}),t.generate(i)}},zo={maxCanvasSize:new gt(795,600),visualizationSize:new gt(300,300),axisLabelFont:"10px monospace",axisTickColor:"#4d4d4d",axisTitleFont:"bold 10px monospace",axisLabelColor:"#4d4d4d",gridLineColor:"#eee",originLineColor:"#ccc"},$o=function(n){return Math.round(n)+"px"},Qe=function(n,t){var e,r,i,o;e=document.createElement(n),i=e.style;for(r in t)o=t[r],i[r]=o;return e},Qo=function(n){for(var t;t=n.firstChild;)n.removeChild(t)},Sr=function(n){var t,e;t=document.createElement("style"),t.type="text/css",t.innerHTML=n,e=_.head(document.getElementsByTagName("head")),e.appendChild(t)},qr=function(n){var t,e,r,i,o,u,a,s,c;return e=diecut("table","tbody","tr","th","td"),i=e[0],o=e[1],s=e[2],a=e[3],u=e[4],r=function(){var e;e=[];for(t in n)c=n[t],e.push(s([u(t+":"),a(c)]));return e}(),au(i(o(r)))},Ge=function(n){var t,e,r,i,o,u,a;return a=n.width,o=n.height,i=document.createElement("canvas"),e=i.getContext("2d"),r=window.devicePixelRatio||1,t=e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1,u=r/t,i.style.position="absolute",r!==t?(i.width=a*u,i.height=o*u,e.scale(u,u),i.style.width=$o(a),i.style.height=$o(o)):(i.width=a,i.height=o),new l(i,e,n,u)},Wr=function(n){var t,e,r,i,o,u,a,s,c,l,f,h;return f=function(){var t,e;for(e=[],a=t=1;5>=t;a=++t)e.push(Ge(n));return e}(),t=f[0],o=f[1],u=f[2],l=f[3],r=f[4],i=Qe("div",{position:"relative",overflow:"visible",width:$o(n.width),height:$o(n.height)}),i.className="lz",s=Qe("div",{position:"absolute",left:$o(0),top:$o(0),width:$o(0),height:$o(0),display:"none",outline:"1px dotted #999",background:"rgba(0, 0, 0, 0.05)"}),h=Qe("div",{position:"absolute",left:$o(0),top:$o(0),"max-width":$o(.9*n.width),display:"none"}),h.className="lz-tooltip",i.appendChild(t.element),i.appendChild(o.element),i.appendChild(s),i.appendChild(u.element),i.appendChild(h),c=dr(l),e=Ke(r),new re(n,i,t,o,u,l,r,s,h,c,e)},Si=function(n){var t,e,r;return r=null!=(e=n.target)?e:n.srcElement,t=r.getBoundingClientRect(),[n.clientX-t.left,n.clientY-t.top]},Se=function(n,t,e,r,i){var o,u,a,s,c,l,f,h,d,p;u=$(document),o=$(n),s=t.style,c=h=l=d=f=p=0,a=!1,o.on("mousemove",function(n){var t;return c=n.offsetX,h=n.offsetY,(void 0===c||void 0===h)&&(t=Si(n),c=t[0],h=t[1]),a?(s.left=$o(c>l?l:c),s.top=$o(h>d?d:h),s.width=$o(Math.abs(c-l)),s.height=$o(Math.abs(h-d))):e(c,h)}),o.on("mousedown",function(n){var t;return n.preventDefault(),l=n.offsetX,d=n.offsetY,(void 0===l||void 0===d)&&(t=Si(n),l=t[0],d=t[1]),a=!0,s.display="block",s.left=$o(l),s.top=$o(d),u.on("mouseup",function(n){var t;return n.preventDefault(),f=n.offsetX,p=n.offsetY,(void 0===f||void 0===p)&&(t=Si(n),f=t[0],p=t[1]),a=!1,s.display="none",s.width=$o(0),s.height=$o(0),u.off("mouseup"),Math.abs(l-f)>5||Math.abs(d-p)>5?r(l,d,f,p):i(l,d)})})},tr=function(){var n,t,e,r;return n={},e=function(t,e){var r;return(r=n[t])?r.push(e):n[t]=[e]},r=function(t,e){var r,i,o,u,a;if(t)if(e){if(a=n[t])for(r=i=0,o=a.length;o>i;r=++i)if(u=a[r],u===e){a.splice(r,1);break}}else delete n[t]},t=function(){var t,e,r,i,o,u;if(e=arguments[0],t=2<=arguments.length?Ou.call(arguments,1):[],u=n[e])for(r=0,i=u.length;i>r;r++)o=u[r],o.apply(null,t)},[e,r,t]},Tr=function(n,t,e,r,i,o,u){var a,s,c,l,f,h,d,p,v,g,m,w,b,y,k,x,C,S,q,N,W,T,O;return l=Wr(n),f=l.baseCanvas,m=l.highlightCanvas,b=l.hoverCanvas,d=l.clipCanvas,x=l.maskCanvas,y=l.marquee,T=l.tooltip,k=l.mask,h=l.clip,O=n.regions.center,s=t.indices,a=void 0,W=function(t,r){var i,o,u,a,s;if(o=k.test(t,r),void 0!==o)for(i=d.context,i.clearRect(0,0,n.width,n.height),u=0,s=e.length;s>u;u++)if(a=e[u],i.save(),i.translate(O.left,O.top),a.mask([o],a.encoders,i,h),i.restore(),h.test(t,r))return o},p=function(n,t,e){var r;return r=qr(e),Qo(T),T.appendChild(r),T.style.display="block",C(n,t)},c=7,C=function(t,e){var r,i,o,u;if("none"!==T.style.display)return u=T.clientWidth,o=T.clientHeight,r=t+c,i=e-c-o,r+u>n.width&&(r=t-c-u),0>i&&(i=e+c),0>r&&(r=0),0>i&&(i=0),T.style.left=$o(r),T.style.top=$o(i)},v=function(){return T.style.display="none"},w=function(r,i){var o,s,c,l,f,h,d,g,m,w,y,_,k,x,S;if(l=W(r,i),l!==a){if(a=l,c=b.context,c.clearRect(0,0,n.width,n.height),v(),void 0!==l){for(c.save(),c.translate(O.left,O.top),f=0,d=e.length;d>f;f++)h=e[f],h.highlight([l],h.encoders,c);for(c.restore(),u("markhover",new vn(t,l)),x={},w=0,g=e.length;g>w;w++){h=e[w],_=h.encodings;for(o in _)if(s=_[o])if(s instanceof Dt)(S=s.vector)&&(x[S.label]=S.format(l));else if(s instanceof Lt)for(k=s.vectors,y=0,m=k.length;m>y;y++)S=k[y],x[S.label]=S.format(l)}p(r,i,x)}}else C(r,i)},g=function(r){var i,o,a,s;if(i=m.context,i.clearRect(0,0,n.width,n.height),r.length){for(f.element.style.opacity=.5,i.save(),i.translate(O.left,O.top),o=0,s=e.length;s>o;o++)a=e[o],a.highlight(r,a.encoders,i),a.render(r,a.encoders,i);i.restore(),u("markselect",new st(t,r))}else f.element.style.opacity=1,u("markdeselect",new V(t))},q=function(n,t){var e;e=W(n,t),g(void 0!==e?[e]:[])},N=function(n,t,r,i){var o,u,a,c,l,f,h;l=-O.left+(n>r?r:n),c=-O.left+(n>r?n:r),h=-O.top+(t>i?i:t),f=-O.top+(t>i?t:i),a=function(){var n,t,r;for(r=[],n=0,t=e.length;t>n;n++)o=e[n],r.push(o.select(s,o.encoders,l,h,c,f));return r}(),u=e.length>1?_.unique(_.flatten(a,!0)):_.head(a),g(u)},S=function(){var t,u,a,c,l,h,d,p;for(u=f.context,p=x.context,ou(u,i,O),uu(u,o,O),u.save(),u.translate(O.left,O.top),p.save(),p.translate(O.left,O.top),a=0,l=e.length;l>a;a++)c=e[a],c.render(s,c.encoders,u),c.mask(s,c.encoders,p,k);for(d=0,h=r.length;h>d;d++)t=r[d],t.render(t,i,o,u);p.restore(),u.restore(),nu(u,i,n.regions.bottom),tu(u,o,n.regions.left)},Se(b.element,y,w,N,q),new ie(l,t,W,g,w,q,N,S)},Zo=function(n,t,e,r,i){var o,u,a,s,c,l,h,d,p,v,g,m,w,b,y,_,k,x,C,S,q;if(n.font=zo.axisLabelFont,n.fillStyle=zo.axisLabelColor,n.strokeStyle=zo.axisTickColor,n.textBaseline="middle",
q=ae+4,m=e-q,n.save(),We(n,q,0,m,r),n.textAlign="right",S=e-5,h=e-6,t instanceof f){for(o=t.guide(),b=Math.floor(r/(ae+2)),a=Math.floor(o.length/b),s=c=0,p=o.length;p>c;s=++c)u=o[s],_=t.scale(u),C=-.5+Math.round(_),Ir(n,S,C,e,C),(0===a||0!==s&&0===s%a)&&n.fillText(u.value,h,_,m-6);Ir(n,e-.5,0,e-.5,r)}else{if(!(t instanceof Vn))throw new Error("Invalid axis type.");for(y=6,w=r-6,k=t.guide(),g=0,v=k.length;v>g;g++)x=k[g],l=x.label,_=t.scale(x.value),C=Math.max(.5,-.5+Math.round(_)),Ir(n,S,C,e,C),d=y>_?y:_>w?w:_,n.fillText(l,h,d,m-6);Ir(n,e-.5,0,e-.5,r)}return n.restore(),n.font=zo.axisTitleFont,n.textAlign="center",n.translate(q/2,r/2),n.rotate(i*fn),n.fillText(t.label,0,0,r),n.restore()},iu=function(n,t,e,r){var i,o,u,a,s;if(n.strokeStyle=zo.gridLineColor,t instanceof f)Ir(n,0,.5,e,.5),Ir(n,0,r-.5,e,r-.5);else if(t instanceof Vn){for(u=t.guide(),i=0,o=u.length;o>i;i++)a=u[i],s=Math.max(.5,-.5+Math.round(t.scale(a.value))),Ir(n,0,s,e,s);t.domain.min<=0&&0<=t.domain.max&&(n.strokeStyle=zo.originLineColor,s=Math.max(.5,-.5+Math.round(t.scale(0))),Ir(n,0,s,e,s))}},ou=function(n,t,e){return n.save(),n.translate(e.left,e.top+e.height),n.rotate(-fn),iu(n,t,e.height,e.width),n.restore()},uu=function(n,t,e){return n.save(),n.translate(e.left,e.top),iu(n,t,e.width,e.height),n.restore()},nu=function(n,t,e){return n.save(),n.translate(e.left,e.top+e.height),n.rotate(-fn),Zo(n,t,e.height,e.width,1),n.restore()},tu=function(n,t,e){return n.save(),n.translate(e.left,e.top),Zo(n,t,e.width,e.height,-1),n.restore()},au=function(n){var t;return t=document.createElement("div"),t.innerHTML=n,t.childNodes[0]},yi=function(n,t){var e,r,i,o,u,a,s;for(r={},i=[],a=0,s=t.length;s>a;a++)o=t[a],u=(e=n.at(o)).key,r[u]||(r[u]=!0,i.push(e));return i},xr=function(n,t){var e,r,i,o,u,a;for(u=null,r=null,e=null,i=0,o=n.length;o>i;i++)if(a=n[i],null===u)switch(u=a.type){case zt:e=a,r=yi(a,t);break;case Xt:r=a.domain;break;default:throw new Error("ni")}else{if(u!==a.type)throw new Error("Incompatible axis vector ["+a.label+"]. Expect type ["+u+"], got ["+a.type+"]");switch(u){case zt:if(e!==a)throw new Error("Incompatible categorical vector ["+a.label+"]. Expected ["+e.label+"].");break;case Xt:r=Xe(r,a.domain);break;default:throw new Error("ni")}}return new bt(u,n,r)},$e=function(n){var t,e;return t=function(){var t,r,i;for(i=[],t=0,r=n.length;r>t;t++)e=n[t],i.push(e.label);return i}(),_.unique(t).join(", ")},Ie=function(n,t){var e,r,i,o,u,a,c,l,h,d,p,v,g;if(p=new Kn(0,0,400,400),e=He(n,"",t,new ft(0,p.width),p),d=ae+4+6+10,e instanceof f){for(l=0,r=e.guide(),o=0,u=r.length;u>o;o++)i=r[o],l<(c=(""+i.value).length)&&(l=c);return new s(Math.ceil(l*ae+d),Math.ceil(r.length*(ae+8)))}if(e instanceof Vn){for(l=0,r=e.guide(),v=e.guide(),h=0,a=v.length;a>h;h++)g=v[h],l<(c=g.label.length)&&(l=c);return new s(Math.ceil(l*ae+d),zo.visualizationSize.height)}throw new Error("Invalid axis type.")},He=function(n,t,e,r,i){var o,u,a,s,c;switch(n){case zt:return a=vr(e,r),o=function(){return e},new f(n,t,a,e,r,i,o);case Xt:return u=pr(e,r),a=u[0],s=u[1],c=u[2],o=function(n){var t,e,r,i,o,u;for(null==n&&(n=10),t=s(n),i=c(n),o=[],e=0,r=i.length;r>e;e++)u=i[e],o.push(new Ft(u,t(u)));return o},new kn(n,t,a,e,r,i,o);default:throw new Error("Unhandled axis type ["+n+"].")}},gu=function(n,t){var e,r;return r=wr(t),e=Uo(n,r),ki(t,ct)?vu(e,t):ki(t,Un)?hu(e,t):lu(e,t)},hu=function(n,t){var e,r,i,o,u,a,s,c,l,f,h,d,p,v,g,m,w;return a=ki(t,Un),o=a.index,s=diecut("table.lz-record","tbody","tr","th","td"),l=s[0],f=s[1],p=s[2],d=s[3],h=s[4],v=function(){var t,e;t=n.schema,e=[];for(u in t)w=t[u],m=w.format(o),r=function(){switch(w.type){case zt:return void 0!==m?m:On;case Xt:return void 0!==m?_.escape(m):On;case It:return void 0!==m?m:On;default:throw new Error("Cannot render table cell of type "+w.type)}}(),e.push(p([d(_.escape(w.label)),h(r)]));return e}(),e=au(l(f(v))),c=_.noop,g=_.noop,i=_.noop,new An(e,c,g,i)},vu=function(n,t){var e,r,i,o,u,a,s,c,l,f,h,d,p,g,m,w,b,y,k,x,C,S,q,N,W;return c=ki(t,ct),N=function(){var t,e,i,o;if(c.fields.length){for(i=c.fields,o=[],t=0,e=i.length;e>t;t++)r=i[t],o.push(n.evaluate(r));return o}return n.vectors}(),W=_.flatten(N),a=diecut("table.lz-table","thead","tbody","tr","th","th.lz-number","td","td.lz-number"),f=a[0],w=a[1],h=a[2],k=a[3],m=a[4],b=a[5],d=a[6],p=a[7],y=function(){var n,t,e;for(e=[],n=0,t=W.length;t>n;n++)switch(q=W[n],q.type){case Xt:e.push(b(_.escape(q.label)));break;default:e.push(m(_.escape(q.label)))}return e}(),x=function(){var t,e,r,i;for(r=n.indices,i=[],t=0,e=r.length;e>t;t++)o=r[t],g=function(){var n,t,e;for(e=[],t=0,n=W.length;n>t;t++)switch(q=W[t],S=q.format(o),q.type){case zt:e.push(d(void 0!==S?S:On));break;case Xt:e.push(p(void 0!==S?_.escape(S):On));break;case It:e.push(d(void 0!==S?S:On));break;default:throw new Error("Cannot render table cell of type "+q.type)}return e}(),i.push(k(g));return i}(),e=au(f([w(k(y)),h(x)])),s=tr(),l=s[0],C=s[1],u=s[2],$(e).on("click",function(t){var e,r,i,o,a,s;switch(r=$(t.target),e=r.parent(),o=e.prop("tagName").toLowerCase(),s=r.prop("tagName").toLowerCase(),a=r.index(),i=e.index(),s){case"td":u("cellselect",new v(W[a],n.indices[i]));break;case"th":u("headerselect",new dn(W[a]))}}),i=_.noop,new An(e,l,C,i)},Me=function(n,t,e){return n.type===Xt?e?Xe(n.domain,e):t.type===zt?Yi(n.domain):n.domain:n.domain},lu=function(n,t){var r,i,o,u,a,l,f,h,d,p,v,g,m,w,b,y,k,x,C,S,q,N,W,T,O,E,Y,X,I,M;return b=_.map(bi(t,Nn),function(t){var e,r;return r=function(){var r,i,o,u;for(o=t.position.coordinates,u=[],r=0,i=o.length;i>r;r++)e=o[r],u.push(n.evaluate(e.field));return u}(),hr(t,_.flatten(r))}),O=_.map(b,function(n){return n.space}),X=Ci(O,function(n){return n.x}),I=Ci(O,function(n){return n.y}),W=xr(X,n.indices),T=xr(I,n.indices),g=Me(W,T,ki(t,G)),m=Me(T,W,ki(t,U)),i=Ie(W.type,g),o=Ie(T.type,m),h=null!=(C=ki(t,s))?C:new s(void 0,void 0),p=null!=(S=h.width)?S:Math.min(zo.maxCanvasSize.width,o.width+i.height),d=null!=(q=h.height)?q:Math.min(zo.maxCanvasSize.height,i.width+o.height),v=new c(p,d,new Sn(Math.min(.3*zo.maxCanvasSize.width,o.width),0,0,Math.min(.3*zo.maxCanvasSize.height,i.width))),u=v.regions.bottom,a=v.regions.left,k=new ft(0,u.width),x=T.type===Xt?new ft(a.height,0):new ft(0,a.height),l=He(W.type,$e(X),g,k,u),f=He(T.type,$e(I),m,x,a),w=_.map(b,function(t){var e,r,i,o,u;i=t.geometry,r=i.encode(n,t,l,f),e={};for(o in r)u=r[o],(null!=u?u.encode:void 0)&&(e[o]=u.encode);return new gn(r,e,i.mask,i.highlight,i.render,i.select)}),r=_.map(bi(t,e),function(n){return De(n)}),N=tr(),E=N[0],Y=N[1],y=N[2],M=Tr(v,n,w,r,l,f,y),M.render(),new An(M.viewport.container,E,Y,M.highlight)},qu=Er([L,Array,Function,function(n,t,e){return n.read(function(n,r){return n?e(n):qu(r,t,e)})}],[an,Array,Function,function(n,t,e){var r;try{return e(null,gu(n,t))}catch(i){return r=i,e(r)}}]),Fi=function(){return Sr(".lz-tooltip {\n  background: #2c2c2c;\n  color: #fff;\n  font-size: 12px;\n}\n.lz-tooltip th, .lz-tooltip td {\n  padding: 0px 4px;\n  vertical-align: middle;\n}\n.lz-tooltip th {\n  text-align: left;\n}\n.lz-table th, .lz-table td {\n  padding: 0px 8px;\n  vertical-align: middle;\n}\n.lz-table tbody > tr:nth-child(odd) {\n  background-color: #f3f3f3;\n}\n.lz-table .lz-number {\n  text-align: right;\n}\n.lz-record th, .lz-record td {\n  padding: 0px 8px;\n  vertical-align: middle;\n}\n.lz-record th {\n  text-align: right;\n}\n.lz-record tbody > tr:nth-child(odd) {\n  background-color: #f3f3f3;\n}")},ce=null,ae=18,Pi=function(){var n,t;return ce=n=Ge(new s(100,100)),t=n.context,t.font=zo.axisLabelFont,ae=t.measureText("M").width},se=!1,Ai=function(){return se?void 0:(Fi(),Pi(),se=!0)},Ui=function(){var n,t;return t=1<=arguments.length?Ou.call(arguments,0):[],(n=ki(t,L,an))?(Ai(),function(e){var r;return r=_.isElement(e)?function(n,t){return n?e.innerHTML=n.message:e.appendChild(t.element)}:_.isFunction(e)?e:void 0,r?qu(n,_.without(t,n),r):void 0}):function(){var n;return n=1<=arguments.length?Ou.call(arguments,0):[],Ui.apply(null,t.concat(n))}},Ui.VERSION="999.999.999",Ui.settings=zo,Ui.bounds=no,Ui.from=lo,Ui.value=Vo,Ui.range=Yo,Ui.position=Eo,Ui.fillColor=so,Ui.fillOpacity=co,Ui.strokeColor=jo,Ui.strokeOpacity=Lo,Ui.size=Po,Ui.width=Ho,Ui.height=go,Ui.lineWidth=ko,Ui.shape=Ao,Ui.tooltip=Bo,Ui.factor=ao,Ui.stack=Fo,Ui.groupBy=ho,Ui.where=Do,Ui.limit=yo,Ui.having=vo,Ui.eq=uo,Ui.ne=qo,Ui.lt=xo,Ui.gt=po,Ui.le=wo,Ui.ge=fo,Ui.like=bo,Ui.avg=Zi,Ui.count=eo,Ui.max=Co,Ui.min=So,Ui.sum=Ro,Ui.parse=Wo,Ui.point=Oo,Ui.rect=Xo,Ui.path=To,Ui.schema=Io,Ui.line=_o,Ui.select=Mo,Ui.dataPackage=ro,Ui.computed=to,Ui.createFrame=ar,Ui.createVector=Nr,Ui.createList=fr,Ui.createFactor=ir,Ui.domainX_HACK=io,Ui.domainY_HACK=oo,null!=("undefined"!=typeof module&&null!==module?module.exports:void 0)?module.exports=Ui:window.plot=Ui}).call(this);